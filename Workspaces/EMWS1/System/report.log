NOTE: PROCEDURE PRINTTO used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

1 
1 
1 
Traverser: Traverser invoked.  MPCONNECT command is sas. 
Traverser: Beginning flow traversal 
77977      %let eminfo= %str();
77978      data _null_;
77979      set EMWS1.Tree_ExportSet;
77980      where eminfo ne '' and NODEPORT in('TRAIN', 'DATA');
77981      call symput('eminfo', strip(eminfo));
77982      run;

NOTE: There were 1 observations read from the data set EMWS1.TREE_EXPORTSET.
      WHERE (eminfo not = ' ') and NODEPORT in ('DATA', 'TRAIN');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

77983      %let prescoreid = %str();
77984      data _null_;
77985      set EMWS1.Tree_EMINFO;
77986      where key = 'PRESCORECODE';
77987      if DATA ne '' then call symput('prescoreid', strip(DATA));
77988      run;

NOTE: There were 0 observations read from the data set EMWS1.TREE_EMINFO.
      WHERE key='PRESCORECODE';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

Retrieving Score Code FIMPORT 
Traverser: WaitingNode "TREE" 
traverser_readyNode_note 
Retrieving Score Code Varsel 
traverser_readyNode_note 
Retrieving Score Code Tree 
77989      *------------------------------------------------------------*;
77990      * Report: Determine If validvarname ANY variables are score inputs;
77991      *------------------------------------------------------------*;
77992      filename _pref "C:\Users\ADMINI~1\AppData\Local\Temp\SAS Temporary Files\_TD25700_DESKTOP-T9TR9Q4_\Prc2\P_385_SJNscore.sas";
77993      proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
77994      %INCLUDE _pref;
NOTE: %INCLUDE (level 1) file _PREF is file C:\Users\ADMINI~1\AppData\Local\Temp\SAS Temporary Files\_TD25700_DESKTOP-T9TR9Q4_\Prc2\P_385_SJNscore.sas.
77995     +* EM Version: 14.1;
77996     +* SAS Release: 9.04.01M3P062415;
77997     +* Host: DESKTOP-T9TR9Q4;
77998     +* Encoding: euc-cn;
77999     +* Locale: en_GB;
78000     +* Project Path: C:\Users\Administrator\Desktop;
78001     +* Project Name: NewProjectExam;
78002     +* Diagram Id: EMWS1;
78003     +* Diagram Name: Analyze_custom;
78004     +* Generated by: Administrator;
78005     +* Date: 07JAN2024:14:31:45;
78006     +* Macro variable identifying the scored data set;
78007     +*%let EM_SCORE_OUTPUT=;
78008     +*------------------------------------------------------------*;
78009     +*------------------------------------------------------------*;
78010     +* TOOL: Extension Class;
78011     +* TYPE: SAMPLE;
78012     +* NODE: FIMPORT;
78013     +*------------------------------------------------------------*;
78014     +*------------------------------------------------------------*;
78015     +* TOOL: Variable selection Class;
78016     +* TYPE: EXPLORE;
78017     +* NODE: Varsel;
78018     +*------------------------------------------------------------*;
78019     +******************************************;
78020     +*** Begin Scoring Code from PROC DMINE ***;
78021     +******************************************;
78022     +
78023     +length _WARN_ $ 4;
78024     +label _WARN_ = "Warnings";
78025     +
78026     +
78027     +/*----G_Items_Purchased begin----*/
78028     +length _NORM12 $ 12;
78029     +_NORM12 = put( Items_Purchased , BEST12. );
78030     +%DMNORMIP( _NORM12 )
78031     +drop _NORM12;
78032     +select(_NORM12);
78033     +  when('7' ) G_Items_Purchased = 3;
78034     +  when('8' ) G_Items_Purchased = 2;
78035     +  when('9' ) G_Items_Purchased = 2;
78036     +  when('10' ) G_Items_Purchased = 4;
78037     +  when('11' ) G_Items_Purchased = 3;
78038     +  when('12' ) G_Items_Purchased = 2;
78039     +  when('13' ) G_Items_Purchased = 1;
78040     +  when('14' ) G_Items_Purchased = 0;
78041     +  when('15' ) G_Items_Purchased = 3;
78042     +  when('16' ) G_Items_Purchased = 4;
78043     +  when('17' ) G_Items_Purchased = 4;
78044     +  when('18' ) G_Items_Purchased = 0;
78045     +  when('19' ) G_Items_Purchased = 5;
78046     +  when('20' ) G_Items_Purchased = 1;
78047     +  when('21' ) G_Items_Purchased = 3;
78048     +  otherwise substr(_WARN_, 2, 1) = 'U';
78049     +end;
78050     +label G_Items_Purchased="Grouped Levels for  Items_Purchased";
78051     +/*----Items_Purchased end----*/
78052     +
78053     +
78054     +****************************************;
78055     +*** End Scoring Code from PROC DMINE ***;
78056     +****************************************;
78057     +*------------------------------------------------------------*;
78058     +* TOOL: Extension Class;
78059     +* TYPE: MODEL;
78060     +* NODE: Tree;
78061     +*------------------------------------------------------------*;
NOTE: %INCLUDE (level 1) ending.
78062      run;

NOTE: Dependency structure written to data set _TEMP.
NOTE: PROCEDURE FCMP used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      

78063      quit;
78064      filename _pref;
NOTE: Fileref _PREF has been deassigned.
78065      proc sort data=_temp(keep=RHS rename=(RHS=NAME)) NODUPKEY;
78066      by NAME;
78067      run;

NOTE: There were 5 observations read from the data set WORK._TEMP.
NOTE: 3 observations with duplicate key values were deleted.
NOTE: The data set WORK._TEMP has 2 observations and 1 variables.
NOTE: Compressing data set WORK._TEMP increased size by 100.00 percent. 
      Compressed is 2 pages; un-compressed would require 1 pages.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

Traverser: Run Completed 
WARNING: Multiple lengths were specified for the BY variable format by input data sets. This might cause unexpected results.
Traverser: Traverser invoked.  MPCONNECT command is sas. 
Traverser: Beginning flow traversal 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL SETMETADATA >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL numElements >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL SETMETADATA >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL numElements >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL SETMETADATA >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL numElements >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL SETMETADATA >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL numElements >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >> 
MPRINT(EM_DIAGRAM):   filename _code "C:\Users\ADMINI~1\AppData\Local\Temp\SAS Temporary Files\_TD25700_DESKTOP-T9TR9Q4_\Prc2\P_385_SJNscore.sas";
MPRINT(EM_DIAGRAM):   filename _xml "C:\Users\ADMINI~1\AppData\Local\Temp\SAS Temporary Files\_TD25700_DESKTOP-T9TR9Q4_\Prc2\scorexml.xml";




MPRINT(SCOREXML):   PROC FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=WORK._alldeps;
MPRINT(SCOREXML):   * EM Version: 14.1;
MPRINT(SCOREXML):   * SAS Release: 9.04.01M3P062415;
MPRINT(SCOREXML):   * Host: DESKTOP-T9TR9Q4;
MPRINT(SCOREXML):   * Encoding: euc-cn;
MPRINT(SCOREXML):   * Locale: en_GB;
MPRINT(SCOREXML):   * Project Path: C:\Users\Administrator\Desktop;
MPRINT(SCOREXML):   * Project Name: NewProjectExam;
MPRINT(SCOREXML):   * Diagram Id: EMWS1;
MPRINT(SCOREXML):   * Diagram Name: Analyze_custom;
MPRINT(SCOREXML):   * Generated by: Administrator;
MPRINT(SCOREXML):   * Date: 07JAN2024:14:31:45;
MPRINT(SCOREXML):   * Macro variable identifying the scored data set;
MPRINT(SCOREXML):   *%let EM_SCORE_OUTPUT=;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   * TOOL: Extension Class;
MPRINT(SCOREXML):   * TYPE: SAMPLE;
MPRINT(SCOREXML):   * NODE: FIMPORT;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   * TOOL: Variable selection Class;
MPRINT(SCOREXML):   * TYPE: EXPLORE;
MPRINT(SCOREXML):   * NODE: Varsel;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   ******************************************;
MPRINT(SCOREXML):   *** Begin Scoring Code from PROC DMINE ***;
MPRINT(SCOREXML):   ******************************************;
MPRINT(SCOREXML):   length _WARN_ $ 4;
MPRINT(SCOREXML):   label _WARN_ = "Warnings";
MPRINT(SCOREXML):   /*----G_Items_Purchased begin----*/ length _NORM12 $ 12;
MPRINT(SCOREXML):   _NORM12 = put( Items_Purchased , BEST12. );
MPRINT(DMNORMIP):   call dmnorm(_NORM12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(SCOREXML):   drop _NORM12;
MPRINT(SCOREXML):   select(_NORM12);
MPRINT(SCOREXML):   when('7' ) G_Items_Purchased = 3;
MPRINT(SCOREXML):   when('8' ) G_Items_Purchased = 2;
MPRINT(SCOREXML):   when('9' ) G_Items_Purchased = 2;
MPRINT(SCOREXML):   when('10' ) G_Items_Purchased = 4;
MPRINT(SCOREXML):   when('11' ) G_Items_Purchased = 3;
MPRINT(SCOREXML):   when('12' ) G_Items_Purchased = 2;
MPRINT(SCOREXML):   when('13' ) G_Items_Purchased = 1;
MPRINT(SCOREXML):   when('14' ) G_Items_Purchased = 0;
MPRINT(SCOREXML):   when('15' ) G_Items_Purchased = 3;
MPRINT(SCOREXML):   when('16' ) G_Items_Purchased = 4;
MPRINT(SCOREXML):   when('17' ) G_Items_Purchased = 4;
MPRINT(SCOREXML):   when('18' ) G_Items_Purchased = 0;
MPRINT(SCOREXML):   when('19' ) G_Items_Purchased = 5;
MPRINT(SCOREXML):   when('20' ) G_Items_Purchased = 1;
MPRINT(SCOREXML):   when('21' ) G_Items_Purchased = 3;
MPRINT(SCOREXML):   otherwise substr(_WARN_, 2, 1) = 'U';
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   label G_Items_Purchased="Grouped Levels for  Items_Purchased";
MPRINT(SCOREXML):   /*----Items_Purchased end----*/ ****************************************;
MPRINT(SCOREXML):   *** End Scoring Code from PROC DMINE ***;
MPRINT(SCOREXML):   ****************************************;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   * TOOL: Extension Class;
MPRINT(SCOREXML):   * TYPE: MODEL;
MPRINT(SCOREXML):   * NODE: Tree;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   RUN;
MPRINT(SCOREXML):   QUIT;
MPRINT(SCOREXML):   Data _NULL_;
MPRINT(SCOREXML):   numobs=0;
MPRINT(SCOREXML):   dsid=OPEN("WORK._alldeps","i");
MPRINT(SCOREXML):   if dsid then do;
MPRINT(SCOREXML):   numobs= attrn(dsid,"nlobs");
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   put "ERROR: ScoreXML: Unable to open dependency data.";
MPRINT(SCOREXML):   msg= sysmsg();
MPRINT(SCOREXML):   put msg;
MPRINT(SCOREXML):   call symput('SYSCC','1012');
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   if numobs <= 0 then do;
MPRINT(SCOREXML):   put "WARNING: ScoreXML: No variable dependencies found in code.";
MPRINT(SCOREXML):   call symput('SYSCC','4');
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   dsid = close(dsid);
MPRINT(SCOREXML):   Run;
MPRINT(SCOREXML):   Data WORK._Rhs (keep=rhs RHS_NLiteral UNAME);
MPRINT(SCOREXML):   Set WORK._alldeps;
MPRINT(SCOREXML):   Length UNAME $32;
MPRINT(SCOREXML):   LABEL rhs = ;
MPRINT(SCOREXML):   LABEL RHS_NLiteral = ;
MPRINT(SCOREXML):   if RHS_Dropped = 0 AND (1 NE index(rhs, '_OLD_')) then do;
MPRINT(SCOREXML):   UNAME = UPCASE(rhs);
MPRINT(SCOREXML):   output;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   Run;
MPRINT(SCOREXML):   Proc Sort Data=WORK._Rhs NODUP out=WORK._Rhs (rename=(rhs=NAME RHS_NLiteral=NLITERAL));
MPRINT(SCOREXML):   By UNAME;
MPRINT(SCOREXML):   Run;
MPRINT(SCOREXML):   Data WORK._Indatavmeta (KEEP= NAME UNAME TYPE LENGTH LABEL FORMAT KEEP);
MPRINT(SCOREXML):   LENGTH NAME $ 32;
MPRINT(SCOREXML):   LENGTH UNAME $ 32;
MPRINT(SCOREXML):   LENGTH TYPE $ 1;
MPRINT(SCOREXML):   LENGTH LENGTH $ 8;
MPRINT(SCOREXML):   LENGTH LABEL $ 256;
MPRINT(SCOREXML):   LENGTH FORMAT $32;
MPRINT(SCOREXML):   KEEP = 0;
MPRINT(SCOREXML):   dsid=OPEN("EMWS1.FIMPORT_DATA","i");
MPRINT(SCOREXML):   if dsid then do;
MPRINT(SCOREXML):   numvars= attrn(dsid,"nvars");
MPRINT(SCOREXML):   do i=1 to numvars;
MPRINT(SCOREXML):   NAME = varname(dsid,i);
MPRINT(SCOREXML):   UNAME = UPCASE(NAME);
MPRINT(SCOREXML):   vtype = vartype(dsid,i);
MPRINT(SCOREXML):   if vtype = 'N' then TYPE = 'N';
MPRINT(SCOREXML):   else TYPE = 'C';
MPRINT(SCOREXML):   nlen = varlen(dsid,i);
MPRINT(SCOREXML):   LENGTH = put(nlen, 8.);
MPRINT(SCOREXML):   LABEL = varlabel(dsid,i);
MPRINT(SCOREXML):   len = klength(LABEL);
MPRINT(SCOREXML):   if (len = 1 or len = 0) and (kindex(LABEL,"'")=1) then LABEL = " ";
MPRINT(SCOREXML):   FORMAT = varfmt(dsid,i);
MPRINT(SCOREXML):   OUTPUT;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   dsid = close(dsid);
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   put "ERROR: ScoreXML: Unable to open input data.";
MPRINT(SCOREXML):   msg= sysmsg();
MPRINT(SCOREXML):   put msg;
MPRINT(SCOREXML):   call symput('SYSCC','1012');
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   RUN;
MPRINT(SCOREXML):   Proc Sort Data=Work._Indatavmeta NODUP Out=Work._Indatavmeta ;
MPRINT(SCOREXML):   BY UNAME;
MPRINT(SCOREXML):   Run;
MPRINT(SCOREXML):   Data _null_;
MPRINT(SCOREXML):   dsid = open("EMWS1.FIMPORT_DATA");
MPRINT(SCOREXML):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(SCOREXML):   if dsid then do;
MPRINT(SCOREXML):   call symput('_engineTable', upcase(attrc(dsid, 'ENGINE')));
MPRINT(SCOREXML):   dsid = close(dsid);
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   Run;
MPRINT(SCOREXML):   Data WORK._Progout;
MPRINT(SCOREXML):   Set EMWS1.FIMPORT_DATA;
MPRINT(SCOREXML):   * EM Version: 14.1;
MPRINT(SCOREXML):   * SAS Release: 9.04.01M3P062415;
MPRINT(SCOREXML):   * Host: DESKTOP-T9TR9Q4;
MPRINT(SCOREXML):   * Encoding: euc-cn;
MPRINT(SCOREXML):   * Locale: en_GB;
MPRINT(SCOREXML):   * Project Path: C:\Users\Administrator\Desktop;
MPRINT(SCOREXML):   * Project Name: NewProjectExam;
MPRINT(SCOREXML):   * Diagram Id: EMWS1;
MPRINT(SCOREXML):   * Diagram Name: Analyze_custom;
MPRINT(SCOREXML):   * Generated by: Administrator;
MPRINT(SCOREXML):   * Date: 07JAN2024:14:31:45;
MPRINT(SCOREXML):   * Macro variable identifying the scored data set;
MPRINT(SCOREXML):   *%let EM_SCORE_OUTPUT=;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   * TOOL: Extension Class;
MPRINT(SCOREXML):   * TYPE: SAMPLE;
MPRINT(SCOREXML):   * NODE: FIMPORT;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   * TOOL: Variable selection Class;
MPRINT(SCOREXML):   * TYPE: EXPLORE;
MPRINT(SCOREXML):   * NODE: Varsel;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   ******************************************;
MPRINT(SCOREXML):   *** Begin Scoring Code from PROC DMINE ***;
MPRINT(SCOREXML):   ******************************************;
MPRINT(SCOREXML):   length _WARN_ $ 4;
MPRINT(SCOREXML):   label _WARN_ = "Warnings";
MPRINT(SCOREXML):   length _NORM12 $ 12;
MPRINT(SCOREXML):   _NORM12 = put( Items_Purchased , BEST12. );
MPRINT(DMNORMIP):   call dmnorm(_NORM12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(SCOREXML):   drop _NORM12;
MPRINT(SCOREXML):   select(_NORM12);
MPRINT(SCOREXML):   when('7' ) G_Items_Purchased = 3;
MPRINT(SCOREXML):   when('8' ) G_Items_Purchased = 2;
MPRINT(SCOREXML):   when('9' ) G_Items_Purchased = 2;
MPRINT(SCOREXML):   when('10' ) G_Items_Purchased = 4;
MPRINT(SCOREXML):   when('11' ) G_Items_Purchased = 3;
MPRINT(SCOREXML):   when('12' ) G_Items_Purchased = 2;
MPRINT(SCOREXML):   when('13' ) G_Items_Purchased = 1;
MPRINT(SCOREXML):   when('14' ) G_Items_Purchased = 0;
MPRINT(SCOREXML):   when('15' ) G_Items_Purchased = 3;
MPRINT(SCOREXML):   when('16' ) G_Items_Purchased = 4;
MPRINT(SCOREXML):   when('17' ) G_Items_Purchased = 4;
MPRINT(SCOREXML):   when('18' ) G_Items_Purchased = 0;
MPRINT(SCOREXML):   when('19' ) G_Items_Purchased = 5;
MPRINT(SCOREXML):   when('20' ) G_Items_Purchased = 1;
MPRINT(SCOREXML):   when('21' ) G_Items_Purchased = 3;
MPRINT(SCOREXML):   otherwise substr(_WARN_, 2, 1) = 'U';
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   label G_Items_Purchased= "Grouped Levels for  Items_Purchased";
MPRINT(SCOREXML):   ****************************************;
MPRINT(SCOREXML):   *** End Scoring Code from PROC DMINE ***;
MPRINT(SCOREXML):   ****************************************;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   * TOOL: Extension Class;
MPRINT(SCOREXML):   * TYPE: MODEL;
MPRINT(SCOREXML):   * NODE: Tree;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   if _N_=1 then do;
MPRINT(SCOREXML):   output;
MPRINT(SCOREXML):   stop;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   Run;
MPRINT(SCOREXML):   Data WORK._Varsmeta (KEEP= NAME UNAME TYPE LENGTH LABEL FORMAT KEEP);
MPRINT(SCOREXML):   LENGTH NAME $ 32;
MPRINT(SCOREXML):   LENGTH UNAME $ 32;
MPRINT(SCOREXML):   LENGTH TYPE $ 1;
MPRINT(SCOREXML):   LENGTH LENGTH $ 8;
MPRINT(SCOREXML):   LENGTH LABEL $ 256;
MPRINT(SCOREXML):   LENGTH FORMAT $32;
MPRINT(SCOREXML):   KEEP = 0;
MPRINT(SCOREXML):   dsid=OPEN("WORK._Progout","i");
MPRINT(SCOREXML):   if dsid then do;
MPRINT(SCOREXML):   numvars= attrn(dsid,"nvars");
MPRINT(SCOREXML):   do i=1 to numvars;
MPRINT(SCOREXML):   Name = varname(dsid,i);
MPRINT(SCOREXML):   UNAME = UPCASE(NAME);
MPRINT(SCOREXML):   vtype = vartype(dsid,i);
MPRINT(SCOREXML):   if vtype = 'N' then TYPE = 'N';
MPRINT(SCOREXML):   else TYPE = 'C';
MPRINT(SCOREXML):   nlen = varlen(dsid,i);
MPRINT(SCOREXML):   LENGTH = put(nlen, 8.);
MPRINT(SCOREXML):   LABEL = varlabel(dsid,i);
MPRINT(SCOREXML):   len = klength(LABEL);
MPRINT(SCOREXML):   if (len = 1 or len = 0) and (kindex(LABEL,"'")=1) then LABEL = " ";
MPRINT(SCOREXML):   FORMAT = varfmt(dsid,i);
MPRINT(SCOREXML):   OUTPUT;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   dsid = close(dsid);
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   put "ERROR: ScoreXML: Unable to open program output.";
MPRINT(SCOREXML):   msg= sysmsg();
MPRINT(SCOREXML):   put msg;
MPRINT(SCOREXML):   call symput('SYSCC','1012');
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   RUN;
MPRINT(SCOREXML):   Proc Sort Data=Work._Varsmeta NODUP Out=Work._Varsmeta ;
MPRINT(SCOREXML):   BY UNAME;
MPRINT(SCOREXML):   Run;
MPRINT(SCOREXML):   Data WORK._Invarsmeta;
MPRINT(SCOREXML):   MERGE WORK._Rhs (in=a) WORK._Indatavmeta (in=b);
MPRINT(SCOREXML):   BY UNAME;
MPRINT(SCOREXML):   if (a and b) then output;
MPRINT(SCOREXML):   Run;
MPRINT(SCOREXML):   Data WORK._Outvarsmeta;
MPRINT(SCOREXML):   MERGE WORK._Varsmeta (in=a) WORK._Indatavmeta (in=b);
MPRINT(SCOREXML):   BY UNAME;
MPRINT(SCOREXML):   If a and not b then output;
MPRINT(SCOREXML):   Run;
MPRINT(SCOREXML):   FILENAME XMLfile "C:\Users\ADMINI~1\AppData\Local\Temp\SAS Temporary Files\_TD25700_DESKTOP-T9TR9Q4_\Prc2\scorexml.xml" encoding="UTF-8" NOBOM;
MPRINT(SCOREXML):   Data _null_;
MPRINT(SCOREXML):   LENGTH strbuf $ 80;
MPRINT(SCOREXML):   strbuf = ' ';
MPRINT(SCOREXML):   file XMLfile;
MPRINT(SCOREXML):   put '<?xml version="1.0" encoding="utf-8"?>';
MPRINT(SCOREXML):   put '<Score>';
MPRINT(SCOREXML):   put @3 '<Producer>';
MPRINT(SCOREXML):   put @6 "<Name> SAS Enterprise Miner </Name>";
MPRINT(SCOREXML):   strbuf = '<Version> ' || "6.2" || ' </Version>';
MPRINT(SCOREXML):   put @6 strbuf;
MPRINT(SCOREXML):   syslocale = getpxlocale();
MPRINT(SCOREXML):   strbuf = '<Locale> '|| strip(syslocale) ||' </Locale>';
MPRINT(SCOREXML):   put @6 strbuf;
MPRINT(SCOREXML):   sysencode = getpxencoding('sas12');
MPRINT(SCOREXML):   strbuf = '<Encoding> '|| strip(sysencode) ||' </Encoding>';
MPRINT(SCOREXML):   put @6 strbuf;
MPRINT(SCOREXML):   put @3 '</Producer>';
MPRINT(SCOREXML):   if "GENERIC" = "CSCORE" then do;
MPRINT(SCOREXML):   put @3 '<CFunction>';
MPRINT(SCOREXML):   put @6 '<Name> score </Name>';
MPRINT(SCOREXML):   put @6 '<Parameter usage="input">';
MPRINT(SCOREXML):   put @9 '<Type> Parm* </Type>';
MPRINT(SCOREXML):   strbuf = '<NumElements> ' || "1" || ' </NumElements>';
MPRINT(SCOREXML):   put @9 strbuf;
MPRINT(SCOREXML):   put @6 '</Parameter>';
MPRINT(SCOREXML):   put @6 '<Parameter usage="output">';
MPRINT(SCOREXML):   put @9 '<Type> Parm* </Type>';
MPRINT(SCOREXML):   strbuf = '<NumElements> ' || "2" || ' </NumElements>';
MPRINT(SCOREXML):   put @9 strbuf;
MPRINT(SCOREXML):   put @6 '</Parameter>';
MPRINT(SCOREXML):   put @3 '</CFunction>';
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   Run;
MPRINT(MKVARXML):   FILENAME XMLfile "C:\Users\ADMINI~1\AppData\Local\Temp\SAS Temporary Files\_TD25700_DESKTOP-T9TR9Q4_\Prc2\scorexml.xml" encoding="UTF-8" NOBOM MOD;
MPRINT(MKVARXML):   Data _null_;
MPRINT(MKVARXML):   Set WORK._Invarsmeta end=eof;
MPRINT(MKVARXML):   Retain varindex 0;
MPRINT(MKVARXML):   Length keepflag $5;
MPRINT(MKVARXML):   Length strbuf $ 1024;
MPRINT(MKVARXML):   Length vindexc $12;
MPRINT(MKVARXML):   strbuf = ' ';
MPRINT(MKVARXML):   file XMLfile;
MPRINT(MKVARXML):   keepflag = "false";
MPRINT(MKVARXML):   vindexc = put(varindex, BEST12.);
MPRINT(MKVARXML):   if _N_ = 1 then do;
MPRINT(MKVARXML):   if "INPUT" = "INPUT" then strbuf = ' <Input count="' || "1" || '">';
MPRINT(MKVARXML):   else strbuf = ' <Output count="' || "1" || '">';
MPRINT(MKVARXML):   put @3 strbuf;
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   if keepflag = "true" then do;
MPRINT(MKVARXML):   if (KEEP = 1) then strbuf = '<Variable index="'||strip(vindexc)||'" keep="true">';
MPRINT(MKVARXML):   else strbuf = '<Variable index="'||strip(vindexc)||'" keep="false">';
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   else strbuf = '<Variable index="'||strip(vindexc)||'">';
MPRINT(MKVARXML):   put @6 strbuf;
MPRINT(MKVARXML):   if (NLITERAL = 1) then do;
MPRINT(MKVARXML):   strbuf = '<Vname>';
MPRINT(MKVARXML):   put @9 strbuf;
MPRINT(MKVARXML):   strbuf = '<![CDATA['||trim(name)||']]>';
MPRINT(MKVARXML):   put @12 strbuf;
MPRINT(MKVARXML):   put @9'</Vname>';
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   else do;
MPRINT(MKVARXML):   strbuf = '<Name> '||strip(name)||' </Name>';
MPRINT(MKVARXML):   put @9 strbuf;
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   if "GENERIC" = "CSCORE" then do;
MPRINT(MKVARXML):   CtypeVal = 'char';
MPRINT(MKVARXML):   NtypeVal = 'double';
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   else do;
MPRINT(MKVARXML):   CtypeVal = 'C';
MPRINT(MKVARXML):   NtypeVal = 'N';
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   if strip(type) = 'C' then strbuf = '<Type length="'|| strip(length)||'"> '||strip(CtypeVal)||' </Type>';
MPRINT(MKVARXML):   else strbuf = '<Type> '||strip(NtypeVal)||' </Type>';
MPRINT(MKVARXML):   put @9 strbuf;
MPRINT(MKVARXML):   if LengthN(LABEL) then do;
MPRINT(MKVARXML):   put @9 '<Description>';
MPRINT(MKVARXML):   strbuf = '<![CDATA['||strip(LABEL)||']]>';
MPRINT(MKVARXML):   put @12 strbuf;
MPRINT(MKVARXML):   put @9 '</Description>';
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   put @6 '</Variable>';
MPRINT(MKVARXML):   varindex = varindex +1;
MPRINT(MKVARXML):   if eof then do;
MPRINT(MKVARXML):   if "INPUT" = "INPUT" then strbuf = "</Input>";
MPRINT(MKVARXML):   else strbuf = "</Output>";
MPRINT(MKVARXML):   put @3 strbuf;
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   Run;
MPRINT(SCOREXML):  ;
MPRINT(MKVARXML):   FILENAME XMLfile "C:\Users\ADMINI~1\AppData\Local\Temp\SAS Temporary Files\_TD25700_DESKTOP-T9TR9Q4_\Prc2\scorexml.xml" encoding="UTF-8" NOBOM MOD;
MPRINT(MKVARXML):   Data _null_;
MPRINT(MKVARXML):   Set WORK._Outvarsmeta end=eof;
MPRINT(MKVARXML):   Retain varindex 0;
MPRINT(MKVARXML):   Length keepflag $5;
MPRINT(MKVARXML):   Length strbuf $ 1024;
MPRINT(MKVARXML):   Length vindexc $12;
MPRINT(MKVARXML):   strbuf = ' ';
MPRINT(MKVARXML):   file XMLfile;
MPRINT(MKVARXML):   keepflag = "false";
MPRINT(MKVARXML):   vindexc = put(varindex, BEST12.);
MPRINT(MKVARXML):   if _N_ = 1 then do;
MPRINT(MKVARXML):   if "OUTPUT" = "INPUT" then strbuf = ' <Input count="' || "2" || '">';
MPRINT(MKVARXML):   else strbuf = ' <Output count="' || "2" || '">';
MPRINT(MKVARXML):   put @3 strbuf;
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   if keepflag = "true" then do;
MPRINT(MKVARXML):   if (KEEP = 1) then strbuf = '<Variable index="'||strip(vindexc)||'" keep="true">';
MPRINT(MKVARXML):   else strbuf = '<Variable index="'||strip(vindexc)||'" keep="false">';
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   else strbuf = '<Variable index="'||strip(vindexc)||'">';
MPRINT(MKVARXML):   put @6 strbuf;
MPRINT(MKVARXML):   if (NLITERAL = 1) then do;
MPRINT(MKVARXML):   strbuf = '<Vname>';
MPRINT(MKVARXML):   put @9 strbuf;
MPRINT(MKVARXML):   strbuf = '<![CDATA['||trim(name)||']]>';
MPRINT(MKVARXML):   put @12 strbuf;
MPRINT(MKVARXML):   put @9'</Vname>';
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   else do;
MPRINT(MKVARXML):   strbuf = '<Name> '||strip(name)||' </Name>';
MPRINT(MKVARXML):   put @9 strbuf;
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   if "GENERIC" = "CSCORE" then do;
MPRINT(MKVARXML):   CtypeVal = 'char';
MPRINT(MKVARXML):   NtypeVal = 'double';
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   else do;
MPRINT(MKVARXML):   CtypeVal = 'C';
MPRINT(MKVARXML):   NtypeVal = 'N';
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   if strip(type) = 'C' then strbuf = '<Type length="'|| strip(length)||'"> '||strip(CtypeVal)||' </Type>';
MPRINT(MKVARXML):   else strbuf = '<Type> '||strip(NtypeVal)||' </Type>';
MPRINT(MKVARXML):   put @9 strbuf;
MPRINT(MKVARXML):   if LengthN(LABEL) then do;
MPRINT(MKVARXML):   put @9 '<Description>';
MPRINT(MKVARXML):   strbuf = '<![CDATA['||strip(LABEL)||']]>';
MPRINT(MKVARXML):   put @12 strbuf;
MPRINT(MKVARXML):   put @9 '</Description>';
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   put @6 '</Variable>';
MPRINT(MKVARXML):   varindex = varindex +1;
MPRINT(MKVARXML):   if eof then do;
MPRINT(MKVARXML):   if "OUTPUT" = "INPUT" then strbuf = "</Input>";
MPRINT(MKVARXML):   else strbuf = "</Output>";
MPRINT(MKVARXML):   put @3 strbuf;
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   Run;
MPRINT(SCOREXML):  ;
MPRINT(SCOREXML):   FILENAME XMLfile "C:\Users\ADMINI~1\AppData\Local\Temp\SAS Temporary Files\_TD25700_DESKTOP-T9TR9Q4_\Prc2\scorexml.xml" encoding="UTF-8" NOBOM MOD;
MPRINT(SCOREXML):   Data _null_;
MPRINT(SCOREXML):   file XMLfile;
MPRINT(SCOREXML):   put '</Score>';
MPRINT(SCOREXML):   Run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _code;
MPRINT(EM_DIAGRAM):   filename _xml;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Report: Create Input table;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc sort data=work._invarsmeta out=_inpckgtemp(keep=NAME);
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.FIMPORT_EMCMETADEFAULT out=_inpckgtemp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _emrprt "C:\Users\ADMINI~1\AppData\Local\Temp\SAS Temporary Files\_TD25700_DESKTOP-T9TR9Q4_\Prc2\P_0NJRRMO\input.xml" nobom;
MPRINT(EM_DIAGRAM):   libname _emrprt xml xmldataform=attribute encoding="UTF-8";
MPRINT(EM_DIAGRAM):   data _emrprt.input;
MPRINT(EM_DIAGRAM):   merge _inpckgtemp(in=_a) _inpckgtemp2(in=_b);
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if _a and _b then output;
MPRINT(EM_DIAGRAM):   run;
WARNING: Multiple lengths were specified for the BY variable NAME by input data sets. This might cause unexpected results.
MPRINT(EM_DIAGRAM):   libname _emrprt;
MPRINT(EM_DIAGRAM):   filename _emrprt;
MPRINT(EM_DIAGRAM):   
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=work._progout out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('work._progout');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options fmterr;
MPRINT(EMADVISECOLUMNS):   data _metaTestView;
MPRINT(EMADVISECOLUMNS):   set work._progout;
MPRINT(EMADVISECOLUMNS):   if _N_=1 then do;
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   stop;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=work._progout out=WORK.M0TOIU5W noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0TOIU5W;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 36 INFORMAT $36 INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M0TOIU5W(keep=name type length label format formatl formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne '' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(format)!!strip(put(formatl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then informat = strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(informat)!!strip(put(informl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0TOIU5W;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M0TOIU5W;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M1PTEX_5 NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1PTEX_5;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M1PTEX_5;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M15AX071(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M1PTEX_5;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1PTEX_5;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M1PTEX_5;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" "MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" "QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX" 
"YEAR" "YYMMDD" "YYMON" "YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" "EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" "NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" "SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if compress(tempfmt, '0123456789.', '') = '' then formattype='NUM';
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = "DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_PARTIND_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('Q') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ ('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   if symexist('RATEMKG_ROLE') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('RATEMKG_ROLE')) in('Y', 'YES') then do;
MPRINT(EMADVISECOLUMNS):   if _uname =: 'POLICY' then ROLE = 'POLICYID';
MPRINT(EMADVISECOLUMNS):   else if _uname in ('PARTITION', '_PARTIND_') then ROLE = 'PARTITION';
MPRINT(EMADVISECOLUMNS):   else if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   if _uname = 'EXPOSURE' then ROLE = 'EXPOSURE';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'YEAR' then ROLE = 'YEAR';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'WEIGHT' then ROLE = 'WEIGHT';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'OFFSET' then ROLE = 'OFFSET';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   if symexist('dmwb_product') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('dmwb_product')) = 'FACTORYMINER_DATASOURCE' then do;
MPRINT(EMADVISECOLUMNS):   if ROLE ^in('INPUT', 'TARGET', 'REJECTED', 'SEGMENT', 'FREQ', 'ID', 'KEY') then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1PTEX_5;
MPRINT(EMADVISECOLUMNS):   set WORK.M1PTEX_5;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= "Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= "Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower 
limit" UPPERLIMIT= "Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= "Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=work._empckgtemp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_outvarsmeta(keep=NAME LABEL) out=work._empckgtemp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _emrprt "C:\Users\ADMINI~1\AppData\Local\Temp\SAS Temporary Files\_TD25700_DESKTOP-T9TR9Q4_\Prc2\P_0NJRRMO\output.xml" nobom;
MPRINT(EM_DIAGRAM):   libname _emrprt xml xmldataform=attribute encoding="UTF-8";
MPRINT(EM_DIAGRAM):   data _emrprt.output;
MPRINT(EM_DIAGRAM):   merge work._empckgtemp(in=_a) work._empckgtemp2(in=_b);
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if _a and _b then output;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   libname _emrprt;
MPRINT(EM_DIAGRAM):   filename _emrprt;
MPRINT(EM_DIAGRAM):    proc datasets library=WORK NOLIST NOWARN NODETAILS;
MPRINT(EM_DIAGRAM):   delete _alldeps _Indatavmeta _Keepvars _Keepnames _Invarsmeta _Progout _Outvarsmeta _Rhs _Varsmeta;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Report: Create Target table;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _emrprt "C:\Users\ADMINI~1\AppData\Local\Temp\SAS Temporary Files\_TD25700_DESKTOP-T9TR9Q4_\Prc2\P_0NJRRMO\target.xml" nobom;
MPRINT(EM_DIAGRAM):   libname _emrprt xml xmldataform=attribute encoding="UTF-8";
MPRINT(EM_DIAGRAM):   data _emrprt.target;
MPRINT(EM_DIAGRAM):   set EMWS1.Varsel_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   length NODEID $32;
MPRINT(EM_DIAGRAM):   where upcase(NAME) in( "CUSTOMER_ID" );
MPRINT(EM_DIAGRAM):   if upcase(NAME) eq "CUSTOMER_ID" then NODEID = "Tree";
MPRINT(EM_DIAGRAM):   if upcase(NAME) = "CUSTOMER_ID" then do;
MPRINT(EM_DIAGRAM):   NAME = 'CUSTOMER_ID';
MPRINT(EM_DIAGRAM):   CREATOR = '';
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   libname _emrprt;
MPRINT(EM_DIAGRAM):   filename _emrprt;
MPRINT(EM_DIAGRAM):    filename _pckger_ 'C:\Users\Administrator\Desktop\NewProjectExam\Reports\Tree_2YDPW\miningResult.xml' encoding="UTF-8" NOBOM;
*------------------------------------------------------------* 
* 
* FIMPORT : Beginning creation of SPK report 
* datetime : 07JAN2024:14:31:46 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;
MPRINT(EM_GETACTIONSTATUS):   proc compare base=EMWS1.FIMPORT_emtrainvariable compare=EMWS1.FIMPORT_variableSet out=diffDS noprint outnoequal outbase outcomp outdiff;
MPRINT(EM_GETACTIONSTATUS):   run;
MPRINT(EM_GETACTIONSTATUS):   data _null_;
MPRINT(EM_GETACTIONSTATUS):   set diffDs end=eof;
MPRINT(EM_GETACTIONSTATUS):   if eof and _N_>0 then call symput('diffVar', 'Y');
MPRINT(EM_GETACTIONSTATUS):   run;
MPRINT(EM_GETACTIONSTATUS):    data _null_;
MPRINT(EM_GETACTIONSTATUS):   format modate best.;
MPRINT(EM_GETACTIONSTATUS):   set sashelp.Vextfl;
MPRINT(EM_GETACTIONSTATUS):   where fileref eq "#LN01986";
MPRINT(EM_GETACTIONSTATUS):   call symput('EM_FILEMODTIME', put(modate, best.));
MPRINT(EM_GETACTIONSTATUS):   run;
WARNING: Attempt to delete macro variable EM_FILEMODTIME failed. Variable not found.
MPRINT(EM_GETACTIONSTATUS):     
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\Administrator\Desktop\NewProjectExam\Workspaces\EMWS1\FIMPORT\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    filename _report_ 'C:\Users\ADMINI~1\AppData\Local\Temp\SAS Temporary Files\_TD25700_DESKTOP-T9TR9Q4_\Prc2\FIMPORT_ReportDataModel.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.FIMPORT_EMTRAINVARIABLE OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.FIMPORT_EMTRAINVARIABLE / view=WORK.FIMPORT_EMTRAINVARIABLE;
MPRINT(EM_DIAGRAM):   label "NAME"n = "Variable Name (C)";
MPRINT(EM_DIAGRAM):   label "ROLE"n = "Role (C)";
MPRINT(EM_DIAGRAM):   label "LEVEL"n = "Measurement Level (C)";
MPRINT(EM_DIAGRAM):   label "ORDER"n = "Order (C)";
MPRINT(EM_DIAGRAM):   label "LABEL"n = "Label (C)";
MPRINT(EM_DIAGRAM):   label "DROP"n = "Drop (C)";
MPRINT(EM_DIAGRAM):   set EMWS1.FIMPORT_EMTRAINVARIABLE(obs=20000);
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------* 
* 
* : End creation of SPK report 
* datetime : 07JAN2024:14:31:46 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):    proc sql;
MPRINT(EM_DIAGRAM):   create view work._base0IGFGTE as select * from WORK.M0T5KO8R order by NAME;
MPRINT(EM_DIAGRAM):   create view work._comp0IGFGTE as select * from WORK.M2YZSS0W order by NAME;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    proc compare data=work._base0IGFGTE compare=work._comp0IGFGTE out=WORK._DIFF0K0501G noprint outnoequal outbase outcomp outdiff;
MPRINT(EM_DIAGRAM):   id NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc sql;
MPRINT(EM_DIAGRAM):   create table WORK._TMP10SZYMUJ as select * from WORK._DIFF0K0501G where NAME in (select NAME from WORK._DIFF0K0501G where _type_ = "DIF") order by NAME, _type_;
MPRINT(EM_DIAGRAM):   proc sql;
MPRINT(EM_DIAGRAM):   create table WORK.DELTAELEM2_NTA79 as select * from WORK._DIFF0K0501G where _type_ = "COMPARE" and NAME not in (select NAME from WORK._DIFF0K0501G where _type_ = "DIF");
MPRINT(EM_DIAGRAM):   create table WORK.DELTDELEM2_NTA79 as select * from WORK._DIFF0K0501G where _type_ = "BASE" and NAME not in (select NAME from WORK._DIFF0K0501G where _type_ = "DIF");
MPRINT(EM_DIAGRAM):   data WORK.DELTAELEM2_NTA79;
MPRINT(EM_DIAGRAM):   set WORK.DELTAELEM2_NTA79;
MPRINT(EM_DIAGRAM):   drop _obs_ _type_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK.DELTDELEM2_NTA79;
MPRINT(EM_DIAGRAM):   set WORK.DELTDELEM2_NTA79;
MPRINT(EM_DIAGRAM):   drop _obs_ _type_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _extfile "C:\Users\Administrator\Desktop\NewProjectExam\Workspaces\EMWS1\FIMPORT\USERTRAINCODE.sas";
MPRINT(EM_DIAGRAM):    filename _extfile "C:\Users\Administrator\Desktop\NewProjectExam\Workspaces\EMWS1\FIMPORT\VARIABLESETDELTA.txt";
MPRINT(EM_DIAGRAM):    filename _extfile "C:\Users\Administrator\Desktop\NewProjectExam\Workspaces\EMWS1\FIMPORT\DELTACODE.txt";
MPRINT(EM_DIAGRAM):    filename _extfile "C:\Users\Administrator\Desktop\NewProjectExam\Workspaces\EMWS1\FIMPORT\EMNOTES.txt" encoding="UTF-8" NOBOM;
Traverser: WaitingNode "TREE" 
traverser_readyNode_note 
*------------------------------------------------------------* 
* 
* Varsel : Beginning creation of SPK report 
* datetime : 07JAN2024:14:31:47 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;
MPRINT(EM_GETACTIONSTATUS):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\Administrator\Desktop\NewProjectExam\Workspaces\EMWS1\Varsel\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    filename _report_ 'C:\Users\ADMINI~1\AppData\Local\Temp\SAS Temporary Files\_TD25700_DESKTOP-T9TR9Q4_\Prc2\Varsel_ReportDataModel.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Varsel_EMTRAINVARIABLE OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Varsel_EMTRAINVARIABLE / view=WORK.Varsel_EMTRAINVARIABLE;
MPRINT(EM_DIAGRAM):   label "NAME"n = "Variable Name (C)";
MPRINT(EM_DIAGRAM):   label "ROLE"n = "Role (C)";
MPRINT(EM_DIAGRAM):   label "LEVEL"n = "Measurement Level (C)";
MPRINT(EM_DIAGRAM):   label "ORDER"n = "Order (C)";
MPRINT(EM_DIAGRAM):   label "LABEL"n = "Label (C)";
MPRINT(EM_DIAGRAM):   label "nlevel"n = "Number of Levels (N)(6.0)";
MPRINT(EM_DIAGRAM):   label "pctmiss"n = "Percent Missing (N)(BEST8.3)";
MPRINT(EM_DIAGRAM):   label "min"n = "Minimum (N)(BEST8.3)";
MPRINT(EM_DIAGRAM):   label "max"n = "Maximum (N)(BEST8.3)";
MPRINT(EM_DIAGRAM):   label "mean"n = "Mean (N)(BEST8.3)";
MPRINT(EM_DIAGRAM):   label "std"n = "Standard Deviation (N)(BEST8.3)";
MPRINT(EM_DIAGRAM):   label "skewness"n = "Skewness (N)(BEST8.3)";
MPRINT(EM_DIAGRAM):   label "kurtosis"n = "Kurtosis (N)(BEST8.3)";
MPRINT(EM_DIAGRAM):   label "USE"n = "Use (C)";
MPRINT(EM_DIAGRAM):   set EMWS1.Varsel_EMTRAINVARIABLE(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Varsel_R2DS OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Varsel_R2DS / view=WORK.Varsel_R2DS;
MPRINT(EM_DIAGRAM):   label "Effect"n = "Effect (C)";
MPRINT(EM_DIAGRAM):   label "DF"n = "Degree of Freedom (N)";
MPRINT(EM_DIAGRAM):   label "R2"n = "R-Square (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.Varsel_R2DS(obs=60000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Varsel_EFFECTDS OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Varsel_EFFECTDS / view=WORK.Varsel_EFFECTDS;
MPRINT(EM_DIAGRAM):   label "Effect"n = "Effect (C)";
MPRINT(EM_DIAGRAM):   label "DF"n = "Degree of Freedom (N)";
MPRINT(EM_DIAGRAM):   label "R2"n = "Sequential R-Square (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.Varsel_EFFECTDS(obs=60000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Varsel_RESULTEDVARS OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Varsel_RESULTEDVARS / view=WORK.Varsel_RESULTEDVARS;
MPRINT(EM_DIAGRAM):   label "NAME"n = "Variable Name (C)";
MPRINT(EM_DIAGRAM):   label "ROLE"n = "Role (C)";
MPRINT(EM_DIAGRAM):   label "LEVEL"n = "Measurement Level (C)";
MPRINT(EM_DIAGRAM):   label "TYPE"n = "Type (C)";
MPRINT(EM_DIAGRAM):   label "LABEL"n = "Label (C)";
MPRINT(EM_DIAGRAM):   label "COMMENT"n = "Reasons for Rejection (C)";
MPRINT(EM_DIAGRAM):   set EMWS1.Varsel_RESULTEDVARS(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Varsel_OUTGVAR OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Varsel_OUTGVAR / view=WORK.Varsel_OUTGVAR;
MPRINT(EM_DIAGRAM):   label "NAME"n = "Name (C)";
MPRINT(EM_DIAGRAM):   label "GROUP"n = "Group (N)";
MPRINT(EM_DIAGRAM):   label "VARIABLE"n = "Variable (C)";
MPRINT(EM_DIAGRAM):   label "LEVEL"n = "Level (C)";
MPRINT(EM_DIAGRAM):   set EMWS1.Varsel_OUTGVAR(obs=60000);
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------* 
* 
* : End creation of SPK report 
* datetime : 07JAN2024:14:31:47 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):    proc sql;
MPRINT(EM_DIAGRAM):   create view work._base1NSQXPG as select * from WORK.M31F730A order by NAME;
MPRINT(EM_DIAGRAM):   create view work._comp1NSQXPG as select * from WORK.M29LD9QA order by NAME;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    proc compare data=work._base1NSQXPG compare=work._comp1NSQXPG out=WORK._DIFF1GULQ44 noprint outnoequal outbase outcomp outdiff;
MPRINT(EM_DIAGRAM):   id NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc sql;
MPRINT(EM_DIAGRAM):   create table WORK._TMP1357E7V4 as select * from WORK._DIFF1GULQ44 where NAME in (select NAME from WORK._DIFF1GULQ44 where _type_ = "DIF") order by NAME, _type_;
MPRINT(EM_DIAGRAM):   proc sql;
MPRINT(EM_DIAGRAM):   create table WORK.DELTAELEM1E2RHSF as select * from WORK._DIFF1GULQ44 where _type_ = "COMPARE" and NAME not in (select NAME from WORK._DIFF1GULQ44 where _type_ = "DIF");
MPRINT(EM_DIAGRAM):   create table WORK.DELTDELEM1E2RHSF as select * from WORK._DIFF1GULQ44 where _type_ = "BASE" and NAME not in (select NAME from WORK._DIFF1GULQ44 where _type_ = "DIF");
MPRINT(EM_DIAGRAM):   data WORK.DELTAELEM1E2RHSF;
MPRINT(EM_DIAGRAM):   set WORK.DELTAELEM1E2RHSF;
MPRINT(EM_DIAGRAM):   drop _obs_ _type_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK.DELTDELEM1E2RHSF;
MPRINT(EM_DIAGRAM):   set WORK.DELTDELEM1E2RHSF;
MPRINT(EM_DIAGRAM):   drop _obs_ _type_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.DELTAATTR1E2RHSF;
MPRINT(EM_DIAGRAM):   set work._comp1NSQXPG;
MPRINT(EM_DIAGRAM):   keep NAME nlevel pctmiss min max mean std skewness kurtosis ;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _extfile "C:\Users\Administrator\Desktop\NewProjectExam\Workspaces\EMWS1\Varsel\EMNOTES.txt" encoding="UTF-8" NOBOM;
traverser_readyNode_note 
*------------------------------------------------------------* 
* 
* Tree : Beginning creation of SPK report 
* datetime : 07JAN2024:14:31:48 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;
MPRINT(EM_GETACTIONSTATUS):   
MPRINT(EM_DIAGRAM):  ;
*------------------------------------------------------------* 
* Path is out of synch 
* Path needs to be run 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):     filename _emtool_ 'C:\Users\Administrator\Desktop\NewProjectExam\Workspaces\EMWS1\Tree\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    filename _report_ 'C:\Users\ADMINI~1\AppData\Local\Temp\SAS Temporary Files\_TD25700_DESKTOP-T9TR9Q4_\Prc2\Tree_ReportDataModel.xml' encoding="UTF-8" NOBOM;
*------------------------------------------------------------* 
* 
* : End creation of SPK report 
* datetime : 07JAN2024:14:31:48 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set EMWS1.FIMPORT_EMINFO;
MPRINT(EM_DIAGRAM):   where key in('GROUPINFO', 'BOOSTINFO', 'BAGINFO', 'TARGETINFO');
MPRINT(EM_DIAGRAM):   call symput('EMGROUPID', strip(data));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Tree_VARSETDEFAULT;
MPRINT(EM_DIAGRAM):   length USE $1;
MPRINT(EM_DIAGRAM):   label USE = "Use";
MPRINT(EM_DIAGRAM):   length REPORT $1;
MPRINT(EM_DIAGRAM):   label REPORT = "Report";
MPRINT(EM_DIAGRAM):   set EMWS1.Varsel_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc sql;
MPRINT(EM_DIAGRAM):   create view work._base12VBC8C as select * from WORK.M3HEZMJ1 order by NAME;
MPRINT(EM_DIAGRAM):   create view work._comp12VBC8C as select * from WORK.M2IOQMR3 order by NAME;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    proc compare data=work._base12VBC8C compare=work._comp12VBC8C out=WORK._DIFF0TJB5NT noprint outnoequal outbase outcomp outdiff;
MPRINT(EM_DIAGRAM):   id NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _extfile "C:\Users\Administrator\Desktop\NewProjectExam\Workspaces\EMWS1\Tree\USERTRAINCODE.sas";
MPRINT(EM_DIAGRAM):    filename _extfile "C:\Users\Administrator\Desktop\NewProjectExam\Workspaces\EMWS1\Tree\EMNOTES.txt" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    filename _pckger_ 'C:\Users\ADMINI~1\AppData\Local\Temp\SAS Temporary Files\_TD25700_DESKTOP-T9TR9Q4_\Prc2\P_0NJRRMO\dsapimeta.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    filename _pckger_ 'C:\Users\ADMINI~1\AppData\Local\Temp\SAS Temporary Files\_TD25700_DESKTOP-T9TR9Q4_\Prc2\P_0NJRRMO\layout.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    proc printto print=#LN02157;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   options NODATE NONUMBER;
MPRINT(EM_DIAGRAM):   proc print data=WORK.RUNSTATUS noobs label;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   options DATE NUMBER;
MPRINT(EM_DIAGRAM):   proc printto;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Report: Create C:\Users\Administrator\Desktop\NewProjectExam\Reports\Tree_2YDPW;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   rc = 0;
MPRINT(EM_DIAGRAM):   Pack3F5W = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack3F5W, "DecisionTree", ' type="EM Result" version="14.1" Report="Tree_2YDPW" nodeid="Tree" description="Decision Tree" component="DecisionTree"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package DecisionTree began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Pack3BA7 = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack3BA7, "MININGRESULT", ' NAME="Mining Result Metadata"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package MININGRESULT began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call insert_package(Pack3F5W, Pack3BA7, rc, "NESTED_NAME", "MININGRESULT");
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "spk_PACKAGEINSERT_note";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F17M362M "C:\Users\ADMINI~1\AppData\Local\Temp\SAS Temporary Files\_TD25700_DESKTOP-T9TR9Q4_\Prc2\scorexml.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack3BA7, "fileref:F17M362M", "BINARY", "text/xml", 'SXML', 'NAME=SCOREXML TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\ADMINI~1\AppData\Local\Temp\SAS Temporary Files\_TD25700_DESKTOP-T9TR9Q4_\Prc2\scorexml.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F2CSOAKV "C:\Users\ADMINI~1\AppData\Local\Temp\SAS Temporary Files\_TD25700_DESKTOP-T9TR9Q4_\Prc2\P_0NJRRMO\input.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack3BA7, "fileref:F2CSOAKV", "BINARY", "text/xml", 'INPUTTABLE', 'NAME=INPUTTABLE TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\ADMINI~1\AppData\Local\Temp\SAS Temporary Files\_TD25700_DESKTOP-T9TR9Q4_\Prc2\P_0NJRRMO\input.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F3DNY4IS "C:\Users\ADMINI~1\AppData\Local\Temp\SAS Temporary Files\_TD25700_DESKTOP-T9TR9Q4_\Prc2\P_0NJRRMO\output.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack3BA7, "fileref:F3DNY4IS", "BINARY", "text/xml", 'OUTPUTTABLE', 'NAME=OUTPUTTABLE TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\ADMINI~1\AppData\Local\Temp\SAS Temporary Files\_TD25700_DESKTOP-T9TR9Q4_\Prc2\P_0NJRRMO\output.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F2L0RVGL "C:\Users\ADMINI~1\AppData\Local\Temp\SAS Temporary Files\_TD25700_DESKTOP-T9TR9Q4_\Prc2\P_0NJRRMO\target.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack3BA7, "fileref:F2L0RVGL", "BINARY", "text/xml", 'TARGETTABLE', 'NAME=TARGETTABLE TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\ADMINI~1\AppData\Local\Temp\SAS Temporary Files\_TD25700_DESKTOP-T9TR9Q4_\Prc2\P_0NJRRMO\target.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F13Z7_3_ "C:\Users\Administrator\Desktop\NewProjectExam\Reports\Tree_2YDPW\miningResult.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack3BA7, "fileref:F13Z7_3_", "BINARY", "text/xml", 'MININGRESULT', 'NAME=MININGRESULT TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\Administrator\Desktop\NewProjectExam\Reports\Tree_2YDPW\miningResult.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Pack0DHV = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack0DHV, "File Import", ' NAME="FIMPORT"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package File Import began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F2Q54ZQO "C:\Users\ADMINI~1\AppData\Local\Temp\SAS Temporary Files\_TD25700_DESKTOP-T9TR9Q4_\Prc2\FIMPORT_ReportDataModel.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0DHV, "fileref:F2Q54ZQO", "BINARY", "text/xml", 'Report Metadata', 'NAME=ReportMetadata TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\ADMINI~1\AppData\Local\Temp\SAS Temporary Files\_TD25700_DESKTOP-T9TR9Q4_\Prc2\FIMPORT_ReportDataModel.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F2B61DM6 "C:\Users\Administrator\Desktop\NewProjectExam\Workspaces\EMWS1\FIMPORT\TRAINPROPERTIES.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0DHV, "fileref:F2B61DM6", "BINARY", "text/xml", 'TOOLPROP', 'NAME=TRAINPROPERTIES TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\Administrator\Desktop\NewProjectExam\Workspaces\EMWS1\FIMPORT\TRAINPROPERTIES.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F37ULR7A "C:\Users\Administrator\Desktop\NewProjectExam\Workspaces\EMWS1\FIMPORT\EMRUNSTATUS.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0DHV, "fileref:F37ULR7A", "BINARY", "text/xml", 'RUNSTATUS', 'NAME=EMRUNSTATUS TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\Administrator\Desktop\NewProjectExam\Workspaces\EMWS1\FIMPORT\EMRUNSTATUS.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack0DHV, "work", "FIMPORT_EMTRAINVARIABLE", "Training variables", "NAME=EMTRAINVARIABLE TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file VARIABLES inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F3OFEK6C "C:\Users\Administrator\Desktop\NewProjectExam\Workspaces\EMWS1\FIMPORT\EMLOG.log";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0DHV, "fileref:F3OFEK6C", "BINARY", "text/plain", 'TOOLLOG', 'NAME=EMLOG TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\Administrator\Desktop\NewProjectExam\Workspaces\EMWS1\FIMPORT\EMLOG.log inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F2Q6M629 "C:\Users\Administrator\Desktop\NewProjectExam\Workspaces\EMWS1\FIMPORT\EMNOTES.txt";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0DHV, "fileref:F2Q6M629", "BINARY", "text/plain", 'NOTES', 'NAME=EMNOTES TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\Administrator\Desktop\NewProjectExam\Workspaces\EMWS1\FIMPORT\EMNOTES.txt inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F1T4QYQP "C:\Users\Administrator\Desktop\NewProjectExam\Workspaces\EMWS1\FIMPORT\EMOUTPUT.out";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0DHV, "fileref:F1T4QYQP", "BINARY", "text/plain", 'TOOLOUTPUT', 'NAME=EMOUTPUT TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\Administrator\Desktop\NewProjectExam\Workspaces\EMWS1\FIMPORT\EMOUTPUT.out inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F2C06QW2 "C:\Users\Administrator\Desktop\NewProjectExam\Workspaces\EMWS1\FIMPORT\EMTRAINCODE.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0DHV, "fileref:F2C06QW2", "TEXT", "text/plain", 'TOOLTRAINCODE', 'NAME=EMTRAINCODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\Administrator\Desktop\NewProjectExam\Workspaces\EMWS1\FIMPORT\EMTRAINCODE.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F2ZE6V72 "C:\Users\Administrator\Desktop\NewProjectExam\Workspaces\EMWS1\FIMPORT\EMCUSTOMGRAPH.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0DHV, "fileref:F2ZE6V72", "BINARY", "text/xml", 'USERGRAPH', 'NAME=EMCUSTOMGRAPH TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\Administrator\Desktop\NewProjectExam\Workspaces\EMWS1\FIMPORT\EMCUSTOMGRAPH.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call insert_package(Pack3F5W, Pack0DHV, rc, "NESTED_NAME", "FIMPORT");
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "spk_PACKAGEINSERT_note";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Pack195Z = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack195Z, "Variable Selection", ' NAME="Varsel"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package Variable Selection began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F3AIN_FB "C:\Users\ADMINI~1\AppData\Local\Temp\SAS Temporary Files\_TD25700_DESKTOP-T9TR9Q4_\Prc2\Varsel_ReportDataModel.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack195Z, "fileref:F3AIN_FB", "BINARY", "text/xml", 'Report Metadata', 'NAME=ReportMetadata TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\ADMINI~1\AppData\Local\Temp\SAS Temporary Files\_TD25700_DESKTOP-T9TR9Q4_\Prc2\Varsel_ReportDataModel.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F38LXBMD "C:\Users\Administrator\Desktop\NewProjectExam\Workspaces\EMWS1\Varsel\TRAINPROPERTIES.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack195Z, "fileref:F38LXBMD", "BINARY", "text/xml", 'TOOLPROP', 'NAME=TRAINPROPERTIES TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\Administrator\Desktop\NewProjectExam\Workspaces\EMWS1\Varsel\TRAINPROPERTIES.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F3NUQ7V1 "C:\Users\Administrator\Desktop\NewProjectExam\Workspaces\EMWS1\Varsel\EMRUNSTATUS.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack195Z, "fileref:F3NUQ7V1", "BINARY", "text/xml", 'RUNSTATUS', 'NAME=EMRUNSTATUS TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\Administrator\Desktop\NewProjectExam\Workspaces\EMWS1\Varsel\EMRUNSTATUS.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack195Z, "work", "Varsel_EMTRAINVARIABLE", "Training variables", "NAME=EMTRAINVARIABLE TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file VARIABLES inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F3DZPLBL "C:\Users\Administrator\Desktop\NewProjectExam\Workspaces\EMWS1\Varsel\EMLOG.log";
MPRINT(EM_DIAGRAM):   call insert_file(Pack195Z, "fileref:F3DZPLBL", "BINARY", "text/plain", 'TOOLLOG', 'NAME=EMLOG TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\Administrator\Desktop\NewProjectExam\Workspaces\EMWS1\Varsel\EMLOG.log inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F0RT9D4O "C:\Users\Administrator\Desktop\NewProjectExam\Workspaces\EMWS1\Varsel\EMNOTES.txt";
MPRINT(EM_DIAGRAM):   call insert_file(Pack195Z, "fileref:F0RT9D4O", "BINARY", "text/plain", 'NOTES', 'NAME=EMNOTES TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\Administrator\Desktop\NewProjectExam\Workspaces\EMWS1\Varsel\EMNOTES.txt inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F3S5ZE5B "C:\Users\Administrator\Desktop\NewProjectExam\Workspaces\EMWS1\Varsel\EMOUTPUT.out";
MPRINT(EM_DIAGRAM):   call insert_file(Pack195Z, "fileref:F3S5ZE5B", "BINARY", "text/plain", 'TOOLOUTPUT', 'NAME=EMOUTPUT TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\Administrator\Desktop\NewProjectExam\Workspaces\EMWS1\Varsel\EMOUTPUT.out inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F0BP4115 "C:\Users\Administrator\Desktop\NewProjectExam\Workspaces\EMWS1\Varsel\EMTRAINCODE.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack195Z, "fileref:F0BP4115", "TEXT", "text/plain", 'TOOLTRAINCODE', 'NAME=EMTRAINCODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\Administrator\Desktop\NewProjectExam\Workspaces\EMWS1\Varsel\EMTRAINCODE.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F3MPY0HZ "C:\Users\Administrator\Desktop\NewProjectExam\Workspaces\EMWS1\Varsel\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack195Z, "fileref:F3MPY0HZ", "TEXT", "text/plain", 'TOOLFLOWCODE', 'NAME=EMFLOWSCORECODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\Administrator\Desktop\NewProjectExam\Workspaces\EMWS1\Varsel\EMFLOWSCORE.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F0FVU6U1 "C:\Users\Administrator\Desktop\NewProjectExam\Workspaces\EMWS1\Varsel\EMPUBLISHSCORE.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack195Z, "fileref:F0FVU6U1", "TEXT", "text/plain", 'TOOLPUBCODE', 'NAME=EMPUBLISHSCORECODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\Administrator\Desktop\NewProjectExam\Workspaces\EMWS1\Varsel\EMPUBLISHSCORE.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F15CBYF6 "C:\Users\Administrator\Desktop\NewProjectExam\Workspaces\EMWS1\Varsel\EMCUSTOMGRAPH.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack195Z, "fileref:F15CBYF6", "BINARY", "text/xml", 'USERGRAPH', 'NAME=EMCUSTOMGRAPH TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\Administrator\Desktop\NewProjectExam\Workspaces\EMWS1\Varsel\EMCUSTOMGRAPH.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack195Z, "work", "Varsel_R2DS", "R2 Values", "NAME=R2DS TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file R2 Values inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack195Z, "work", "Varsel_EFFECTDS", "Effects in Model", "NAME=EFFECTDS TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file Effects in Model inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack195Z, "work", "Varsel_RESULTEDVARS", "Variable Selection", "NAME=RESULTEDVARS TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file Variable Selection inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack195Z, "work", "Varsel_OUTGVAR", "Group Variables", "NAME=OUTGVAR TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file Group Variables inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call insert_package(Pack3F5W, Pack195Z, rc, "NESTED_NAME", "Varsel");
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "spk_PACKAGEINSERT_note";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Pack362N = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack362N, "Decision Tree", ' NAME="Tree"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package Decision Tree began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F1U8CTST "C:\Users\ADMINI~1\AppData\Local\Temp\SAS Temporary Files\_TD25700_DESKTOP-T9TR9Q4_\Prc2\Tree_ReportDataModel.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack362N, "fileref:F1U8CTST", "BINARY", "text/xml", 'Report Metadata', 'NAME=ReportMetadata TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\ADMINI~1\AppData\Local\Temp\SAS Temporary Files\_TD25700_DESKTOP-T9TR9Q4_\Prc2\Tree_ReportDataModel.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F1ZY_4S6 "C:\Users\Administrator\Desktop\NewProjectExam\Workspaces\EMWS1\Tree\EMRUNSTATUS.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack362N, "fileref:F1ZY_4S6", "BINARY", "text/xml", 'RUNSTATUS', 'NAME=EMRUNSTATUS TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\Administrator\Desktop\NewProjectExam\Workspaces\EMWS1\Tree\EMRUNSTATUS.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F1TISGJL "C:\Users\Administrator\Desktop\NewProjectExam\Workspaces\EMWS1\Tree\EMNOTES.txt";
MPRINT(EM_DIAGRAM):   call insert_file(Pack362N, "fileref:F1TISGJL", "BINARY", "text/plain", 'NOTES', 'NAME=EMNOTES TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\Administrator\Desktop\NewProjectExam\Workspaces\EMWS1\Tree\EMNOTES.txt inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F1QTDO9M "C:\Users\Administrator\Desktop\NewProjectExam\Workspaces\EMWS1\Tree\EMTRAINCODE.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack362N, "fileref:F1QTDO9M", "TEXT", "text/plain", 'TOOLTRAINCODE', 'NAME=EMTRAINCODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\Administrator\Desktop\NewProjectExam\Workspaces\EMWS1\Tree\EMTRAINCODE.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F0W72FFM "C:\Users\Administrator\Desktop\NewProjectExam\Workspaces\EMWS1\Tree\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack362N, "fileref:F0W72FFM", "TEXT", "text/plain", 'TOOLFLOWCODE', 'NAME=EMFLOWSCORECODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\Administrator\Desktop\NewProjectExam\Workspaces\EMWS1\Tree\EMFLOWSCORE.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F0P3TP82 "C:\Users\Administrator\Desktop\NewProjectExam\Workspaces\EMWS1\Tree\EMPUBLISHSCORE.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack362N, "fileref:F0P3TP82", "TEXT", "text/plain", 'TOOLPUBCODE', 'NAME=EMPUBLISHSCORECODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\Administrator\Desktop\NewProjectExam\Workspaces\EMWS1\Tree\EMPUBLISHSCORE.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call insert_package(Pack3F5W, Pack362N, rc, "NESTED_NAME", "Tree");
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "spk_PACKAGEINSERT_note";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Pack0JW5 = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack0JW5, "WORKSPACE", ' NAME="Workspace configuration"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package WORKSPACE began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call insert_package(Pack3F5W, Pack0JW5, rc, "NESTED_NAME", "WORKSPACE");
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "spk_PACKAGEINSERT_note";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F0H9TX8G "C:\Users\ADMINI~1\AppData\Local\Temp\SAS Temporary Files\_TD25700_DESKTOP-T9TR9Q4_\Prc2\P_0NJRRMO\dsapi.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0JW5, "fileref:F0H9TX8G", "TEXT", "text/plain", 'Batch Code', 'NAME=BATCHCODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\ADMINI~1\AppData\Local\Temp\SAS Temporary Files\_TD25700_DESKTOP-T9TR9Q4_\Prc2\P_0NJRRMO\dsapi.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F30MH0WL "C:\Users\ADMINI~1\AppData\Local\Temp\SAS Temporary Files\_TD25700_DESKTOP-T9TR9Q4_\Prc2\P_0NJRRMO\dsapimeta.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0JW5, "fileref:F30MH0WL", "BINARY", "text/xml", 'Batch Metadata', 'NAME=BATCHMETADATA TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\ADMINI~1\AppData\Local\Temp\SAS Temporary Files\_TD25700_DESKTOP-T9TR9Q4_\Prc2\P_0NJRRMO\dsapimeta.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F04CTQ4I "C:\Users\ADMINI~1\AppData\Local\Temp\SAS Temporary Files\_TD25700_DESKTOP-T9TR9Q4_\Prc2\P_0NJRRMO\layout.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0JW5, "fileref:F04CTQ4I", "BINARY", "text/xml", 'Properties', 'NAME=LAYOUT TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\ADMINI~1\AppData\Local\Temp\SAS Temporary Files\_TD25700_DESKTOP-T9TR9Q4_\Prc2\P_0NJRRMO\layout.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F3SNO87B "C:\Users\ADMINI~1\AppData\Local\Temp\SAS Temporary Files\_TD25700_DESKTOP-T9TR9Q4_\Prc2\runstatus.out";
MPRINT(EM_DIAGRAM):   call insert_file(Pack3F5W, "fileref:F3SNO87B", "TEXT", "text/plain", 'NODESTATUS', 'NAME=NODESTATUS TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\ADMINI~1\AppData\Local\Temp\SAS Temporary Files\_TD25700_DESKTOP-T9TR9Q4_\Prc2\runstatus.out inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Pack0Q75 = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack0Q75, "PATHSCORE", ' NAME="Path score code"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package PATHSCORE began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call insert_package(Pack3F5W, Pack0Q75, rc, "NESTED_NAME", "PATHSCORE");
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "spk_PACKAGEINSERT_note";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Pack1YXO = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack1YXO, "SASSCORE", ' NAME="SAS Score Code"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package SASSCORE began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call insert_package(Pack0Q75, Pack1YXO, rc, "NESTED_NAME", "SASSCORE");
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "spk_PACKAGEINSERT_note";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F1NYRKE4 "C:\Users\ADMINI~1\AppData\Local\Temp\SAS Temporary Files\_TD25700_DESKTOP-T9TR9Q4_\Prc2\P_385_SJNscore.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1YXO, "fileref:F1NYRKE4", "TEXT", "text/plain", 'SASCODE', 'NAME=SASCODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\ADMINI~1\AppData\Local\Temp\SAS Temporary Files\_TD25700_DESKTOP-T9TR9Q4_\Prc2\P_385_SJNscore.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Pack3IEB = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack3IEB, "PMMLSCORE", ' NAME="PMML Score Code"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package PMMLSCORE began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call insert_package(Pack0Q75, Pack3IEB, rc, "NESTED_NAME", "PMMLSCORE");
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "spk_PACKAGEINSERT_note";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   pubType = "TO_ARCHIVE";
MPRINT(EM_DIAGRAM):   properties='archive_path, archive_name';
MPRINT(EM_DIAGRAM):   path = "C:\Users\Administrator\Desktop\NewProjectExam\Reports\Tree_2YDPW";
MPRINT(EM_DIAGRAM):   name = "miningResult";
MPRINT(EM_DIAGRAM):   call package_publish(Pack3F5W, pubType, rc, properties, path, name);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Publish package Pack3F5W successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call package_end(Pack3F5W, rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package Pack3F5W ended successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
Package DecisionTree began successfully.
Package MININGRESULT began successfully.
spk_PACKAGEINSERT_note
File C:\Users\ADMINI~1\AppData\Local\Temp\SAS Temporary Files\_TD25700_DESKTOP-T9TR9Q4_\Prc2\scorexml.xml inserted successfully.
File C:\Users\ADMINI~1\AppData\Local\Temp\SAS Temporary Files\_TD25700_DESKTOP-T9TR9Q4_\Prc2\P_0NJRRMO\input.xml inserted successfully.
File C:\Users\ADMINI~1\AppData\Local\Temp\SAS Temporary Files\_TD25700_DESKTOP-T9TR9Q4_\Prc2\P_0NJRRMO\output.xml inserted successfully.
File C:\Users\ADMINI~1\AppData\Local\Temp\SAS Temporary Files\_TD25700_DESKTOP-T9TR9Q4_\Prc2\P_0NJRRMO\target.xml inserted successfully.
File C:\Users\Administrator\Desktop\NewProjectExam\Reports\Tree_2YDPW\miningResult.xml inserted successfully.
Package File Import began successfully.
File C:\Users\ADMINI~1\AppData\Local\Temp\SAS Temporary Files\_TD25700_DESKTOP-T9TR9Q4_\Prc2\FIMPORT_ReportDataModel.xml inserted successfully.
File C:\Users\Administrator\Desktop\NewProjectExam\Workspaces\EMWS1\FIMPORT\TRAINPROPERTIES.xml inserted successfully.
File C:\Users\Administrator\Desktop\NewProjectExam\Workspaces\EMWS1\FIMPORT\EMRUNSTATUS.xml inserted successfully.
CSV file VARIABLES inserted successfully.
File C:\Users\Administrator\Desktop\NewProjectExam\Workspaces\EMWS1\FIMPORT\EMLOG.log inserted successfully.
File C:\Users\Administrator\Desktop\NewProjectExam\Workspaces\EMWS1\FIMPORT\EMNOTES.txt inserted successfully.
File C:\Users\Administrator\Desktop\NewProjectExam\Workspaces\EMWS1\FIMPORT\EMOUTPUT.out inserted successfully.
File C:\Users\Administrator\Desktop\NewProjectExam\Workspaces\EMWS1\FIMPORT\EMTRAINCODE.sas inserted successfully.
File C:\Users\Administrator\Desktop\NewProjectExam\Workspaces\EMWS1\FIMPORT\EMCUSTOMGRAPH.xml inserted successfully.
spk_PACKAGEINSERT_note
Package Variable Selection began successfully.
File C:\Users\ADMINI~1\AppData\Local\Temp\SAS Temporary Files\_TD25700_DESKTOP-T9TR9Q4_\Prc2\Varsel_ReportDataModel.xml inserted successfully.
File C:\Users\Administrator\Desktop\NewProjectExam\Workspaces\EMWS1\Varsel\TRAINPROPERTIES.xml inserted successfully.
File C:\Users\Administrator\Desktop\NewProjectExam\Workspaces\EMWS1\Varsel\EMRUNSTATUS.xml inserted successfully.
CSV file VARIABLES inserted successfully.
File C:\Users\Administrator\Desktop\NewProjectExam\Workspaces\EMWS1\Varsel\EMLOG.log inserted successfully.
File C:\Users\Administrator\Desktop\NewProjectExam\Workspaces\EMWS1\Varsel\EMNOTES.txt inserted successfully.
File C:\Users\Administrator\Desktop\NewProjectExam\Workspaces\EMWS1\Varsel\EMOUTPUT.out inserted successfully.
File C:\Users\Administrator\Desktop\NewProjectExam\Workspaces\EMWS1\Varsel\EMTRAINCODE.sas inserted successfully.
File C:\Users\Administrator\Desktop\NewProjectExam\Workspaces\EMWS1\Varsel\EMFLOWSCORE.sas inserted successfully.
File C:\Users\Administrator\Desktop\NewProjectExam\Workspaces\EMWS1\Varsel\EMPUBLISHSCORE.sas inserted successfully.
File C:\Users\Administrator\Desktop\NewProjectExam\Workspaces\EMWS1\Varsel\EMCUSTOMGRAPH.xml inserted successfully.
CSV file R2 Values inserted successfully.
CSV file Effects in Model inserted successfully.
CSV file Variable Selection inserted successfully.
CSV file Group Variables inserted successfully.
spk_PACKAGEINSERT_note
Package Decision Tree began successfully.
File C:\Users\ADMINI~1\AppData\Local\Temp\SAS Temporary Files\_TD25700_DESKTOP-T9TR9Q4_\Prc2\Tree_ReportDataModel.xml inserted successfully.
File C:\Users\Administrator\Desktop\NewProjectExam\Workspaces\EMWS1\Tree\EMRUNSTATUS.xml inserted successfully.
File C:\Users\Administrator\Desktop\NewProjectExam\Workspaces\EMWS1\Tree\EMNOTES.txt inserted successfully.
File C:\Users\Administrator\Desktop\NewProjectExam\Workspaces\EMWS1\Tree\EMTRAINCODE.sas inserted successfully.
File C:\Users\Administrator\Desktop\NewProjectExam\Workspaces\EMWS1\Tree\EMFLOWSCORE.sas inserted successfully.
File C:\Users\Administrator\Desktop\NewProjectExam\Workspaces\EMWS1\Tree\EMPUBLISHSCORE.sas inserted successfully.
spk_PACKAGEINSERT_note
Package WORKSPACE began successfully.
spk_PACKAGEINSERT_note
File C:\Users\ADMINI~1\AppData\Local\Temp\SAS Temporary Files\_TD25700_DESKTOP-T9TR9Q4_\Prc2\P_0NJRRMO\dsapi.sas inserted successfully.
File C:\Users\ADMINI~1\AppData\Local\Temp\SAS Temporary Files\_TD25700_DESKTOP-T9TR9Q4_\Prc2\P_0NJRRMO\dsapimeta.xml inserted successfully.
File C:\Users\ADMINI~1\AppData\Local\Temp\SAS Temporary Files\_TD25700_DESKTOP-T9TR9Q4_\Prc2\P_0NJRRMO\layout.xml inserted successfully.
File C:\Users\ADMINI~1\AppData\Local\Temp\SAS Temporary Files\_TD25700_DESKTOP-T9TR9Q4_\Prc2\runstatus.out inserted successfully.
Package PATHSCORE began successfully.
spk_PACKAGEINSERT_note
Package SASSCORE began successfully.
spk_PACKAGEINSERT_note
File C:\Users\ADMINI~1\AppData\Local\Temp\SAS Temporary Files\_TD25700_DESKTOP-T9TR9Q4_\Prc2\P_385_SJNscore.sas inserted successfully.
Package PMMLSCORE began successfully.
spk_PACKAGEINSERT_note
Publish package Pack3F5W successfully.
Package Pack3F5W ended successfully.
Traverser: Run Completed 
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   filename F17M362M;
MPRINT(EM_DIAGRAM):   filename F2CSOAKV;
MPRINT(EM_DIAGRAM):   filename F3DNY4IS;
MPRINT(EM_DIAGRAM):   filename F2L0RVGL;
MPRINT(EM_DIAGRAM):   filename F13Z7_3_;
MPRINT(EM_DIAGRAM):   filename F2Q54ZQO;
MPRINT(EM_DIAGRAM):   filename F2B61DM6;
MPRINT(EM_DIAGRAM):   filename F37ULR7A;
MPRINT(EM_DIAGRAM):   filename F3OFEK6C;
MPRINT(EM_DIAGRAM):   filename F2Q6M629;
MPRINT(EM_DIAGRAM):   filename F1T4QYQP;
MPRINT(EM_DIAGRAM):   filename F2C06QW2;
MPRINT(EM_DIAGRAM):   filename F2ZE6V72;
MPRINT(EM_DIAGRAM):   filename F3AIN_FB;
MPRINT(EM_DIAGRAM):   filename F38LXBMD;
MPRINT(EM_DIAGRAM):   filename F3NUQ7V1;
MPRINT(EM_DIAGRAM):   filename F3DZPLBL;
MPRINT(EM_DIAGRAM):   filename F0RT9D4O;
MPRINT(EM_DIAGRAM):   filename F3S5ZE5B;
MPRINT(EM_DIAGRAM):   filename F0BP4115;
MPRINT(EM_DIAGRAM):   filename F3MPY0HZ;
MPRINT(EM_DIAGRAM):   filename F0FVU6U1;
MPRINT(EM_DIAGRAM):   filename F15CBYF6;
MPRINT(EM_DIAGRAM):   filename F1U8CTST;
MPRINT(EM_DIAGRAM):   filename F1ZY_4S6;
MPRINT(EM_DIAGRAM):   filename F1TISGJL;
MPRINT(EM_DIAGRAM):   filename F1QTDO9M;
MPRINT(EM_DIAGRAM):   filename F0W72FFM;
MPRINT(EM_DIAGRAM):   filename F0P3TP82;
MPRINT(EM_DIAGRAM):   filename F0H9TX8G;
MPRINT(EM_DIAGRAM):   filename F30MH0WL;
MPRINT(EM_DIAGRAM):   filename F04CTQ4I;
MPRINT(EM_DIAGRAM):   filename F3SNO87B;
MPRINT(EM_DIAGRAM):   filename F1NYRKE4;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   options notes source;
1 
79431      proc printto;
MPRINT(EM_DIAGRAM):    proc printto;
79432      run;
MPRINT(EM_DIAGRAM):   run;

