*------------------------------------------------------------*
User:                Administrator
Date:                2024年01月07日
Time:                16时36分14秒
Site:                11203366
Platform:            X64_8PRO
Maintenance Release: 9.04.01M3P062415
EM Version:          14.1
* 
*------------------------------------------------------------*
* Training Log
Date:                2024年01月07日
Time:                16时36分11秒
*------------------------------------------------------------*
14714  proc freq data=EMWS1.Tree_VariableSet noprint;
14715  table ROLE*LEVEL/out=WORK.TreeMETA;
14716  run;
 
NOTE: There were 8 observations read from the data set EMWS1.TREE_VARIABLESET.
NOTE: The data set WORK.TREEMETA has 5 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
14717  proc print data=WORK.TreeMETA label noobs;
14718  var ROLE LEVEL COUNT;
14719  label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
14720  title9 ' ';
14721  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
14722  run;
 
NOTE: There were 5 observations read from the data set WORK.TREEMETA.
NOTE: The PROCEDURE PRINT printed page 1.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
14723  title10;
 
14724  %let EMNORLEN = %DMNORLEN;
EMWS1.Varsel_TRAIN EMWS1.Varsel_TRAIN
EMWS1.Varsel_TRAIN EMWS1.Varsel_TRAIN EMWS1 Varsel_TRAIN
EMWS1.Varsel_TRAIN EMWS1.Varsel_TRAIN
EMWS1.Varsel_TRAIN EMWS1.Varsel_TRAIN EMWS1 Varsel_TRAIN
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >>
>>>>>>>>>>>>>> TARGET(   NAME='Age'
                         ROLE='TARGET'
                         LEVEL='INTERVAL'
                         ORDER=''
                         CREATOR=''
                         FORMATTYPE='QUANTITY'
                         FAMILY=''
                         LOWERLIMIT=.
                         UPPERLIMIT=.
                         REPORT='N'
                         DISTRIBUTION=''
                         COMMENT=''
                         PRICE=.
                         TYPE='N'
                         LABEL=''
                         FORMAT='BEST12.0'
                         INFORMAT='BEST32.0'
                         INDEX='N'
                         INDEXTYPE='NONE'
                         LENGTH=8
                         USE='Y'
                      )[11891]
PERFORMANCE  DETAILS
WORK.EM_DMDB WORK.EM_DMDB
WORK.EM_DMDB WORK.EM_DMDB WORK EM_DMDB
"No decisions defined for target "Age"."
14785  proc print data = EMWS1.Tree_Age_DM noobs label;
14786  var _type_ variable label;
14787  where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
14788  label _TYPE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_type_vlabel,     NOQUOTE))" VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
14789  title9 ' ';
14790  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_predDecVars_title  , NOQUOTE))";
14791  run;
 
NOTE: There were 3 observations read from the data set EMWS1.TREE_AGE_DM.
      WHERE _type_ not in ('DATAPRIOR', 'DECISION', 'DECPRIOR', 'MATRIX', 'TRAINPRIOR');
NOTE: The PROCEDURE PRINT printed page 2.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
14792  title10;
 
14793  %let EMEXCEPTIONSTRING=;
PERFORMANCE  DETAILS
15302  *------------------------------------------------------------*;
15303  * Tree: Generation of macros and macro variables;
15304  * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
15305  *------------------------------------------------------------*;
 
15306  %let EMEXCEPTIONSTRING=;
15307  *------------------------------------------------------------*;
15308  * TRAIN: Tree;
15309  *------------------------------------------------------------*;
15310  %let EM_ACTION = TRAIN;
15311  %let syscc = 0;
15312  %macro main;
15313
15314    %if %upcase(&EM_ACTION) = CREATE %then %do;
15315      filename temp catalog 'sashelp.emmodl.tree_create.source';
15316      %include temp;
15317      filename temp;
15318
15319      %em_tree_create;
15320    %end;
15321
15322     %else
15323     %if %upcase(&EM_ACTION) = TRAIN %then %do;
15324
15325         filename temp catalog 'sashelp.emmodl.tree_train.source';
15326         %include temp;
15327         filename temp;
15328         %em_tree_train;
15329     %end;
15330
15331    %else
15332    %if %upcase(&EM_ACTION) = SCORE %then %do;
15333      filename temp catalog 'sashelp.emmodl.tree_score.source';
15334      %include temp;
15335      filename temp;
15336
15337      %em_tree_score;
15338
15339    %end;
15340
15341    %else
15342    %if %upcase(&EM_ACTION) = REPORT %then %do;
15343
15344         filename temp catalog 'sashelp.emmodl.tree_report.source';
15345         %include temp;
15346         filename temp;
15347
15348         %em_tree_report;
15349     %end;
15350
15351    %else
15352    %if %upcase(&EM_ACTION) = OPENINT %then %do;
15353
15354         filename temp catalog 'sashelp.emmodl.tree_actions.source';
15355         %include temp;
15356         filename temp;
15357         %EM_TREE_OPENTREEVIEWER;
15358
15359     %end;
15360
15361    %else
15362    %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
15363
15364         filename temp catalog 'sashelp.emmodl.tree_actions.source';
15365         %include temp;
15366         filename temp;
15367         %EM_TREE_CLOSETREEVIEWER;
15368
15369     %end;
15370
15371
15372     %doendm:
15373  %mend main;
15374
15375  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_TRAIN.SOURCE.
15377 +%macro em_tree_train;
15379 +   %if &EM_IMPORT_DATA eq %then %do;
15380 +       %let EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
15381 +       %put &em_codebar;
15382 +       %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_nodeTrainRawData_note, NOQUOTE));
15383 +       %put &errormsg;
15384 +       %put &em_codebar;
15385 +       %goto doendm;
15386 +   %end;
15387 +   %else
15388 +       %let EMEXCEPTIONSTRING =;
15390 +   %if  &EM_NUM_TARGET lt 1 %then %do;
15391 +        %let EMEXCEPTIONSTRING = exception.server.USE1TARGET;
15392 +        %put &em_codebar;
15393 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.use01target_err, NOQUOTE));
15394 +        %put &errormsg;
15395 +        %put &em_codebar;
15396 +        %goto doendm;
15397 +   %end;
15399 +   %if  (&EM_NUM_INTERVAL_INPUT < 1) and (&EM_NUM_BINARY_INPUT < 1) and (&EM_NUM_ORDINAL_INPUT < 1)
15400 +        and (&EM_NUM_NOMINAL_INPUT < 1) and (&EM_NUM_INTERVAL_REJECTED < 1) and (&EM_NUM_BINARY_REJECTED <1)
15401 +        and (&EM_NUM_ORDINAL_REJECTED < 1) and (&EM_NUM_NOMINAL_REJECTED < 1) %then %do;
15402 +        %let EMEXCEPTIONSTRING = exception.server.USEATLEAST1INPUTREJECT;
15403 +        %put &em_codebar;
15404 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_noInput_note, NOQUOTE));
15405 +        %put &errormsg;
15406 +        %put &em_codebar;
15407 +        %goto doendm;
15408 +   %end;
15410 +   /* Initialize property macro variables */
15411 +   filename temp catalog 'sashelp.emmodl.tree_macros.source';
15412 +   %include temp;
15413 +   filename temp;
15415 +   %EM_SetProperties;
15417 +   /* need to delete EMTREE if not used as import tree data since AUTODELETE=N */
15418 +   %EM_GETNAME(key=EMTREE, type=DATA);
15419 +   %if "&EM_PROPERTY_IMPORTMODEL" eq "Y" %then %do;
15420 +     /* if import eq Y and no importtable defined, throw an exception */
15421 +      %if %length(&EM_PROPERTY_ImportedTreeData)=0 %then %do;
15422 +         %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEMODELDATASET;
15423 +         %let  errmsg = %sysfunc(sasmsg(sashelp.dmine, NOTREEMODELDATASET_ERR , NOQUOTE));
15424 +         %put &em_codebar;
15425 +         %put &errmsg;
15426 +         %put &em_codebar;
15427 +         %goto doendm;
15428 +      %end;
15429 +      %else %if %sysfunc(exist(&EM_PROPERTY_ImportedTreeData))=0 %then %do;
15430 +         %let EMEXCEPTIONSTRING = exception.server.EMTOOL.INVALIDTREEMODELDATASET;
15431 +         %put &em_codebar;
15432 +         %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.INVALIDTREEMODELDATASET_ERR, NOQUOTE));
15433 +         %put &errormsg;
15434 +         %put &em_codebar;
15435 +         %goto doendm;
15436 +      %end;
15437 +      %else %do;
15438 +         %let dsid=%sysfunc(open(&EM_PROPERTY_ImportedTreeData));
15439 +         %let varnumID = %sysfunc(varnum(&dsid,ID));
15440 +         %let varnumLabel = %sysfunc(varnum(&dsid,LABEL));
15441 +         %let varnumX = %sysfunc(varnum(&dsid,X));
15442 +         %let varnumY = %sysfunc(varnum(&dsid,Y));
15443 +         %let dsid = %sysfunc(close(&dsid));
15444 +         %if &varnumID=0 or &varnumLabel=0 or &varnumX=0 or &varnumY=0 %then %do;
15445 +            %let EMEXCEPTIONSTRING = exception.server.EMTOOL.INVALIDTREEMODELDATASET;
15446 +            %put &em_codebar;
15447 +            %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.INVALIDTREEMODELDATASET_ERR, NOQUOTE));
15448 +            %put &errormsg;
15449 +            %put &em_codebar;
15450 +            %goto doendm;
15451 +         %end;
15452 +      %end;
15453 +      %if %qupcase(&EM_USER_EMTREE) ne %qupcase(&EM_PROPERTY_ImportedTreeData) and (%sysfunc(exist(&EM_USER_EMTREE)) or %sysfunc(exist(&EM_USER_EMTREE, VIEW))) %then %do;
15454 +         proc delete data=&EM_USER_EMTREE;
15455 +         run;
15456 +      %end;
15457 +   %end;
15458 +   %else %if "&EM_PROPERTY_FREEZE" ne "Y" and (%sysfunc(exist(&EM_USER_EMTREE)) or %sysfunc(exist(&EM_USER_EMTREE, VIEW))) %then %do;
15459 +      proc delete data=&EM_USER_EMTREE;
15460 +      run;
15461 +   %end;
15463 +   /* load tree macros */
15464 +   filename temp catalog 'sashelp.emmodl.tree_trainmacros.source';
15465 +   %include temp;
15466 +   filename temp;
15468 +   /* data sets */
15469 +   %EM_GETNAME(key=OUTSTATS,   type=DATA);
15470 +   %EM_GETNAME(key=EXPORTTREE, type=DATA);
15471 +   %EM_GETNAME(key=TREE_PLOT,     type=DATA);
15473 +   /* files */
15474 +   %EM_REGISTER(key=ENGLISHRULES, type=FILE, extension=txt);
15476 +   /* check actual num of target levels */
15477 +   %if ("%EM_TARGET_LEVEL" eq "BINARY") %then %do;
15478 +      %EM_CheckBinaryTargetLevel(indata=&EM_IMPORT_DATA, target=%EM_TARGET,
15479 +                              nLevel=_nTargetLevel );
15480 +      %if &_nTargetLevel  > 2 %then %do;
15481 +        %let EMEXCEPTIONSTRING = exception.server.METADATA.WRONGTARGETLEVEL,&target_Var;
15482 +        %put &em_codebar;
15483 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.wrongtargetlevel, NOQUOTE));
15484 +        %put &errormsg;
15485 +        %put &em_codebar;
15486 +        %goto doendm;
15487 +      %end;
15488 +   %end;
15490 +   /* neither cost variables nor constant cost are valid with USEDECISIONS */
15491 +   %if "&EM_PROPERTY_USEDECISION" eq "Y" %then %do;
15492 +     %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
15493 +        %let costflag=0;
15494 +        data _null_;
15495 +          set &EM_DEC_DECMETA(where=(_TYPE_="DECISION" AND USE="Y" AND ^missing(COST) )) end=eof;
15496 +          if eof then call symput("costflag", _N_);
15497 +        run;
15498 +        %if &costflag gt 0 %then %do;
15499 +          %let EMEXCEPTIONSTRING = exception.server.TREE.INVALIDDECISION;
15500 +          %put &em_codebar;
15501 +          %let errormsg = %sysfunc(sasmsg(sashelp.dmine, costnotvalidwithusedecisions_note_err, NOQUOTE));
15502 +          %put &errormsg;
15503 +          %put &em_codebar;
15504 +          %goto doendm;
15505 +       %end;
15506 +     %end;
15507 +   %end;
15509 +   /* determine if multiple targets will be processed */
15510 +   %let em_tree_multipleTargets=N;
15511 +   %let em_tree_numTarget = 1;
15512 +   %let em_tree_targetVars=;
15514 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
15515 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
15516 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
15517 +         %let em_tree_multipleTargets=N;
15518 +      %end;
15519 +      %else %do;
15520 +         /* create macro array of targets  */
15521 +         data _null_;
15522 +           set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
15523 +           call symput('em_tree_targetVars'!!strip(put(_N_, BEST.)), strip(Name));
15524 +           if eof then
15525 +             call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
15526 +        run;
15528 +        %if &em_tree_numTarget gt 1 %then %do;
15529 +           %let em_tree_multipleTargets=Y;
15530 +        %end;
15531 +      %end;
15532 +   %end;
15534 +   /* create view of only necessary variable for performance reasons */
15535 +   %let tempData = &EM_LIB..em_&EM_NODEID;
15536 +   data &tempData / view=&tempData;
15537 +     set &EM_IMPORT_DATA (keep=%EM_INPUT %EM_REJECTED %EM_TARGET %EM_FREQ %EM_COST
15538 +     %if "&em_tree_multipleTargets" eq "N" %then %do;
15539 +       %EM_TARGET
15540 +     %end;
15541 +     %else %do;
15542 +       %if &em_tree_numTarget ne 0 %then %do;
15543 +         %do i=1 %to &em_tree_numTarget;
15544 +            &&em_tree_targetVars&i
15545 +         %end;
15546 +       %end;
15547 +     %end;
15548 +     );
15549 +   run;
15551 +   /* run Tree procedure */
15552 +   %em_tree_runTreeProcedure(indata=&tempData, multipleTar=&em_tree_multipleTargets);
15554 +   /* Check return code and throw exception if error is detected */
15555 +   %if %length(&EMEXCEPTIONSTRING) %then %goto doendm;
15556 +   %if &syserr %then %do;
15557 +     %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
15558 +     %goto doendm;
15559 +   %end;
15561 +   /* add decision score code if multiple targets are processed */
15562 +   %if "&em_tree_multipleTargets" eq "Y" %then %do;
15563 +     %EM_MODEL(TARGET=%EM_TARGET, DECSCORECODE=Y, CLASSIFICATION=Y, FITSTATISTICS=N);
15564 +   %end;
15566 +   /* create outfit dataset if multiple score statements have been executed */
15567 +   %em_tree_createFitStats(multipleTar=&em_tree_multipleTargets);
15569 +   /* create English Rules */
15570 +   filename X "&EM_USER_ENGLISHRULES" encoding='utf-8' NOBOM;
15571 +     %if "&em_Tree_multipleTargets" eq "N" %then %do;
15572 +       %em_tree_makeEnglishRules;
15574 +       /* English Rules */
15575 +       %EM_REPORT(key=ENGLISHRULES, viewtype=SOURCE, block=MODEL, description=ENGLISHRULES, autodisplay=N);
15577 +     %end;
15578 +   filename x;
15580 +   %doendm:
15581 +%mend em_tree_train;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_MACROS.SOURCE.
15582 +%macro EM_SetProperties;
15584 +   /* train properties */
15585 +   %em_checkmacro(name=EM_PROPERTY_ImportModel,            value=N, global=Y);
15586 +   %em_checkmacro(name=EM_PROPERTY_ImportedTreeData,       value=, global=Y);
15587 +   %em_checkmacro(name=EM_PROPERTY_FREEZE,                 value=N, global=Y);
15588 +   %em_checkmacro(name=EM_PROPERTY_USEMULTIPLETARGET,      value=N, global=Y);
15589 +   %em_checkmacro(name=EM_PROPERTY_NOMINALCRITERION,       value=PROBCHISQ, global=Y);
15590 +   %em_checkmacro(name=EM_PROPERTY_ORDINALCRITERION,       value=ENTROPY, global=Y);
15591 +   %em_checkmacro(name=EM_PROPERTY_INTERVALCRITERION,      value=PROBF, global=Y);
15592 +   %em_checkmacro(name=EM_PROPERTY_CRITERION,              value=DEFAULT, global=Y);
15593 +   %em_checkmacro(name=EM_PROPERTY_SIGLEVEL,               value=0.2, global=Y);
15594 +   %em_checkmacro(name=EM_PROPERTY_SPLITSIZE,              value=., global=Y);
15595 +   %em_checkmacro(name=EM_PROPERTY_LEAFSIZE,               value=5, global=Y);
15596 +   %em_checkmacro(name=EM_PROPERTY_MINCATSIZE,             value=5, global=Y);
15597 +   %em_checkmacro(name=EM_PROPERTY_MAXBRANCH,              value=2, global=Y);
15598 +   %em_checkmacro(name=EM_PROPERTY_MAXDEPTH,               value=6, global=Y);
15599 +   %em_checkmacro(name=EM_PROPERTY_NRULES,                 value=5, global=Y);
15600 +   %em_checkmacro(name=EM_PROPERTY_NSURRS,                 value=0, global=Y);
15601 +   %em_checkmacro(name=EM_PROPERTY_MISSINGVALUE,           value=USEINSEARCH, global=Y);
15602 +   %em_checkmacro(name=EM_PROPERTY_USEVARONCE,             value=N, global=Y);
15603 +   %em_checkmacro(name=EM_PROPERTY_SUBTREE,                value=ASSESSMENT, global=Y);
15604 +   %em_checkmacro(name=EM_PROPERTY_NSUBTREE,               value=1, global=Y);
15605 +   %em_checkmacro(name=EM_PROPERTY_ASSESSMEASURE,          value=PROFIT/LOSS, global=Y);
15606 +   %em_checkmacro(name=EM_PROPERTY_ASSESSPERCENTAGE,       value=0.25, global=Y);
15607 +   %em_checkmacro(name=EM_PROPERTY_NODESAMPLE,             value=20000, global=Y);
15608 +   %em_checkmacro(name=EM_PROPERTY_EXHAUSTIVE,             value=5000, global=Y);
15609 +   %em_checkmacro(name=EM_PROPERTY_USEDECISION,            value=N, global=Y);
15610 +   %em_checkmacro(name=EM_PROPERTY_USEPRIORS,              value=N, global=Y);
15611 +   %em_checkmacro(name=EM_PROPERTY_KASS,                   value=Y, global=Y);
15612 +   %em_checkmacro(name=EM_PROPERTY_KASSAPPLY,              value=BEFORE, global=Y);
15613 +   %em_checkmacro(name=EM_PROPERTY_DEPTH,                  value=Y, global=Y);
15614 +   %em_checkmacro(name=EM_PROPERTY_INPUTS,                 value=N, global=Y);
15615 +   %em_checkmacro(name=EM_PROPERTY_NUMINPUTS,              value=1, global=Y);
15616 +   %em_checkmacro(name=EM_PROPERTY_DUMMY,                  value=N, global=Y);
15617 +   %em_checkmacro(name=EM_PROPERTY_LEAFID,                 value=Y, global=Y);
15618 +   %em_checkmacro(name=EM_PROPERTY_PREDICT,                value=Y, global=Y);
15619 +   %em_checkmacro(name=EM_PROPERTY_PERFORMANCE,            value=DISK, global=Y);
15620 +   %em_checkmacro(name=EM_PROPERTY_CV,                     value=N, global=Y);
15621 +   %em_checkmacro(name=EM_PROPERTY_CVNITER,                value=10, global=Y);
15622 +   %em_checkmacro(name=EM_PROPERTY_CVREPEAT,               value=1, global=Y);
15623 +   %em_checkmacro(name=EM_PROPERTY_CVSEED,                 value=12345, global=Y);
15624 +   %em_checkmacro(name=EM_PROPERTY_OBSIMPORTANCE,          value=N, global=Y);
15625 +   %em_checkmacro(name=EM_PROPERTY_NUMSINGLEIMP,           value=5, global=Y);
15627 +   /* properties for interactive sample */
15628 +   %em_checkmacro(name=EM_PROPERTY_CREATESAMPLE,           value=DEFAULT, global=Y);
15629 +   %em_checkmacro(name=EM_PROPERTY_SAMPLEMETHOD,           value=RANDOM, global=Y);
15630 +   %em_checkmacro(name=EM_PROPERTY_SAMPLESIZE,             value=10000, global=Y);
15631 +   %em_checkmacro(name=EM_PROPERTY_SAMPLESEED,             value=12345, global=Y);
15633 +   /* report properties */
15634 +   %em_checkmacro(name=EM_PROPERTY_PRECISION,              value=4, global=Y);
15635 +   %em_checkmacro(name=EM_PROPERTY_SPLITPRECISION,         value=4, global=Y);
15636 +   %em_checkmacro(name=EM_PROPERTY_CLASSCOLORBY,           value=PERCENTEVEN, global=Y);
15637 +   %em_checkmacro(name=EM_PROPERTY_INTCOLORBY,             value=AVG, global=Y);
15638 +   %em_checkmacro(name=EM_PROPERTY_SHOWNODEID,             value=Y, global=Y);
15639 +   %em_checkmacro(name=EM_PROPERTY_SHOWVALID,              value=Y, global=Y);
15640 +   %em_checkmacro(name=EM_PROPERTY_PRED,                   value=N, global=Y);
15641 +   %em_checkmacro(name=EM_PROPERTY_TARGET,                 value=ALL, global=Y);
15642 +   %em_checkmacro(name=EM_PROPERTY_COUNT,                  value=Y, global=Y);
15643 +   %em_checkmacro(name=EM_PROPERTY_PERCENTCORRECT,         value=N, global=Y);
15644 +   %em_checkmacro(name=EM_PROPERTY_PROFITLOSS,             value=NONE, global=Y);
15645 +   %em_checkmacro(name=EM_PROPERTY_AVG,                    value=Y, global=Y);
15646 +   %em_checkmacro(name=EM_PROPERTY_RASE,                   value=N, global=Y);
15648 +   /* score properties */
15649 +   %em_checkmacro(name=EM_PROPERTY_VARSELECTION,           value=Y, global=Y);
15650 +   %em_checkmacro(name=EM_PROPERTY_NODEROLE,               value=SEGMENT, global=Y);
15652 +%mend EM_SetProperties;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: Deleting EMWS1.TREE_EMTREE (memtype=DATA).
NOTE: PROCEDURE DELETE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_TRAINMACROS.SOURCE.
15654 +%Macro EM_CheckBinaryTargetLevel(indata=, target=,  nLevel= );
15655 +  %global &nLevel;
15656 +  proc dmdb batch data=&indata
15657 +    classout=_tmp_dmdbout;
15658 +    class &target;
15659 +  run;
15660 +  data _tmp_dmdbout;
15661 +    set _tmp_dmdbout;
15662 +    if strip(TYPE) = 'N' and  strip(LEVEL) = '.' then delete;
15663 +    if strip(TYPE) = 'C' and  strip(LEVEL) = '' then delete;
15664 +  run;
15665 +  data _null_;
15666 +    %let dsid = %sysfunc(open(work._tmp_dmdbout));
15667 +    %let _obs = %sysfunc(attrn(&dsid, NOBS));
15668 +    %let dsid = %sysfunc(close(&dsid));
15669 +     call symput("&nLevel", put(&_obs, Best12.));
15670 +  run;
15672 +  proc datasets lib=work nolist;
15673 +     delete _tmp_dmdbout;
15674 +  run;
15675 +  quit;
15676 +%Mend EM_CheckBinaryTargetLevel;
15679 +%macro em_tree_runTreeProcedure(indata= , multipleTar= , intFlag= );
15681 +  /* determine the number of obs in training data */
15682 +  proc sql;
15683 +    reset noprint;
15684 +    select count(*) into :em_nobs from &indata;
15685 +  quit;
15687 +  /* determine the number of input variables */
15688 +  %let numinputs = %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_NOMINAL_INPUT + &EM_NUM_ORDINAL_INPUT + &EM_NUM_INTERVAL_INPUT+
15689 +                         &EM_NUM_BINARY_REJECTED + &EM_NUM_NOMINAL_REJECTED + &EM_NUM_ORDINAL_REJECTED + &EM_NUM_INTERVAL_REJECTED);
15691 +  /* retrieve targetEvent from decmeta */
15692 +  %let targetEvent=;
15693 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
15694 +    %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
15695 +      data _null_;
15696 +       set &EM_DEC_DECMETA(where=(_TYPE_="TARGET"));
15697 +       call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
15698 +      run;
15699 +    %end;
15700 +  %end;
15702 +  /* create targetTable if multipleTar eq Y */
15703 +  data temptarget;
15704 +    set &EM_DATA_VARIABLESET;
15705 +    where ROLE="TARGET" AND LEVEL^="ORDINAL";
15706 +  run;
15708 + /* data sets */
15709 + %EM_GETNAME(key=OUTSTATS,      type=DATA);
15710 + %EM_GETNAME(key=EMTREE,        type=DATA);
15711 + %EM_GETNAME(key=OUTOBSIMP,     type=DATA);
15712 + %EM_GETNAME(key=OUTSEQ,        type=DATA);
15713 + %EM_GETNAME(key=OUTIMPORT,     type=DATA);
15714 + %EM_GETNAME(key=OUTNODES,      type=DATA);
15715 + %EM_GETNAME(key=OUTSUMMARY,    type=DATA);
15716 + %EM_GETNAME(key=OUTTOPOLOGY,   type=DATA);
15717 + %EM_GETNAME(key=OUTPATH,       type=DATA);
15718 + %EM_GETNAME(key=OUTRULES,      type=DATA);
15720 + /* files */
15721 + %EM_GETNAME(key=TREEFLOW, type=FILE, extension=sas);
15722 + %EM_GETNAME(key=TREEPUBLISH, type=FILE, extension=sas);
15724 + /* turn on pmml if requested */
15725 + %let nnpmml=0;
15726 + %if %symexist(EM_PMML) %then %do;
15727 +    %if %upcase(&EM_PMML)=Y or %upcase(&EM_PMML)=YES %then %do;
15728 +       %let nnpmml=1;
15730 +       ods pmml file="&EM_FILE_EMPMML" encoding="UTF-8";
15731 +%end;
15733 + %let numClassTarget = %sysevalf(&EM_NUM_BINARY_TARGET + &EM_NUM_NOMINAL_TARGET + &EM_NUM_ORDINAL_TARGET);
15735 + %if &nnpmml or &numClassTarget %then %do;
15737 +       /* create dmdb needed for pmml generation */
15738 +       %let tree_maxlevel = 512;
15739 +       %if %symexist(EM_TRAIN_MAXLEVELS) %then %do;
15740 +         %if &EM_TRAIN_MAXLEVELS ne %then %do;
15741 +           %let tree_maxlevel = &EM_TRAIN_MAXLEVELS;
15742 +         %end;
15743 +       %end;
15744 +       %if &tree_maxlevel gt 0 %then %do;
15745 +           %let tree_maxlevel=%sysevalf(&tree_maxlevel+1);
15746 +          %let tree_maxlevel=%sysfunc(max(3, &tree_maxlevel ));
15747 +       %end;
15749 +       %let targetOrderString =;
15750 +       %let targetString = ;
15751 +       data _null_;
15752 +          length orderString nameString $10000;
15753 +          retain orderString nameString;
15754 +          set &em_data_variableset end=eof;
15755 +          %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" and ^&em_num_ordinal_target %then %do;
15756 +              where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL");
15757 +          %end;
15758 +          %else %do;
15759 +              where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL", "ORDINAL") and USE ='Y';
15760 +          %end;          select(order);
15761 +            when('')        order ='DESC';
15762 +            when('FMTASC')  order='ASCFMT';
15763 +            when('FMTDESC') order='DESFMT';
15764 +            otherwise;
15765 +          end;
15766 +          orderString = trim(orderString)!!' '!!trim(NAME)!!'('!!trim(order)!!')';
15767 +          nameString = trim(nameString)!!' '!!trim(NAME);
15769 +          if eof then do;
15770 +             call symput('targetOrderString', trim(orderString));
15771 +             call symput('targetString', trim(nameString));
15772 +          end;
15773 +       run;
15775 +       %let arborkluge= "work._treeDMDB";
15777 +       proc dmdb batch data=&indata
15778 +       %if &nnpmml %then %do;
15779 +           PMML
15780 +       %end;
15781 +        dmdbcat=_treeDMDB classout=classout varout=varout maxlevel=&tree_maxlevel;
15784 +   %if &nnpmml %then %do;
15785 +        %if "%EM_ID" ne "" %then %do;
15786 +          id %EM_ID;
15787 +        %end;
15788 +        %if &EM_NUM_CLASS gt 0 %then %do;
15789 +          class %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
15790 +               %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
15791 +               &targetOrderString;
15792 +        %end;
15793 +        %if &EM_NUM_INTERVAL gt 0 %then %do;
15794 +          var %EM_INTERVAL;
15795 +        %end;
15796 +        target &targetString %EM_INTERVAL_TARGET;
15797 +        %if "%EM_FREQ" ne "" %then %do;
15798 +          freq %EM_FREQ;
15799 +        %end;
15800 +  %end;
15801 +  %else %do;
15802 +      class  &targetOrderString;
15803 +      target &targetString %EM_INTERVAL_TARGET;
15804 +  %end;
15805 +       run;
15806 +       quit;
15808 +       proc datasets lib=work nolist;
15809 +          delete classout varout;
15810 +       run;
15811 +       quit;
15813 +    %end;
15814 + %end;
15816 + /* run Arbor procedure */
15817 + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
15818 +  proc arbor data=&INDATA
15820 +  %if "&EM_PROPERTY_LEAFSIZE" ne "" %then %do;
15821 +    Leafsize = &EM_PROPERTY_LEAFSIZE
15822 +  %end;
15824 +  %if (("&EM_PROPERTY_SPLITSIZE" ne ".") AND (&EM_PROPERTY_SPLITSIZE lt &em_nobs)) %then %do;
15825 +    Splitsize = &EM_PROPERTY_SPLITSIZE
15826 +  %end;
15828 +  %if "&EM_PROPERTY_MINCATSIZE" ne "" %then %do;
15829 +    MinCatSize = &EM_PROPERTY_MINCATSIZE
15830 +  %end;
15832 +  %if "&EM_PROPERTY_MAXBRANCH" ne "" %then %do;
15833 +    MaxBranch = &EM_PROPERTY_MAXBRANCH
15834 +  %end;
15836 +  %if "&EM_PROPERTY_MAXDEPTH" ne "" %then %do;
15837 +    MaxDepth = &EM_PROPERTY_MAXDEPTH
15838 +  %end;
15840 +  %if (("%EM_TARGET_LEVEL" eq "NOMINAL") OR ("%EM_TARGET_LEVEL" eq "BINARY")) %then %do;
15841 +    %let Criterion = &EM_PROPERTY_NOMINALCRITERION;
15842 +  %end;
15843 +  %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
15844 +    %let Criterion = &EM_PROPERTY_ORDINALCRITERION;
15845 +  %end;
15846 +  %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
15847 +    %let Criterion = &EM_PROPERTY_INTERVALCRITERION;
15848 +  %end;
15850 +  %if (("&criterion" eq "PROBCHISQ") or ("&criterion" eq "PROBF")) %then %do;
15851 +    %if "&EM_PROPERTY_SIGLEVEL" ne "" %then %do;
15852 +      alpha = &EM_PROPERTY_SIGLEVEL
15853 +    %end;
15854 +  %end;
15856 +  %if (("&EM_PROPERTY_KASS" eq "Y") OR ("&EM_PROPERTY_DEPTH" eq "Y") or ("&EM_PROPERTY_INPUTS" eq "Y")) %then %do;
15857 +    %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion" eq "DEFAULT")) %then %do;
15858 +      %if (("&EM_PROPERTY_KASS" eq "Y") or ("&EM_PROPERTY_DEPTH" eq "Y")) %then %do;
15859 +        %if "&EM_PROPERTY_KASSAPPLY" eq "BEFORE" %then %let chaid = CHAIDBEFORE;
15860 +        %else %if "&EM_PROPERTY_KASSAPPLY" eq "AFTER" %then %let chaid = CHAIDAFTER;
15862 +        padjust =
15863 +        %if "&EM_PROPERTY_KASS" eq "Y" %then %do;
15864 +          &chaid
15865 +        %end;
15866 +        %if "&EM_PROPERTY_DEPTH" eq "Y" %then %do;
15867 +          DEPTH
15868 +        %end;
15869 +      %end;
15870 +      %if "&EM_PROPERTY_INPUTS" eq "Y" %then %do;
15871 +         %let num_inputs = %sysfunc(min(&numinputs, &EM_PROPERTY_NUMINPUTS));
15872 +         pvars = &num_inputs
15873 +      %end;
15874 +    %end;
15875 +  %end;
15876 +  %else %do;
15877 +      %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion" eq "DEFAULT")) %then %do;
15878 +         padjust = NONE
15879 +      %end;
15880 +  %end;
15882 +  %if "&EM_PROPERTY_NRULES" ne "" %then %do;
15883 +    %let num_nrules = %sysfunc(min(&numinputs, &EM_PROPERTY_NRULES));
15884 +    Maxrules = &num_nrules
15885 +  %end;
15887 +  %if "&EM_PROPERTY_NSURRS" ne "" %then %do;
15888 +    %let num_nsurrs = %sysfunc(min((&numinputs-1), &EM_PROPERTY_NSURRS));
15889 +    Maxsurrs = &num_nsurrs
15890 +  %end;
15892 +  %if "&EM_PROPERTY_MISSINGVALUE" ne "" %then %do;
15893 +     Missing=&EM_PROPERTY_MISSINGVALUE
15894 +  %end;
15896 +  %if "&EM_PROPERTY_USEVARONCE" eq "Y" %then %do;
15897 +     USEVARONCE
15898 +  %end;
15900 +  %if "&EM_PROPERTY_EXHAUSTIVE" ne "" %then %do;
15901 +    Exhaustive=&EM_PROPERTY_EXHAUSTIVE
15902 +  %end;
15905 +  %if (("&multipleTar" eq "N") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
15906 +    event = "&targetEvent"
15907 +  %end;
15909 +  %if "&EM_PROPERTY_USEDECISION" eq "Y" %then %do;
15910 +     DECSEARCH
15911 +  %end;
15913 +  %if "&EM_PROPERTY_USEPRIORS" eq "Y" %then %do;
15914 +     PRIORSSEARCH
15915 +  %end;
15917 +  %if &arbor_1 ne %then %do;
15918 +    &arbor_1
15919 +  %end;
15921 +  %if &em_arbor ne %then %do;
15922 +     &em_arbor
15923 +  %end;
15924 +  ;
15925 + %end;
15926 + %else %if "&EM_PROPERTY_IMPORTMODEL" eq "Y"  %then %do;
15927 +     proc arbor data=&INDATA inmodel=&EM_PROPERTY_ImportedTreeData refreshtrain;
15928 +       interact;
15929 + %end;
15930 + %else %if "&EM_PROPERTY_FREEZE" eq "Y" %then %do;
15931 +   %if %sysfunc(exist(&EM_USER_EMTREE)) ne 1 %then %do;
15932 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
15933 +    %put &em_codebar;
15934 +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err, NOQUOTE));
15935 +    %put &errormsg;
15936 +    %put &em_codebar;
15937 +    %goto doendm;
15938 +   %end;
15939 +   %else %do;
15940 +     proc arbor data=&INDATA inmodel=&EM_USER_EMTREE refreshtrain;
15941 +       interact;
15942 +   %end;
15943 + %end;
15945 + %else %do;
15946 +   %if %sysfunc(exist(&EM_USER_BROWSETREE)) ne 1 %then %do;
15947 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
15948 +    %put &em_codebar;
15949 +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err, NOQUOTE));
15950 +    %put &errormsg;
15951 +    %put &em_codebar;
15952 +    %goto doendm;
15953 +   %end;
15954 +   %else %do;
15955 +      proc arbor data=&INDATA inmodel=&EM_USER_BROWSETREE refrestrain;
15956 +        interact;
15957 +   %end;
15958 + %end;
15960 + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
15961 +    %if %eval(&EM_NUM_INTERVAL_INPUT + &EM_NUM_INTERVAL_REJECTED) gt 0 %then %do;
15962 +      input %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED/ level = interval;
15963 +    %end;
15965 +    %if  %eval(&EM_NUM_NOMINAL_INPUT + &EM_NUM_NOMINAL_REJECTED) gt 0 %then %do;
15966 +      input %EM_NOMINAL_INPUT %EM_NOMINAL_REJECTED / level = nominal;
15967 +    %end;
15969 +    %if %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_BINARY_REJECTED) gt 0 %then %do;
15970 +      input %EM_BINARY_INPUT %EM_BINARY_REJECTED / level = nominal;
15971 +    %end;
15973 +    %if %eval(&EM_NUM_ORDINAL_INPUT + &EM_NUM_ORDINAL_REJECTED) gt 0 %then %do;
15974 +      input %EM_ORDINAL_INPUT %EM_ORDINAL_REJECTED/ level = ordinal;
15975 +    %end;
15977 +    %if "%EM_FREQ" ne "" %then %do;
15978 +       freq %EM_FREQ;
15979 +    %end;
15981 +    %if "&multipleTar" eq "Y" %then %do;
15982 +       /* cycle through all target vars in variableset */
15983 +       %let tdsid = %sysfunc(open(temptarget));
15984 +       %if &tdsid %then %do;
15985 +          %let n_var = %sysfunc(varnum(&tdsid, NAME));
15986 +          %let n_lvl = %sysfunc(varnum(&tdsid, LEVEL));
15987 +          %do %while(^ %sysfunc(fetch(&tdsid)));
15988 +             %let var = %sysfunc(getvarc(&tdsid, &n_var));
15989 +             %let lvl = %sysfunc(getvarc(&tdsid, &n_lvl));
15990 +             target &var / level = &lvl
15991 +             %if (("&lvl" eq "BINARY") or ("&lvl" eq "NOMINAL")) %then %do;
15992 +               Criterion=&EM_PROPERTY_NOMINALCRITERION;
15993 +             %end;
15994 +             %else %if "&lvl" eq "INTERVAL" %then %do;
15995 +               Criterion=&EM_PROPERTY_INTERVALCRITERION;
15996 +             %end;
15997 +             %else %if "&lvl" eq "ORDINAL" %then %do;
15998 +               Criterion=&EM_PROPERTY_ORDINALCRITERION;
15999 +             %end;
16000 +          %end;
16001 +          %if &tdsid %then %let tdsid=%sysfunc(close(&tdsid));
16002 +       %end;
16003 +       useTarget variable = %EM_TARGET;
16004 +    %end;
16005 +    %else %do;
16006 +      target %EM_TARGET / level = %EM_TARGET_LEVEL
16007 +      %if (("%EM_TARGET_LEVEL" eq "BINARY") or ("%EM_TARGET_LEVEL" eq "NOMINAL")) %then %do;
16008 +        Criterion=&EM_PROPERTY_NOMINALCRITERION;
16009 +      %end;
16010 +      %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
16011 +        Criterion=&EM_PROPERTY_INTERVALCRITERION;
16012 +      %end;
16013 +      %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
16014 +        Criterion=&EM_PROPERTY_ORDINALCRITERION;
16015 +      %end;
16016 +    %end;
16018 +    %if "&multipleTar" eq "N" %then %do;
16019 +      &EM_DEC_STATEMENT;
16020 +    %end;
16022 +    Performance &EM_PROPERTY_PERFORMANCE
16023 +    %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
16024 +      nodesize=&EM_PROPERTY_NODESAMPLE
16025 +    %end;
16026 +    ;
16028 +    %if "&intFlag" eq "Y" %then %do;
16029 +       INTERACT Largest;
16030 +       Train maxnewdepth=0;
16031 +    %end;
16033 +       %if "&EM_PROPERTY_ASSESSMEASURE" ne "" %then %do;
16034 +         Assess
16035 +         %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)) )) %then %do;
16036 +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
16037 +              %put &em_codebar;
16038 +              %let errormsg = %sysfunc(sasmsg(sashelp.dmine, novalidationwithcv_note, NOQUOTE));
16039 +              %put &errormsg;
16040 +              %put &em_codebar;
16041 +            %end;
16042 +            %else %do;
16043 +               Validata=&EM_IMPORT_VALIDATE
16044 +            %end;
16045 +         %end;
16046 +         %else %do;
16047 +           NoValidata
16048 +         %end;
16049 +         %if "&EM_PROPERTY_TRAINMODE" ne "INTERACTIVE" %then %do;
16050 +            %if "&EM_PROPERTY_ASSESSMEASURE" eq "PROFIT/LOSS" %then %do;
16051 +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
16052 +               %if &dsid %then %do;
16053 +                 %let usenum = %sysfunc(varnum(&dsid, USE));
16054 +                 %do %while(^ %sysfunc(fetch(&dsid)));
16055 +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
16056 +                   %if "&use" eq "Y" %then %let measure=PROFIT;
16057 +                   %else %do;
16058 +                      %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %let measure = ASE;
16059 +                      %else %let measure= MISC;
16060 +                   %end;
16061 +                 %end;
16062 +               %end;
16063 +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
16064 +            %end;
16065 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "MISC" %then %do;
16066 +              %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then  %do;
16067 +                 %let measure=ASE;
16068 +              %end;
16069 +              %else %do;
16070 +                 %let measure=MISC;
16071 +              %end;
16072 +            %end;
16073 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "ASE" %then %do;
16074 +              %let measure=ASE;
16075 +            %end;
16076 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "LIFT" %then %do;
16077 +               %let measure = LIFT;
16078 +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
16079 +               %if &dsid %then %do;
16080 +                 %let usenum = %sysfunc(varnum(&dsid, USE));
16081 +                 %do %while(^ %sysfunc(fetch(&dsid)));
16082 +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
16083 +                   %if "&use" eq "Y" %then %let measure=LIFTPROFIT;
16084 +                 %end;
16085 +               %end;
16086 +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
16087 +            %end;
16088 +            measure=&measure
16089 +            %if (("&measure" eq "LIFT") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
16090 +               event = "&targetEvent"
16091 +            %end;
16092 +            %if (("&measure" eq "LIFT") OR ("&measure" eq "LIFTPROFIT")) %then %do;
16093 +              proportion=&EM_PROPERTY_ASSESSPERCENTAGE
16094 +            %end;
16095 +         %end;
16096 +         %if "&multipleTar" eq "N" %then %do;
16097 +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
16098 +               CV
16099 +               %if "&EM_PROPERTY_CVNIter" ne "" %then %do;
16100 +                 CVNITer = &EM_PROPERTY_CVNITER
16101 +               %end;
16102 +               %if "&EM_PROPERTY_CVREPEAT" ne "" %then %do;
16103 +                 CVRepeat = &EM_PROPERTY_CVREPEAT
16104 +               %end;
16105 +               %if "&EM_PROPERTY_CVSEED" ne "" %then %do;
16106 +                 CVSeed = &EM_PROPERTY_CVSEED
16107 +               %end;
16108 +            %end;
16109 +         %end;
16110 +       %end;
16111 +      ;
16113 +      %if "&intFlag" ne "Y" %then %do;
16114 +        %if "&EM_PROPERTY_SUBTREE" ne "" %then %do;
16115 +          %if "&EM_PROPERTY_SUBTREE" eq "ASSESSMENT" %then %let subtree=BEST;
16116 +          %else %if "&EM_PROPERTY_SUBTREE" eq "N" %then %let subtree=NLEAVES;
16117 +          %else %if "&EM_PROPERTY_SUBTREE" eq "LARGEST" %then %let subtree=LARGEST;
16119 +          SUBTREE &subtree
16120 +          %if "&subtree" eq "NLEAVES" %then %do;
16121 +            =&EM_PROPERTY_NSUBTREE
16122 +          %end;
16123 +          ;
16124 +        %end;
16126 +       %if (("&EM_PROPERTY_OBSIMPORTANCE" eq "Y") AND ("&multipleTar" eq "N")) %then %do;
16127 +          %if "&EM_USER_OUTOBSIMP" ne "" %then %do;
16128 +            importance data=&INDATA outfit=&EM_USER_OUTOBSIMP nvars=&EM_PROPERTY_NUMSINGLEIMP;
16129 +          %end;
16130 +       %end;
16131 +      %end;
16132 + %end;
16135 + MakeMacro nleaves = nleaves;
16136 + save
16137 + %if "&EM_USER_EMTREE" ne "" %then %do;
16138 +   MODEL=&EM_USER_EMTREE
16139 + %end;
16140 + %if "&EM_USER_OUTSEQ" ne "" %then %do;
16141 +   SEQUENCE=&EM_USER_OUTSEQ
16142 + %end;
16143 + %if "&EM_USER_OUTIMPORT" ne "" %then %do;
16144 +   IMPORTANCE=&EM_USER_OUTIMPORT
16145 + %end;
16146 + %if "&EM_USER_OUTNODES" ne "" %then %do;
16147 +   NODESTAT=&EM_USER_OUTNODES
16148 + %end;
16149 + %if "&EM_USER_OUTSUMMARY" ne "" %then %do;
16150 +   SUMMARY=&EM_USER_OUTSUMMARY
16151 + %end;
16152 + %if "&EM_USER_OUTSTATS" ne "" %then %do;
16153 +   STATSBYNODE=&EM_USER_OUTSTATS
16154 + %end;
16155 + %if "&EM_USER_OUTTOPOLOGY" ne "" %then %do;
16156 +   TOPOLOGY=&EM_USER_OUTTOPOLOGY
16157 + %end;
16158 + %if "&EM_USER_OUTPATH" ne "" %then %do;
16159 +   Pathlistnonmissing=&EM_USER_OUTPATH
16160 + %end;
16161 + %if "&EM_USER_OUTRULES" ne "" %then %do;
16162 +   RULES = &EM_USER_OUTRULES
16163 + %end;
16164 + ;
16166 + %if "&intFlag" ne "Y" %then %do;
16168 +   %let lookupString = ;
16169 +   %if ^%symexist(EM_OPTION) %then
16170 +      %let EM_OPTION=;
16172 +   %if %sysfunc(index(%upcase(&EM_DEBUG), I18N)) or %sysfunc(index(%upcase(&EM_OPTION), I18N)) %then %do;
16173 +      %let lookupString = LOOKUP=SELECT;
16174 +   %end;
16176 +   %let codetext=;
16177 +   %let norescodetxt=;
16179 +   %if "&EM_PROPERTY_DUMMY" eq "Y" %then %do;
16180 +     %let codetext=&codetext DUMMY;
16181 +     %let norescodetxt=&norescodetxt DUMMY;
16182 +   %end;
16183 +   %if "&EM_PROPERTY_LEAFID" ne "Y" %then %do;
16184 +     %let codetext=&codetext NOLEAFID;
16185 +     %let norescodetxt=&norescodetxt NOLEAFID;
16186 +   %end;
16187 +   %if "&EM_PROPERTY_PREDICT" ne "Y" %then %do;
16188 +     %let norescodetxt=&norescodetxt NOPRED;
16189 +   %end;
16191 +   code file="&EM_USER_TREEFLOW" res &codetext group=&emloopid &lookupString;
16192 +   code file="&EM_USER_TREEPUBLISH" nores &norescodetxt group=&emloopid &lookupString;
16194 +   %if &nnpmml %then %do;
16195 +     code pmml;
16196 +   %end;
16198 +   score data=&INDATA out=_NULL_ outfit=work.fit_train role=TRAIN;
16199 +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16200 +     score data=&EM_IMPORT_VALIDATE out=_NULL_ outfit=work.fit_valid role=VALID;
16201 +   %end;
16202 +   %if "&EM_IMPORT_TEST" ne "" %then %do;
16203 +     score data=&EM_IMPORT_TEST out=_NULL_ outfit=work.fit_test role=TEST;
16204 +   %end;
16205 + %end;
16207 + run;
16208 + quit;
16210 + /*%em_checkerror(); */
16211 +  %if %sysfunc(cexist(work._treeDMDB)) %then %do;
16212 +   /* Delete DMDB catalog */
16213 +   proc datasets lib=work nolist;
16214 +       delete _treeDMDB / mt=cat;
16215 +  run;
16216 +  %end;
16218 + %if &nnpmml %then %do;
16219 +    ods pmml close;
16220 + %end;
16222 +  %doendm:
16224 +%mend em_tree_runTreeProcedure;
16226 +%macro em_tree_createFitStats( multipleTar= );
16229 +  /* create targetTable is multipleTar eq Y */
16230 +  data temptarget;
16231 +    set &EM_DATA_VARIABLESET;
16232 +    where ROLE="TARGET";
16233 +  run;
16235 +  %EM_GETNAME(key=EMOUTFIT, type=DATA);
16236 +   data &EM_USER_EMOUTFIT;
16237 +     length target $32;
16238 +     merge work.fit_train
16239 +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16240 +       work.fit_valid
16241 +     %end;
16242 +     %if "&EM_IMPORT_TEST" ne "" %then %do;
16243 +       work.fit_test
16244 +     %end;
16245 +     ;
16246 +     %if "&multipleTar" eq "N" %then %do;
16247 +       target="%EM_TARGET";
16248 +     %end;
16249 +     %else %do;
16250 +       target = _TARGET_;
16251 +     %end;
16252 +     drop _NW_ _SUMW_
16253 +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16254 +        _VSUMW_
16255 +     %end;
16256 +     ;
16257 +   run;
16259 +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16260 +     proc datasets library=work nolist;
16261 +       delete fit_valid;
16262 +     run;
16263 +   %end;
16264 +   %if "&EM_IMPORT_TEST" ne "" %then %do;
16265 +     proc datasets library=work nolist;
16266 +       delete fit_test;
16267 +     run;
16268 +   %end;
16270 +%mend em_tree_createFitStats;
16273 +%macro em_tree_makeEnglishRules;
16275 +  %EM_GETNAME(key=OUTNODES, type=DATA);
16276 +  %EM_GETNAME(key=OUTPATH, type=DATA);
16278 +  /* verify that necessary tables exist and if not, skip processing */
16279 +  %if %sysfunc(exist(&EM_USER_OUTNODES)) ne 1 %then %do;
16280 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
16281 +    %goto doendm;
16282 +  %end;
16283 +  %if %sysfunc(exist(&EM_USER_OUTPATH)) ne 1 %then %do;
16284 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
16285 +    %goto doendm;
16286 +  %end;
16288 +  /* determine length of variable in outpath dataset */
16289 +  %let vlength= ;
16290 +  %let dsid = %sysfunc(open(&EM_USER_OUTPATH));
16291 +  %if &dsid ne %then %do;
16292 +    %let varnum = %sysfunc(varnum(&dsid, VARIABLE));
16293 +    %let vlength = %sysfunc(VARLEN(&dsid, &varnum));
16294 +  %end;
16295 +  %if &dsid ne %then %let dsid = %sysfunc(close(&dsid));
16297 +  data tempoutpath;
16298 +    length varname $&vlength;
16299 +    retain varname;
16300 +    set &EM_USER_OUTPATH;
16302 +    if ^missing(variable) then varname=variable;
16303 +    else if ^missing(var_name) then varname=var_name;
16304 +    output;
16305 +  run;
16307 +  /* create an array of generated predicted variable names */
16308 +  %let tree_pred_vars = ;
16309 +  %let tree_pred_label = ;
16310 +  %let numpred= 0;
16311 +  %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
16313 +    data _null_;
16314 +     set &EM_DEC_DECMETA(where=(_TYPE_="PREDICTED")) end=eof;
16315 +     call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
16316 +     call symput('tree_pred_label'!!strip(put(_N_, BEST.)), strip(tranwrd(LABEL,'"','""')));
16317 +     if eof then
16318 +       call symput('numpred', strip(put(_N_, BEST.)));
16319 +    run;
16320 +  %end;
16322 +  /* determine if NPRIORS exists in outnodes  */
16323 +  %local nprior_flag;
16324 +  data _null_;
16325 +    set &EM_USER_OUTNODES(obs=2) end=eof;
16326 +    if eof then do;
16327 +      call symput('nprior_flag', strip(put(npriors, best.)));
16328 +    end;
16329 +  run;
16331 +  proc sort data=tempoutpath; by node; run;
16332 +  proc sort data=&EM_USER_OUTNODES out=outnodes; by node; run;
16334 +  data tempoutpath;
16335 +    merge tempoutpath(in=_a) outnodes(keep= node
16336 +    %if "&nprior_flag" ne "." %then %do;
16337 +      NPRIORS
16338 +    %end;
16339 +    %else %do;
16340 +      N
16341 +    %end;
16342 +    %if &numpred gt 0 %then %do;
16343 +      %do i=1 %to &numpred;
16344 +        &&tree_pred_vars&i
16345 +      %end;
16346 +    %end;
16347 +    );
16348 +    by node;
16349 +    if _a;
16350 +  run;
16352 +  proc sort data=tempoutpath; by node descending varname descending numeric_value; run;
16354 +  data _null_;
16355 +    file x;
16356 +    set tempoutpath;
16357 +    by node descending varname;
16358 +    retain origvar oldnode string;
16359 +    length origvar $32 oldnode 8 string $200;
16361 +    if _N_ = 1 then do;
16362 +      origvar = varname;
16363 +      oldnode = node;
16364 +    end;
16366 +    if first.node then do;
16367 +       put "&EM_CODEBAR";
16368 +       put " Node = " node;
16369 +       put "&EM_CODEBAR";
16370 +    end;
16372 +      if first.varname then do;
16373 +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
16374 +            if MISSING(CHARACTER_VALUE) then do;
16375 +             if NUMERIC_VALUE ne .  then do;
16376 +              if ^first.node then do;
16377 +                string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16378 +              end;
16379 +              else do;
16380 +                string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16381 +              end;
16382 +             end;
16383 +            end;
16384 +            else do;
16385 +              if ^first.node then do;
16386 +                string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16387 +              end;
16388 +              else do;
16389 +                string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16390 +              end;
16391 +             end;
16392 +         end;
16393 +         else if RELATION in ("=") then do;
16394 +            if ^first.node then do;
16395 +              string = "AND "||strip(varname) ||" IS ONE OF: "||character_value;
16396 +            end;
16397 +            else do;
16398 +              string = "if "|| strip(varname) ||" IS ONE OF: "||character_value;
16399 +            end;
16400 +         end;
16401 +         else if RELATION in ("ISMISSING") then do;
16402 +            if ^first.node then do;
16403 +              string = " AND "|| strip(varname) || " equals Missing";
16404 +            end;
16405 +            else do;
16406 +              string = "if "|| strip(varname) ||" equals Missing";
16407 +            end;
16408 +         end;
16409 +         else if RELATION in ("ISNOTMISSING") then do;
16410 +            if ^first.node then do;
16411 +              string = " AND "|| strip(varname) || " equals All Values";
16412 +            end;
16413 +            else do;
16414 +              string = "if "|| strip(varname) ||" equals All Values";
16415 +            end;
16416 +         end;
16417 +         if ^missing(varname) then origvar = varname;
16418 +         oldnode=node;
16420 +      end;
16421 +      else do;
16422 +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
16423 +          if MISSING(CHARACTER_VALUE) then do;
16424 +           if  NUMERIC_VALUE ne .  then do;
16425 +            if ^MISSING(string) then
16426 +              string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16427 +            else
16428 +              string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16429 +           end;
16430 +          end;
16431 +          else do;
16432 +            if ^MISSING(string) then
16433 +              string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16434 +            else
16435 +              string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16436 +          end;
16438 +         end;
16439 +         else if RELATION in ("=") then do;
16440 +           string = strip(string)||", "||strip(character_value);
16441 +         end;
16442 +         else if RELATION in ("ISMISSING") then do;
16444 +         end;
16445 +         if ^missing(varname) then origvar = varname;
16446 +         oldnode=node;
16447 +      end;
16448 +      if last.varname then do;
16449 +         if RELATION in ("ISMISSING") then do;
16450 +           if ^first.varname then do;
16451 +             string = strip(string) || " or MISSING";
16452 +           end;
16453 +         end;
16454 +         put string;
16455 +         if ^missing(varname) then origvar = varname;
16456 +         oldnode=node;
16457 +      end;
16459 +      if last.node then do;
16460 +         put "then ";
16461 +         put " Tree Node Identifier   = " node;
16463 +         %if "&nprior_flag" ne "." %then %do;
16464 +           put " Number of Observations = " NPRIORS;
16465 +         %end;
16466 +         %else %do;
16467 +           put " Number of Observations = " N;
16468 +         %end;
16470 +         %if &numpred gt 0 %then %do;
16471 +           %do i=1 %to &numpred;
16472 +             put " &&tree_pred_label&i = " &&tree_pred_vars&i;
16473 +           %end;
16474 +         %end;
16476 +         put " ";
16477 +         if ^missing(varname) then origvar = varname;
16478 +         oldnode=node;
16479 +      end;
16481 +  run;
16483 +  proc datasets lib=work nolist;
16484 +    delete tempoutpath outnodes;
16485 +  run;
16487 +  %doendm:
16488 +%mend em_tree_makeEnglishRules;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: The data set WORK.EM_USER_KEY has 1 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: DATA STEP view saved on file EMWS1.EM_TREE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.VARSEL_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.01 seconds
 
 
NOTE: There were 350 observations read from the data set EMWS1.FIMPORT_DATA.
NOTE: There were 350 observations read from the data set EMWS1.FIMPORT_TRAIN.
NOTE: View EMWS1.EM_TREE.VIEW used (Total process time):
      real time           0.06 seconds
      cpu time            0.03 seconds
 
NOTE: There were 350 observations read from the data set EMWS1.VARSEL_TRAIN.
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.07 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.TREE_VARIABLESET.
      WHERE (ROLE='TARGET') and (LEVEL not = 'ORDINAL');
NOTE: The data set WORK.TEMPTARGET has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: 1490178 kilobytes of physical memory.
NOTE: Will use 350 out of 350 training cases.
NOTE: Using memory pool with 36419584 bytes.
NOTE: Passed training data 12 times.
NOTE: Training used 62232 bytes of work memory.
NOTE: The subtree sequence contains 18 subtrees. The largest has 35 nodes and 18 leaves.
NOTE: Using subtree with 35 nodes and 18 leaves.
NOTE: Using subtree with 35 nodes and 18 leaves.
NOTE: Created macro variable NLEAVES equal to 18.
NOTE: The data set EMWS1.TREE_OUTIMPORT has 5 observations and 4 variables.
NOTE: The data set EMWS1.TREE_EMTREE has 998 observations and 4 variables.
NOTE: The data set EMWS1.TREE_OUTNODES has 35 observations and 14 variables.
NOTE: The data set EMWS1.TREE_OUTPATH has 128 observations and 7 variables.
NOTE: The data set EMWS1.TREE_OUTRULES has 311 observations and 6 variables.
NOTE: The data set EMWS1.TREE_OUTSEQ has 18 observations and 10 variables.
NOTE: The data set EMWS1.TREE_OUTSTATS has 105 observations and 4 variables.
NOTE: The data set EMWS1.TREE_OUTSUMMARY has 5 observations and 2 variables.
NOTE: The data set EMWS1.TREE_OUTTOPOLOGY has 35 observations and 5 variables.
NOTE: External file C:\Users\Administrator\Desktop\NewProjectExam\Workspaces\EMWS1\Tree\TREEFLOW.sas opened.
NOTE: External file C:\Users\Administrator\Desktop\NewProjectExam\Workspaces\EMWS1\Tree\TREEPUBLISH.sas opened.
NOTE: The data set WORK.FIT_TRAIN has 1 observations and 9 variables.
NOTE: There were 350 observations read from the data set EMWS1.FIMPORT_DATA.
NOTE: There were 350 observations read from the data set EMWS1.FIMPORT_TRAIN.
NOTE: View EMWS1.EM_TREE.VIEW used (Total process time):
      real time           0.08 seconds
      cpu time            0.00 seconds
 
NOTE: There were 350 observations read from the data set EMWS1.VARSEL_TRAIN.
 
 
NOTE: There were 350 observations read from the data set EMWS1.FIMPORT_DATA.
NOTE: There were 350 observations read from the data set EMWS1.FIMPORT_TRAIN.
NOTE: View EMWS1.EM_TREE.VIEW used (Total process time):
      real time           0.26 seconds
      cpu time            0.10 seconds
 
NOTE: There were 350 observations read from the data set EMWS1.VARSEL_TRAIN.
NOTE: There were 350 observations read from the data set EMWS1.EM_TREE.
NOTE: The data set WORK._NAMEDAT has 1 observations and 5 variables.
NOTE: PROCEDURE ARBOR used (Total process time):
      real time           0.27 seconds
      cpu time            0.10 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.TREE_VARIABLESET.
      WHERE ROLE='TARGET';
NOTE: The data set WORK.TEMPTARGET has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set WORK.FIT_TRAIN.
NOTE: The data set EMWS1.TREE_EMOUTFIT has 1 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 128 observations read from the data set EMWS1.TREE_OUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 128 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.TREE_AGE_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Variable npriors is uninitialized.
NOTE: There were 2 observations read from the data set EMWS1.TREE_OUTNODES.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 128 observations read from the data set WORK.TEMPOUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 128 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 35 observations read from the data set EMWS1.TREE_OUTNODES.
NOTE: The data set WORK.OUTNODES has 35 observations and 14 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 128 observations read from the data set WORK.TEMPOUTPATH.
NOTE: There were 35 observations read from the data set WORK.OUTNODES.
NOTE: The data set WORK.TEMPOUTPATH has 128 observations and 10 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 128 observations read from the data set WORK.TEMPOUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 128 observations and 10 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      212:176   222:190   368:191   375:195
NOTE: The file X is:
      Filename=C:\Users\Administrator\Desktop\NewProjectExam\Workspaces\EMWS1\Tree\ENGLISHRULES.txt,
      RECFM=V,LRECL=131068,File Size (bytes)=0,
      Last Modified=2024年01月07日 16时36分12秒,
      Create Time=2024年01月07日 14时32分19秒
 
NOTE: 209 records were written to the file X.
      The minimum record length was 1.
      The maximum record length was 66.
NOTE: There were 128 observations read from the data set WORK.TEMPOUTPATH.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Deleting WORK.TEMPOUTPATH (memtype=DATA).
NOTE: Deleting WORK.OUTNODES (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
NOTE: Fileref X has been deassigned.
16490
16491  *------------------------------------------------------------*;
16492  * End TRAIN: Tree;
16493  *------------------------------------------------------------*;
 
16494  *------------------------------------------------------------*;
16495  * Close any missing semi colons;
16496  *------------------------------------------------------------*;
16497  ;
16498  ;
16499  ;
16500  ;
16501  quit;
16502  *------------------------------------------------------------*;
16503  * Close any unbalanced quotes;
16504  *------------------------------------------------------------*;
16505  /*; *"; *'; */
16506  ;
16507  run;
16508  quit;
16509  /* Reset EM Options */
16510  options formchar="|----|+|---+=|-/\<>*";
16511  options nocenter ls=256 ps=10000;
16512  goptions reset=all device=GIF NODISPLAY;
 
16513  proc sort data=WORK.EM_USER_REPORT;
16514  by ID VIEW;
16515  run;
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
*------------------------------------------------------------*
* Score Log
Date:                2024年01月07日
Time:                16时36分13秒
*------------------------------------------------------------*
16617  %let EMEXCEPTIONSTRING=;
16618  *------------------------------------------------------------*;
16619  * SCORE: Tree;
16620  *------------------------------------------------------------*;
16621  %let EM_ACTION = SCORE;
16622  %let syscc = 0;
16623  %macro main;
16624
16625    %if %upcase(&EM_ACTION) = CREATE %then %do;
16626      filename temp catalog 'sashelp.emmodl.tree_create.source';
16627      %include temp;
16628      filename temp;
16629
16630      %em_tree_create;
16631    %end;
16632
16633     %else
16634     %if %upcase(&EM_ACTION) = TRAIN %then %do;
16635
16636         filename temp catalog 'sashelp.emmodl.tree_train.source';
16637         %include temp;
16638         filename temp;
16639         %em_tree_train;
16640     %end;
16641
16642    %else
16643    %if %upcase(&EM_ACTION) = SCORE %then %do;
16644      filename temp catalog 'sashelp.emmodl.tree_score.source';
16645      %include temp;
16646      filename temp;
16647
16648      %em_tree_score;
16649
16650    %end;
16651
16652    %else
16653    %if %upcase(&EM_ACTION) = REPORT %then %do;
16654
16655         filename temp catalog 'sashelp.emmodl.tree_report.source';
16656         %include temp;
16657         filename temp;
16658
16659         %em_tree_report;
16660     %end;
16661
16662    %else
16663    %if %upcase(&EM_ACTION) = OPENINT %then %do;
16664
16665         filename temp catalog 'sashelp.emmodl.tree_actions.source';
16666         %include temp;
16667         filename temp;
16668         %EM_TREE_OPENTREEVIEWER;
16669
16670     %end;
16671
16672    %else
16673    %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
16674
16675         filename temp catalog 'sashelp.emmodl.tree_actions.source';
16676         %include temp;
16677         filename temp;
16678         %EM_TREE_CLOSETREEVIEWER;
16679
16680     %end;
16681
16682
16683     %doendm:
16684  %mend main;
16685
16686  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_SCORE.SOURCE.
16688 +%macro em_tree_score;
16690 +   /* determine if multiple targets will be processed */
16691 +   %let em_tree_multipleTargets=N;
16692 +   %let em_tree_numTarget=1;
16693 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
16694 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
16695 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
16696 +         %let em_tree_multipleTargets=N;
16697 +      %end;
16698 +      %else %do;
16699 +         /* create macro array of targets  */
16700 +         data _null_;
16701 +           set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
16702 +           call symput('em_tree_targetVars'!!strip(put(_N_, BEST.)), strip(Name));
16703 +           if eof then
16704 +             call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
16705 +        run;
16707 +        %if &em_tree_numTarget gt 1 %then %do;
16708 +           %let em_tree_multipleTargets=Y;
16709 +        %end;
16710 +      %end;
16711 +   %end;
16713 +   /* build flow and publish scoring code */
16714 +   %EM_GETNAME(key=TREEFLOW, type=FILE, extension=sas);
16715 +   %EM_GETNAME(key=TREEPUBLISH, type=FILE, extension=sas);
16717 +   filename treeflow "&EM_USER_TREEFLOW";
16718 +   filename treepub "&EM_USER_TREEPUBLISH";
16720 +   filename flowref  "&EM_FILE_EMFLOWSCORECODE";
16721 +   filename pubref   "&EM_FILE_EMPUBLISHSCORECODE";
16723 +   %em_copyfile(infref=treeflow, outfref=flowref);
16724 +   %em_copyfile(infref=treepub, outfref=pubref);
16726 +   filename treeflow;
16727 +   filename treepub;
16729 +   /* if priors are used, add code to generate unadjusted residuals in export */
16730 +   %let useAdjPriors = N;
16731 +   data _null_;
16732 +     set &EM_DEC_DECMETA(where=(_TYPE_="DECPRIOR"));
16733 +     if USE="Y" then call symput('useAdjPriors', 'Y');
16734 +   run;
16735 +   %if (("&em_tree_multipleTargets" eq "N") AND ("&useAdjPriors" eq "Y")) %then %do;
16736 +      filename temp catalog 'sashelp.emutil.em_makeunadjustedresidualvars.source';
16737 +      %include temp;
16738 +      filename temp;
16740 +      %EM_GETNAME(key=adjResidualCode, type=FILE, extension=sas);
16741 +      filename adjref "&EM_USER_adjResidualCode";
16742 +      %makeUnadjustedResidualVars(target=%EM_TARGET, decmeta=&EM_DEC_DECMETA, fref=adjref);
16744 +      %em_copyfile(infref=adjref, outfref=flowref, append=Y);
16746 +      filename adjref;
16747 +   %end;
16749 +   /* LEAF */
16750 +   %if "&EM_PROPERTY_LEAFID" eq "Y" %then %do;
16751 +      data _null_;
16752 +        file flowref mod;
16753 +        put 'drop _LEAF_;';
16754 +      run;
16756 +      data _null_;
16757 +        file pubref mod;
16758 +        put 'drop _LEAF_;';
16759 +      run;
16761 +   %end;
16763 +   filename flowref;
16764 +   filename pubref;
16766 +   /* em_metachange code */
16767 +   %if "&EM_PROPERTY_LEAFID" eq "Y" %then %do;
16768 +     %EM_METACHANGE(name=_NODE_, role=&EM_PROPERTY_NODEROLE, LEVEL=NOMINAL);
16769 +   %end;
16771 +   /* variable selection based on importance stat    */
16772 +   %if "&EM_PROPERTY_VARSELECTION" eq "Y" %then %do;
16773 +     %EM_GETNAME(key=OUTIMPORT, type=DATA);
16774 +     %let dsid = %sysfunc(open(&EM_USER_OUTIMPORT(where=(IMPORTANCE<0.05))));
16775 +     %let varnum = %sysfunc(varnum(&dsid, NAME));
16776 +     %let obs = %sysfunc(fetch(&dsid));
16777 +     %do %while(&obs=0);
16778 +       %let temp = %nrbquote(%sysfunc(getvarc(&dsid, &varnum)));
16779 +       %let varname = %nrbquote(%sysfunc(tranwrd(&temp,  %str(%"),"")));
16780 +       %EM_METACHANGE(name=&varname, role=REJECTED);
16781 +       %let obs = %sysfunc(fetch(&dsid));
16782 +     %end;
16783 +     %if &dsid %then %let dsid=%sysfunc(close(&dsid));
16784 +   %end;
16786 +   /* set Q_ varaibles to role of ASSESS when in the presense of prior probabilities */
16787 +   %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
16788 +    %let tree_pred_vars = ;
16789 +    %let tree_pred_lvl =;
16790 +    %let numpred= 0;
16792 +    data _null_;
16793 +     set &EM_DEC_DECMETA(where=(_TYPE_="PREDICTED")) end=eof;
16794 +     call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
16795 +     call symput('tree_pred_lvl'!!strip(put(_N_, BEST.)), strip(LEVEL));
16796 +     if eof then
16797 +       call symput('numpred', strip(put(_N_, BEST.)));
16798 +    run;
16799 +   %end;
16801 +   %if &numpred ne 0 %then %do;
16802 +    %do i=1 %to &numpred;
16803 +      %let qpred = Q%substr(&&tree_pred_vars&i,2);
16804 +      %EM_METACHANGE(name=&qpred, role=ASSESS);
16805 +    %end;
16806 +   %end;
16808 +   /* determine if multiple targets will be processed */
16809 +   %let em_tree_multipleTargets=N;
16810 +   %let em_tree_numTarget=1;
16811 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
16812 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
16813 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
16814 +         %let em_tree_multipleTargets=N;
16815 +      %end;
16816 +      %else %do;
16817 +        data _null_;
16818 +          set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
16819 +          if eof then
16820 +            call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
16821 +        run;
16823 +        %if &em_tree_numTarget gt 1 %then %do;
16824 +           %let em_tree_multipleTargets=Y;
16825 +        %end;
16826 +     %end;
16827 +   %end;
16829 +   /* need to include this code to do the %em_report for OUTIMPORT here instead of in Report code so _loop data set is created when group processing */
16830 +   %if "&em_tree_multipleTargets" eq "N" %then %do;
16832 +      /* variable importance */
16833 +      %EM_GETNAME(key=OUTIMPORT, type=DATA);
16834 +      %if %sysfunc(exist(&EM_USER_OUTIMPORT)) eq 1 %then %do;
16836 +         %let validexist=0;
16837 +         %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)))) %then %do;
16838 +           %let validexist=1;
16839 +         %end;
16841 +         /* determine if vars exists - properties could indicate they are they but freeze=Y would mean the node wasn't retrained */
16842 +         /* and the columns may not be generated                                                                                 */
16843 +         %let em_tree_cvexists=;
16844 +         %let em_tree_surrexists=.;
16845 +         data _null_;
16846 +            set &EM_USER_OUTIMPORT (obs=2) end=eof;
16847 +            if eof then do ;
16848 +               call symput("em_tree_cvexists" , strip(put(cvimportance,best.))) ;
16849 +               call symput("em_tree_surrexists", strip(put(nsurrogates, best.)));
16850 +            end;
16851 +         run;
16853 +         data &EM_USER_OUTIMPORT;
16854 +            set &EM_USER_OUTIMPORT;
16856 +            /* format columns based on Precison value specified */
16857 +            format importance 15.&EM_PROPERTY_PRECISION
16858 +                 %if &validexist %then %do;
16859 +                   vimportance ratio 15.&EM_PROPERTY_PRECISION
16860 +                 %end;
16861 +                 %if "&EM_TREE_CVEXISTS" ne "." %then %do;
16862 +                   cvimportance vimportance ratio 15.&EM_PROPERTY_PRECISION
16863 +                 %end;
16864 +            ;
16865 +            label  NAME       = "%sysfunc(sasmsg(sashelp.dmine, meta_name_vlabel, noquote))"
16866 +                 LABEL        = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, noquote))"
16867 +                 NRULES       = "%sysfunc(sasmsg(sashelp.dmine, rpt_nrules_vlabel, noquote))"
16868 +                 IMPORTANCE   = "%sysfunc(sasmsg(sashelp.dmine, rpt_importance_vlabel, noquote))"
16869 +                 %if "&em_tree_surrexists" ne "" %then %do;
16870 +                   NSURROGATES  = "%sysfunc(sasmsg(sashelp.dmine, rpt_nsurrogates_vlabel, noquote))"
16871 +                 %end;
16872 +                 %if &validexist %then %do;
16873 +                   VIMPORTANCE = "%sysfunc(sasmsg(sashelp.dmine, rpt_vimportance_vlabel, noquote))"
16874 +                   RATIO       = "%sysfunc(sasmsg(sashelp.dmine, rpt_ratio_vlabel, noquote))"
16875 +                 %end;
16876 +                 %if "&EM_TREE_CVEXISTS" ne "" %then %do;
16877 +                   VIMPORTANCE = "%sysfunc(sasmsg(sashelp.dmine, rpt_vimportance_vlabel, noquote))"
16878 +                   CVIMPORTANCE =  "%sysfunc(sasmsg(sashelp.dmine, rpt_cvimport_vlabel, noquote))"
16879 +                   CVRULES= "%sysfunc(sasmsg(sashelp.dmine, rpt_cvrules_vlabel, noquote))"
16880 +                   RATIO = "%sysfunc(sasmsg(sashelp.dmine, rpt_ratio_vlabel, noquote))"
16881 +                 %end;
16882 +            ;
16883 +         run;
16885 +         %EM_REPORT(key=OUTIMPORT, viewtype=DATA, block=MODEL, description=IMPORTANCE, autodisplay=N);
16886 +      %end;
16887 +   %end;
16889 +   %doendm:
16890 +%mend em_tree_score;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: The file FLOWREF is:
      Filename=C:\Users\Administrator\Desktop\NewProjectExam\Workspaces\EMWS1\Tree\EMFLOWSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=0,
      Last Modified=2024年01月07日 16时36分12秒,
      Create Time=2024年01月07日 14时24分11秒
 
NOTE: 178 records were written to the file FLOWREF.
      The minimum record length was 1.
      The maximum record length was 65.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The file PUBREF is:
      Filename=C:\Users\Administrator\Desktop\NewProjectExam\Workspaces\EMWS1\Tree\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=0,
      Last Modified=2024年01月07日 16时36分12秒,
      Create Time=2024年01月07日 14时24分11秒
 
NOTE: 173 records were written to the file PUBREF.
      The minimum record length was 1.
      The maximum record length was 65.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: Fileref TREEFLOW has been deassigned.
NOTE: Fileref TREEPUB has been deassigned.
 
NOTE: There were 0 observations read from the data set EMWS1.TREE_AGE_DM.
      WHERE _TYPE_='DECPRIOR';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The file FLOWREF is:
      Filename=C:\Users\Administrator\Desktop\NewProjectExam\Workspaces\EMWS1\Tree\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=5921,
      Last Modified=2024年01月07日 16时36分12秒,
      Create Time=2024年01月07日 14时24分11秒
 
NOTE: 1 record was written to the file FLOWREF.
      The minimum record length was 12.
      The maximum record length was 12.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The file PUBREF is:
      Filename=C:\Users\Administrator\Desktop\NewProjectExam\Workspaces\EMWS1\Tree\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=5783,
      Last Modified=2024年01月07日 16时36分12秒,
      Create Time=2024年01月07日 14时24分11秒
 
NOTE: 1 record was written to the file PUBREF.
      The minimum record length was 12.
      The maximum record length was 12.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: Fileref FLOWREF has been deassigned.
NOTE: Fileref PUBREF has been deassigned.
 
NOTE: The data set WORK.EM_METACHANGE has 1 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.TREE_AGE_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 2 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Variable cvimportance is uninitialized.
NOTE: Variable nsurrogates is uninitialized.
NOTE: There were 2 observations read from the data set EMWS1.TREE_OUTIMPORT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Variable NSURROGATES is uninitialized.
NOTE: Variable VIMPORTANCE is uninitialized.
NOTE: Variable CVIMPORTANCE is uninitialized.
NOTE: Variable CVRULES is uninitialized.
NOTE: Variable RATIO is uninitialized.
NOTE: There were 5 observations read from the data set EMWS1.TREE_OUTIMPORT.
NOTE: The data set EMWS1.TREE_OUTIMPORT has 5 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
16891
16892  *------------------------------------------------------------*;
16893  * End SCORE: Tree;
16894  *------------------------------------------------------------*;
 
16895  proc sort data=WORK.EM_METACHANGE;
16896  by key uname;
16897  run;
 
NOTE: There were 2 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 2 observations and 9 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
16898  filename x "C:\Users\Administrator\Desktop\NewProjectExam\Workspaces\EMWS1\Tree\CDELTA_TRAIN.sas";
16899  data _null_;
16900  file x;
16901  put 'if upcase(NAME) = "Q_AGE" then do;';
16902  put 'ROLE = "ASSESS";';
16903  put 'end;';
16904  put 'else ';
16905  put 'if upcase(NAME) = "_NODE_" then do;';
16906  put 'ROLE = "SEGMENT";';
16907  put 'LEVEL = "NOMINAL";';
16908  put 'end;';
16909  run;
 
NOTE: The file X is:
      Filename=C:\Users\Administrator\Desktop\NewProjectExam\Workspaces\EMWS1\Tree\CDELTA_TRAIN.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=2024年01月07日 16时36分12秒,
      Create Time=2024年01月07日 14时24分11秒
 
NOTE: 8 records were written to the file X.
      The minimum record length was 4.
      The maximum record length was 35.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
16910  filename x;
NOTE: Fileref X has been deassigned.
 
16911  filename emflow "C:\Users\Administrator\Desktop\NewProjectExam\Workspaces\EMWS1\Tree\EMFLOWSCORE.sas";
16912  *------------------------------------------------------------*;
16913  * Tree: Scoring DATA data;
16914  *------------------------------------------------------------*;
16915  data EMWS1.Tree_TRAIN
16916  / view=EMWS1.Tree_TRAIN
16917  ;
16918  set EMWS1.Varsel_TRAIN
16919  ;
16920  %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Users\Administrator\Desktop\NewProjectExam\Workspaces\EMWS1\Tree\EMFLOWSCORE.sas.
16921 +****************************************************************;
16922 +******             DECISION TREE SCORING CODE             ******;
16923 +****************************************************************;
16924 +
16925 +******         LENGTHS OF NEW CHARACTER VARIABLES         ******;
16926 +LENGTH _WARN_  $    4;
16927 +
16928 +******              LABELS FOR NEW VARIABLES              ******;
16929 +label _NODE_ = 'Node' ;
16930 +label _LEAF_ = 'Leaf' ;
16931 +label P_Age = 'Predicted: Age' ;
16932 +label R_Age = 'Residual: Age' ;
16933 +label _WARN_ = 'Warnings' ;
16934 +
16935 +
16936 +******      TEMPORARY VARIABLES FOR FORMATTED VALUES      ******;
16937 +LENGTH _ARBFMT_6 $      6; DROP _ARBFMT_6;
16938 +_ARBFMT_6 = ' '; /* Initialize to avoid warning. */
16939 +LENGTH _ARBFMT_12 $     12; DROP _ARBFMT_12;
16940 +_ARBFMT_12 = ' '; /* Initialize to avoid warning. */
16941 +
16942 +
16943 +******             ASSIGN OBSERVATION TO NODE             ******;
16944 +_ARBFMT_6 = PUT( Membership_Type , $6.);
16945 + %DMNORMIP( _ARBFMT_6);
16946 +IF _ARBFMT_6 IN ('BRONZE' ) THEN DO;
16947 +  _ARBFMT_12 = PUT( G_City , BEST12.);
16948 +   %DMNORMIP( _ARBFMT_12);
16949 +  IF _ARBFMT_12 IN ('2' ) THEN DO;
16950 +    IF  NOT MISSING(Total_Spend ) AND
16951 +                     455.7 <= Total_Spend  THEN DO;
16952 +      _NODE_  =                   15;
16953 +      _LEAF_  =                   18;
16954 +      P_Age  =     36.0952380952381;
16955 +      END;
16956 +    ELSE DO;
16957 +      IF  NOT MISSING(Total_Spend ) AND
16958 +                      440.85 <= Total_Spend  THEN DO;
16959 +        IF  NOT MISSING(Total_Spend ) AND
16960 +                        445.75 <= Total_Spend  THEN DO;
16961 +          _NODE_  =                   33;
16962 +          _LEAF_  =                   17;
16963 +          P_Age  =     36.8333333333333;
16964 +          END;
16965 +        ELSE DO;
16966 +          _NODE_  =                   32;
16967 +          _LEAF_  =                   16;
16968 +          P_Age  =                   38;
16969 +          END;
16970 +        END;
16971 +      ELSE DO;
16972 +        IF  NOT MISSING(Total_Spend ) AND
16973 +                        435.65 <= Total_Spend  THEN DO;
16974 +          _NODE_  =                   31;
16975 +          _LEAF_  =                   15;
16976 +          P_Age  =                 36.4;
16977 +          END;
16978 +        ELSE DO;
16979 +          _NODE_  =                   30;
16980 +          _LEAF_  =                   14;
16981 +          P_Age  =     36.9473684210526;
16982 +          END;
16983 +        END;
16984 +      END;
16985 +    END;
16986 +  ELSE DO;
16987 +    IF  NOT MISSING(Total_Spend ) AND
16988 +      Total_Spend  <                  498 THEN DO;
16989 +      _NODE_  =                   12;
16990 +      _LEAF_  =                   11;
16991 +      P_Age  =                41.04;
16992 +      END;
16993 +    ELSE DO;
16994 +      IF  NOT MISSING(Total_Spend ) AND
16995 +                     518.075 <= Total_Spend  THEN DO;
16996 +        _NODE_  =                   23;
16997 +        _LEAF_  =                   13;
16998 +        P_Age  =     42.1111111111111;
16999 +        END;
17000 +      ELSE DO;
17001 +        _NODE_  =                   22;
17002 +        _LEAF_  =                   12;
17003 +        P_Age  =                   43;
17004 +        END;
17005 +      END;
17006 +    END;
17007 +  END;
17008 +ELSE DO;
17009 +  _ARBFMT_12 = PUT( G_City , BEST12.);
17010 +   %DMNORMIP( _ARBFMT_12);
17011 +  IF _ARBFMT_12 IN ('1' ) THEN DO;
17012 +    _ARBFMT_12 = PUT( G_Items_Purchased , BEST12.);
17013 +     %DMNORMIP( _ARBFMT_12);
17014 +    IF _ARBFMT_12 IN ('0' ) THEN DO;
17015 +      _NODE_  =                   11;
17016 +      _LEAF_  =                   10;
17017 +      P_Age  =                   33;
17018 +      END;
17019 +    ELSE DO;
17020 +      IF  NOT MISSING(Total_Spend ) AND
17021 +                      800.55 <= Total_Spend  THEN DO;
17022 +        _NODE_  =                   21;
17023 +        _LEAF_  =                    9;
17024 +        P_Age  =                34.96;
17025 +        END;
17026 +      ELSE DO;
17027 +        _NODE_  =                   20;
17028 +        _LEAF_  =                    8;
17029 +        P_Age  =     33.6538461538461;
17030 +        END;
17031 +      END;
17032 +    END;
17033 +  ELSE DO;
17034 +    _ARBFMT_12 = PUT( G_Items_Purchased , BEST12.);
17035 +     %DMNORMIP( _ARBFMT_12);
17036 +    IF _ARBFMT_12 IN ('2' ,'0' ) THEN DO;
17037 +      _ARBFMT_12 = PUT( G_Satisfaction_Level , BEST12.);
17038 +       %DMNORMIP( _ARBFMT_12);
17039 +      IF _ARBFMT_12 IN ('0' ) THEN DO;
17040 +        IF  NOT MISSING(Total_Spend ) AND
17041 +          Total_Spend  <              1435.15 THEN DO;
17042 +          _NODE_  =                   28;
17043 +          _LEAF_  =                    5;
17044 +          P_Age  =                   29;
17045 +          END;
17046 +        ELSE DO;
17047 +          _NODE_  =                   29;
17048 +          _LEAF_  =                    6;
17049 +          P_Age  =                   28;
17050 +          END;
17051 +        END;
17052 +      ELSE DO;
17053 +        _NODE_  =                   19;
17054 +        _LEAF_  =                    7;
17055 +        P_Age  =     26.8823529411764;
17056 +        END;
17057 +      END;
17058 +    ELSE DO;
17059 +      IF  NOT MISSING(Total_Spend ) AND
17060 +                     1170.55 <= Total_Spend  THEN DO;
17061 +        _NODE_  =                   17;
17062 +        _LEAF_  =                    4;
17063 +        P_Age  =                30.14;
17064 +        END;
17065 +      ELSE DO;
17066 +        _ARBFMT_12 = PUT( G_Items_Purchased , BEST12.);
17067 +         %DMNORMIP( _ARBFMT_12);
17068 +        IF _ARBFMT_12 IN ('3' ) THEN DO;
17069 +          _NODE_  =                   27;
17070 +          _LEAF_  =                    3;
17071 +          P_Age  =                   32;
17072 +          END;
17073 +        ELSE DO;
17074 +          IF  NOT MISSING(Total_Spend ) AND
17075 +                         1155.45 <= Total_Spend  THEN DO;
17076 +            _NODE_  =                   35;
17077 +            _LEAF_  =                    2;
17078 +            P_Age  =     31.6923076923077;
17079 +            END;
17080 +          ELSE DO;
17081 +            _NODE_  =                   34;
17082 +            _LEAF_  =                    1;
17083 +            P_Age  =     30.8181818181818;
17084 +            END;
17085 +          END;
17086 +        END;
17087 +      END;
17088 +    END;
17089 +  END;
17090 +
17091 +*****  RESIDUALS R_ *************;
17092 +IF MISSING( Age ) THEN R_Age  = .;
17093 +ELSE R_Age  = Age  - P_Age ;
17094 +
17095 +****************************************************************;
17096 +******          END OF DECISION TREE SCORING CODE         ******;
17097 +****************************************************************;
17098 +
17099 +drop _LEAF_;
NOTE: %INCLUDE (level 1) ending.
17100  run;
 
NOTE: DATA STEP view saved on file EMWS1.TREE_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.VARSEL_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.01 seconds
 
 
17101  quit;
17102  filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
 
NOTE: View EMWS1.TREE_TRAIN.VIEW used (Total process time):
      real time           0.06 seconds
      cpu time            0.01 seconds
 
17104  proc sort data=WORK.EM_USER_REPORT;
17105  by ID VIEW;
17106  run;
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
17107  *------------------------------------------------------------*;
17108  * Tree: Computing metadata for TRAIN data;
17109  *------------------------------------------------------------*;
 
NOTE: View EMWS1.TREE_TRAIN.VIEW used (Total process time):
      real time           0.06 seconds
      cpu time            0.03 seconds
 
17463  data WORK.MODELTEMP_INFO;
17464  set EMWS1.Tree_EMINFO;
17465  where DATA='Tree' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
17466  run;
 
NOTE: There were 0 observations read from the data set EMWS1.TREE_EMINFO.
      WHERE (DATA='Tree') and KEY not in ('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
NOTE: The data set WORK.MODELTEMP_INFO has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
17467  data EMWS1.Tree_EMINFO;
17468  length TARGET KEY $32 DATA $43;
17469  input TARGET KEY DATA $;
17470  cards;
 
NOTE: The data set EMWS1.TREE_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
17474  run;
17475  data EMWS1.Tree_EMINFO;
17476  set EMWS1.Tree_EMINFO WORK.MODELTEMP_INFO;
17477  run;
 
NOTE: There were 3 observations read from the data set EMWS1.TREE_EMINFO.
NOTE: There were 0 observations read from the data set WORK.MODELTEMP_INFO.
NOTE: The data set EMWS1.TREE_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
17478  proc sort data = EMWS1.Tree_EMINFO NOTHREADS;
17479  by TARGET KEY;
17480  run;
 
NOTE: There were 3 observations read from the data set EMWS1.TREE_EMINFO.
NOTE: The data set EMWS1.TREE_EMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
17481  proc sort data = EMWS1.FIMPORT_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
17482  by TARGET KEY;
17483  run;
 
NOTE: There were 1 observations read from the data set EMWS1.FIMPORT_EMINFO.
NOTE: The data set WORK.SORTEDEMINFO has 1 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
17484  proc sort data = EMWS1.Tree_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
17485  by TARGET KEY;
17486  run;
 
NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 3 observations read from the data set EMWS1.TREE_EMINFO.
NOTE: The data set WORK.TEMP_INFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
17487  data EMWS1.Tree_EMINFO;
17488  merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
17489  by TARGET KEY;
17490  run;
 
NOTE: There were 1 observations read from the data set WORK.SORTEDEMINFO.
NOTE: There were 3 observations read from the data set WORK.TEMP_INFO.
NOTE: The data set EMWS1.TREE_EMINFO has 4 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
17491  proc datasets lib=work nolist;
17492  delete TEMP_INFO SORTEDEMINFO;
17493  run;
 
NOTE: Deleting WORK.TEMP_INFO (memtype=DATA).
NOTE: Deleting WORK.SORTEDEMINFO (memtype=DATA).
17494  quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: View EMWS1.TREE_TRAIN.VIEW used (Total process time):
      real time           0.05 seconds
      cpu time            0.01 seconds
 
*------------------------------------------------------------*
* Report Log
Date:                2024年01月07日
Time:                16时36分13秒
*------------------------------------------------------------*
17518  data EMWS1.Tree_EMOUTFIT;
17519  set EMWS1.Tree_EMOUTFIT;
17520  length TargetLabel $200;
17521  label targetLabel = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))";
17522  run;
 
NOTE: Variable TargetLabel is uninitialized.
NOTE: There were 1 observations read from the data set EMWS1.TREE_EMOUTFIT.
NOTE: The data set EMWS1.TREE_EMOUTFIT has 1 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
17523  proc sort data=EMWS1.Tree_EMREPORTFIT nothreads;
17524  by TARGET;
17525  run;
 
NOTE: There were 7 observations read from the data set EMWS1.TREE_EMREPORTFIT.
NOTE: The data set EMWS1.TREE_EMREPORTFIT has 7 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
17526  %let _EMwarndup = 0;
17527  %let _EMtargetdup =;
17528  %let _EMASEtargetdup =;
17529  data _null_;
17530  set EMWS1.Tree_EMOUTFIT;
17531  if .<_ASE_<0.000001 then do;
17532  call symput('_EMwarndup', '1');
17533  call symput('_EMtargetdup', target);
17534  call symput('_EMASEtargetdup', put(_ASE_, best.));
17535  end;
17536  run;
 
NOTE: There were 1 observations read from the data set EMWS1.TREE_EMOUTFIT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
17537  %let EMEXCEPTIONSTRING=;
17538  *------------------------------------------------------------*;
17539  * REPORT: Tree;
17540  *------------------------------------------------------------*;
17541  %let EM_ACTION = REPORT;
17542  %let syscc = 0;
17543  %macro main;
17544
17545    %if %upcase(&EM_ACTION) = CREATE %then %do;
17546      filename temp catalog 'sashelp.emmodl.tree_create.source';
17547      %include temp;
17548      filename temp;
17549
17550      %em_tree_create;
17551    %end;
17552
17553     %else
17554     %if %upcase(&EM_ACTION) = TRAIN %then %do;
17555
17556         filename temp catalog 'sashelp.emmodl.tree_train.source';
17557         %include temp;
17558         filename temp;
17559         %em_tree_train;
17560     %end;
17561
17562    %else
17563    %if %upcase(&EM_ACTION) = SCORE %then %do;
17564      filename temp catalog 'sashelp.emmodl.tree_score.source';
17565      %include temp;
17566      filename temp;
17567
17568      %em_tree_score;
17569
17570    %end;
17571
17572    %else
17573    %if %upcase(&EM_ACTION) = REPORT %then %do;
17574
17575         filename temp catalog 'sashelp.emmodl.tree_report.source';
17576         %include temp;
17577         filename temp;
17578
17579         %em_tree_report;
17580     %end;
17581
17582    %else
17583    %if %upcase(&EM_ACTION) = OPENINT %then %do;
17584
17585         filename temp catalog 'sashelp.emmodl.tree_actions.source';
17586         %include temp;
17587         filename temp;
17588         %EM_TREE_OPENTREEVIEWER;
17589
17590     %end;
17591
17592    %else
17593    %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
17594
17595         filename temp catalog 'sashelp.emmodl.tree_actions.source';
17596         %include temp;
17597         filename temp;
17598         %EM_TREE_CLOSETREEVIEWER;
17599
17600     %end;
17601
17602
17603     %doendm:
17604  %mend main;
17605
17606  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_REPORT.SOURCE.
17608 +%macro em_tree_makePlotDs( multipleTar= );
17610 +  %EM_GETNAME(key=OUTSTATS, type=DATA);
17611 +  %EM_GETNAME(key=OUTNODES, type=DATA);
17612 +  %EM_GETNAME(key=TREE_PLOT, type=DATA);
17613 +  %EM_GETNAME(key=OUTRULES, type=DATA);
17615 +  /* determine if validation statistics will be displayed */
17616 +  %let validflag=N;
17617 +  %if "&EM_PROPERTY_SHOWVALID" eq "Y" %then %do;
17618 +    /* determine if validation data exists */
17619 +    %if &validexist AND ("&EM_PROPERTY_CV" ne "Y") %then %do;
17620 +      %let validflag=Y;
17621 +    %end;
17622 +  %end;
17624 +   /* retrieve name of decmeta even in presence of multiple targets */
17625 +   %let decmeta = ;
17626 +   %if &EM_DEC_DECMETA eq %then %do;
17627 +     data _Target;
17628 +       set &em_data_variableset;
17629 +       where ROLE='TARGET' and USE in('D', 'Y');
17630 +       keep NAME;
17631 +     run;
17632 +     proc sort data=_Target;
17633 +       by NAME;
17634 +     run;
17635 +     proc sort data=EM_TARGETDECINFO;
17636 +       by TARGET;
17637 +     run;
17638 +     data _Target;
17639 +       merge _Target(in=_a) EM_TARGETDECINFO(rename=(TARGET=NAME) );
17640 +       by NAME;
17641 +       if _a then do;
17642 +         call symput('decmeta', trim(DECMETA));
17643 +       end;
17644 +     run;
17645 +     proc delete data=_Target;run;
17646 +   %end;
17647 +   %else %let decmeta = &EM_DEC_DECMETA;
17650 +  /* retrieve targetEvent from decmeta */
17651 +  %let targetEvent=;
17652 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
17653 +    %if %sysfunc(exist(&DECMETA)) %then %do;
17654 +      data _null_;
17655 +       set &DECMETA(where=(_TYPE_="TARGET"));
17656 +       call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
17657 +      run;
17658 +    %end;
17659 +  %end;
17661 +  /* retrieve predicted var for targetEvent from decmeta */
17662 +  %let predTarget=;
17663 +  %let predLvl=;
17664 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
17665 +    %if %sysfunc(exist(&DECMETA)) %then %do;
17666 +      data _null_;
17667 +       set &DECMETA(where=(_TYPE_="PREDICTED" AND LEVEL="&targetEvent"));
17668 +       call symput('predTarget', strip(VARIABLE));
17669 +       call symput('predLvl', strip(LEVEL));
17670 +      run;
17671 +    %end;
17672 +  %end;
17673 +  %else %do;
17674 +    %if %sysfunc(exist(&DECMETA)) %then %do;
17675 +      data _null_;
17676 +       set &DECMETA(where=(_TYPE_="PREDICTED"));
17677 +       call symput('predTarget', strip(VARIABLE));
17678 +      run;
17679 +    %end;
17680 +  %end;
17682 +  /* create BelowText value */
17683 +  data belowtext;
17684 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT="VARIABLE") rename=(character_value=belowtext));
17685 +    keep node belowtext;
17686 +  run;
17688 +  /* relace belowtext with variable label if it exists */
17689 +  data belowtext2;
17690 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT="LABEL") rename=(character_value=belowtextlbl));
17691 +    keep node belowtextlbl;
17692 +  run;
17694 +  proc sort data=belowtext; by node; run;
17695 +  proc sort data=belowtext2; by node; run;
17697 +  data belowtext;
17698 +    merge belowtext belowtext2(in=_a);
17699 +    by node;
17700 +    if _a then belowtext=belowtextlbl;
17701 +    keep node belowtext;
17702 +  run;
17704 +  /* create AboveText value */
17705 +  data abovetext;
17706 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT in ("INTERVAL", "ORDINAL", "NOMINAL")) );
17707 +  run;
17708 +  proc sort data=abovetext; by node numeric_value; run;
17710 +  %let sp_precision = %sysevalf(1 / 10**&EM_PROPERTY_SPLITPRECISION);
17711 +  data abovetext;
17712 +    set abovetext(rename=(node=parent));
17713 +    by parent numeric_value;
17714 +    retain abovetext tempstring flag branch origval origchar ;
17715 +    length abovetext $256;
17716 +    length tempstring origchar $64;
17718 +    if STAT in ("INTERVAL", "ORDINAL") then do;
17719 +      if first.parent then do;
17720 +        if missing(character_value) then do;
17721 +          numeric_value = round(numeric_value, &sp_precision);
17722 +          abovetext = "< "||strip(NUMERIC_VALUE);
17723 +          branch = 1;
17724 +          origval = numeric_value;
17725 +          output;
17726 +        end;
17727 +        else do;
17728 +          abovetext = "< "||strip(CHARACTER_VALUE);
17729 +          branch = 1;
17730 +          origchar = character_value;
17731 +          output;
17732 +        end;
17734 +        if first.parent AND last.parent then do;
17735 +          if missing(character_value) then do;
17736 +            numeric_value = round(numeric_value, &sp_precision);
17737 +            branch = branch + 1;
17738 +            abovetext = ">= "||strip(NUMERIC_VALUE);
17739 +            output;
17740 +          end;
17741 +          else do;
17742 +            branch = branch + 1;
17743 +            abovetext = ">= "||strip(CHARACTER_VALUE);
17744 +            output;
17745 +          end;
17746 +        end;
17747 +      end;
17748 +      else if last.parent then do;
17749 +        if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
17750 +          if missing(character_value) then do;
17751 +            numeric_value = round(numeric_value, &sp_precision);
17752 +            abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
17753 +          end;
17754 +          else do;
17755 +            abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
17756 +          end;
17757 +          branch = branch + 1;
17758 +          output;
17760 +          if missing(character_value) then do;
17761 +            numeric_value = round(numeric_value, &sp_precision);
17762 +            abovetext = ">= "||strip(NUMERIC_VALUE);
17763 +          end;
17764 +          else do;
17765 +            abovetext = ">= "||strip(CHARACTER_VALUE);
17766 +          end;
17767 +          branch = branch + 1;
17768 +          output;
17769 +        end;
17770 +        else do;
17771 +          if missing(character_value) then do;
17772 +            numeric_value = round(numeric_value, &sp_precision);
17773 +            abovetext = ">= "||strip(NUMERIC_VALUE);
17774 +          end;
17775 +          else do;
17776 +            abovetext = ">= "||strip(CHARACTER_VALUE);
17777 +          end;
17778 +          branch = branch + 1;
17779 +          output;
17780 +        end;
17781 +      end;
17782 +      else do;
17783 +        if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
17784 +          if missing(character_value) then do;
17785 +            numeric_value = round(numeric_value,&sp_precision);
17786 +            abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
17787 +            origval = numeric_value;
17788 +          end;
17789 +          else do;
17790 +            abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
17791 +            origchar = character_value;
17792 +          end;
17793 +          branch = branch + 1;
17794 +          output;
17796 +        end;
17797 +        else do;
17798 +          if missing(character_value) then do;
17799 +            numeric_value = round(numeric_value, &sp_precision);
17800 +            abovetext = ">= "||strip(NUMERIC_VALUE);
17801 +            origval = numeric_value;
17802 +          end;
17803 +          else do;
17804 +            abovetext = ">= "||strip(CHARACTER_VALUE);
17805 +            origval = character_value;
17806 +          end;
17807 +          branch = branch + 1;
17808 +          output;
17809 +        end;
17810 +      end;
17811 +    end;
17812 +    else do;
17813 +       if first.numeric_value then do;
17814 +         flag = 0;
17815 +         abovetext = strip(CHARACTER_VALUE);
17816 +         branch = numeric_value;
17817 +         if first.numeric_value AND last.numeric_value then do;
17818 +           output;
17819 +         end;
17820 +       end;
17821 +       else if last.numeric_value then do;
17822 +         if flag=0 then do;
17823 +           tempstring = strip(abovetext)||", "||strip(CHARACTER_VALUE);
17824 +           length = length(strip(tempstring));
17825 +           if length < 32 then do;
17826 +             abovetext = strip(tempstring);
17827 +           end;
17828 +           else do;
17829 +             abovetext = strip(abovetext)||", ...";
17830 +             flag = 1;
17831 +           end;
17832 +         end;
17833 +         branch = numeric_value;
17834 +         output;
17835 +       end;
17836 +       else do;
17837 +         if flag=0 then do;
17838 +           tempstring = strip(abovetext)||", "||strip(CHARACTER_VALUE);
17839 +           length = length(strip(tempstring));
17840 +           if length < 32 then do;
17841 +             abovetext = strip(tempstring);
17842 +           end;
17843 +           else do;
17844 +             abovetext = strip(abovetext)||", ...";
17845 +             flag=1;
17846 +           end;
17847 +         end;
17848 +         branch = numeric_value;
17849 +       end;
17850 +    end;
17851 +    keep parent branch abovetext;
17852 +  run;
17854 +  /* MIssing value to abovetext */
17855 +  data tempmissing;
17856 +    set &EM_USER_OUTRULES;
17857 +    if ((ROLE="PRIMARY") AND (STAT in ("MISSING")));
17858 +    rename node=parent numeric_value=branch character_value=misschar;
17859 +  run;
17862 +  proc sort data=abovetext; by parent branch; run;
17863 +  proc sort data=tempmissing; by parent branch; run;
17864 +  proc sort data=&EM_USER_OUTNODES out=tempoutnodes; by parent branch; run;
17866 +  data tempoutnodes;
17867 +    merge abovetext tempoutNodes(drop=abovetext) tempmissing(in=_a);
17868 +    by parent branch;
17869 +    length traintotal validtotal 8;
17870 +    retain traintotal validtotal;
17872 +    if _a then do;
17873 +      if ^MISSING(abovetext) then do;
17874 +        abovetext= strip(abovetext)||" %sysfunc(sasmsg(sashelp.dmine, tree_ormiss_vlabel, noquote))";
17875 +      end;
17876 +      else do;
17877 +        abovetext = " %sysfunc(sasmsg(sashelp.dmine, tree_missonly_vlabel, noquote))";
17878 +      end;
17879 +    end;
17880 +    if MISSING(abovetext) then abovetext="%sysfunc(sasmsg(sashelp.dmine, tree_nonmiss_vlabel, noquote))";
17882 +    if node=1 then do;
17883 +      traintotal = N;
17884 +      validtotal=VN;
17885 +    end;
17887 +    drop role rank stat misschar belowtext;
17888 +  run;
17889 +  proc sort data=tempoutnodes; by node; run;
17890 +  proc sort data=belowtext; by node; run;
17892 +  data tempoutnodes;
17893 +    merge tempoutnodes belowtext;
17894 +    by node;
17896 +  run;
17898 +  /* determine if adjusted counts exists; if so, use these vs true counts */
17899 +  %let adjusted = N;
17900 +  %let npriors = 0;
17901 +  data _null_ ;
17902 +    set &EM_USER_outstats(where=(STATNAME="NPRIORS")) end=eof ;
17903 +    if eof then do ;
17904 +      call symput("npriors" , strip(put(_N_,best.))) ;
17905 +    end;
17906 +  run;
17907 +  %if &npriors gt 0 %then %let adjusted=Y;
17910 +  /* create a table with targetUsed and targetLevel columns for each node */
17911 +  data temptarmeta;
17912 +    set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL'
17913 +    %if &multipleTar eq N %then %do;
17914 +      AND USE in ('D', 'Y')
17915 +    %end;
17916 +    ));
17917 +    length TARGET $32;
17918 +    Target=name;
17919 +    keep target level;
17920 +  run;
17922 +  %if &multipleTar eq Y %then %do;
17923 +    data temptargetused;
17924 +      set &EM_USER_OUTSTATS(where=(STATNAME="TARGET"));
17925 +      keep node target;
17926 +    run;
17927 +    proc sort data=temptargetused; by target; run;
17928 +    proc sort data=temptarmeta; by target; run;
17929 +    data temptargetused;
17930 +      merge temptargetused(in=_a) temptarmeta(in=_b rename=(level=tarlevel));
17931 +      by target;
17932 +      if _a and _b;
17933 +    run;
17934 +  %end;
17935 +  %else %do;
17936 +    data temptargetused;
17937 +      set &EM_USER_OUTSTATS;
17938 +      length target $32 tarlevel $10;
17939 +      target="%EM_TARGET";
17940 +      tarlevel="%EM_TARGET_LEVEL";
17941 +      keep node target tarlevel;
17942 +    run;
17943 +    proc sort data=temptargetused nodupkey; by node; run;
17944 +  %end;
17946 +  /* merge this infomration back into outstats, keeping only stats for the target used in the tree */
17947 +  proc sort data=&EM_USER_OUTSTATS out=tempoutstats; by node; run;
17948 +  proc sort data=temptargetused; by node; run;
17951 +  /* create tables for all interval targets as well as all class targets */
17952 +  data tempinterval tempclass;
17953 +    merge tempoutstats temptargetused( rename=(target=targetused));
17954 +    by node;
17955 +    %if "&multipleTar" eq "Y" %then %do;
17956 +      if ((missing(Target)) OR (target=targetused ));
17957 +    %end;
17959 +    if tarlevel="INTERVAL" then output tempinterval;
17960 +    else output tempclass;
17961 +  run;
17963 +  /* iniitalize intTarget and classTarget flags */
17964 +  %let em_intNobs =0;
17965 +  %let em_classNobs = 0;
17966 +  %let em_intTarget= N;
17967 +  %let em_classTarget= N;
17969 +  proc sql;
17970 +    reset noprint;
17971 +    select count(*) into :em_intNobs from tempinterval;
17972 +  quit;
17973 +  proc sql;
17974 +    reset noprint;
17975 +    select count(*) into :em_classNobs from tempclass;
17976 +  quit;
17978 +  %if &em_intNobs gt 0 %then %let em_intTarget=Y;
17979 +  %if &em_classNobs gt 0 %then %let em_classTarget=Y;
17981 +  /* retrieve all information for interval targets */
17982 +  %if &em_intTarget eq Y %then %do;
17984 +    /* determine if leaf variable exists */
17985 +    %let dsid=%sysfunc(open(tempinterval,i));
17986 +    %let leafexists=%sysfunc(varnum(&dsid,LEAF));
17987 +    %let rc=%sysfunc(close(&dsid));
17989 +    proc transpose data=tempinterval
17990 +      %if &leafexists %then %do;
17991 +        (drop=leaf)
17992 +      %end;
17993 +      %if &validexist %then %do;
17994 +       out=tempinterval(keep=NODE N VALID: N PREDICTION VALID: PREDICTION RASE VALID: RASE rename=(VALID__N=VN VALID__PREDICTION=VPREDICTION VALID__RASE=VRASE)) ;
17995 +      %end;
17996 +      %else %do;
17997 +         out=tempinterval(keep=NODE N PREDICTION RASE ) ;
17998 +      %end;
17999 +      by node;
18000 +      id statname;
18001 +    run;
18002 +    data tempinterval;
18003 +      set tempinterval;
18004 +      if missing(N) then delete;
18005 +    run;
18006 +  %end;
18008 +  /* retrieve all information for class targets */
18009 +  %if &em_classTarget eq Y %then %do;
18010 +    proc sort data=tempclass; by node category; run;
18011 +    %if &validflag eq N %then %do;
18012 +      data tempn(keep=NODE STATVALUE) temppredict(Keep=NODE CATEGORY) tempprob(keep=NODE STATVALUE CATEGORY TARGET )
18013 +           tempprofit(KEEP=NODE STATVALUE CATEGORY  ) temploss(KEEP=NODE STATVALUE CATEGORY  );
18014 +    %end;
18015 +    %else %do;
18016 +     data tempn(keep=NODE STATVALUE STATNAME) temppredict(Keep=NODE CATEGORY) tempprob(keep=NODE STATVALUE CATEGORY TARGET ) tempvprob(keep=NODE STATVALUE CATEGORY TARGET )
18017 +          tempprofit(KEEP=NODE STATVALUE STATNAME CATEGORY ) temploss(KEEP=NODE STATVALUE STATNAME CATEGORY );
18018 +    %end;
18019 +      set tempclass;
18021 +      %if &validflag eq N %then %do;
18022 +        %if "&adjusted" eq "N" %then %do;
18023 +          if statname="N" then output tempn;
18024 +        %end;
18025 +        %else %do;
18026 +          if statname="NPRIORS" then output tempn;
18027 +        %end;
18028 +        else if statname="PREDICTION" then output temppredict;
18029 +        else if statname="PROBABILITY" then output tempprob;
18030 +        else if statname="ALTERNATIVE PROFIT" then output tempprofit;
18031 +        else if statname="ALTERNATIVE LOSS" then output temploss;
18032 +      %end;
18033 +      %else %do;
18034 +        %if "&adjusted" eq "N" %then %do;
18035 +          if ((statname="N") OR (statname="VALID: N")) then output tempn;
18036 +        %end;
18037 +        %else %do;
18038 +          if ((statname="NPRIORS") or (statname="VALID: NPRIORS") ) then output tempn;
18039 +        %end;
18040 +        else if statname="PREDICTION" then output temppredict;
18041 +        else if statname="PROBABILITY" then output tempprob;
18042 +        else if statname="VALID: PROBABILITY" then output tempvprob;
18043 +        else if ((statname="ALTERNATIVE PROFIT") or (statname="VALID: ALTERNATIVE PROFIT")) then output tempprofit;
18044 +        else if ((statname="ALTERNATIVE LOSS") OR (statname="VALID: ALTERNATIVE LOSS")) then output temploss;
18045 +      %end;
18046 +    run;
18049 +    /* determine if profit/loss exists in tempprofit */
18050 +    %let em_profitflag=0;
18051 +    %let em_lossflag=0;
18052 +    proc sql;
18053 +      reset noprint;
18054 +      select count(*) into :em_profitflag from tempprofit;
18055 +    quit;
18056 +    proc sql;
18057 +      reset noprint;
18058 +      select count(*) into :em_lossflag from temploss;
18059 +    quit;
18061 +    %if &validFlag eq Y %then %do;
18062 +      proc transpose data=tempn
18063 +        %if "&adjusted" eq "N" %then %do;
18064 +           out=tempn(keep=node N VALID__N rename=(VALID__N=VN));
18065 +        %end;
18066 +        %else %do;
18067 +           out=tempn(keep=node NPRIORS VALID__NPRIORS rename=( VALID__NPRIORS=VNPRIORS));
18068 +        %end;
18069 +        by node;
18070 +        id statname;
18071 +      run;
18072 +      %if &em_profitflag ne 0 %then %do;
18073 +        proc transpose data=tempprofit out=tempprofit;
18074 +          by node category;
18075 +          id statname ;
18076 +        run;
18077 +      %end;
18078 +      %if &em_lossflag ne 0 %then %do;
18079 +        proc transpose data=temploss out=temploss;
18080 +          by node category;
18081 +          id statname ;
18082 +        run;
18083 +      %end;
18084 +      data tempprob;
18085 +        merge tempprob tempvprob(rename=(statvalue=vstatvalue));
18086 +        by node
18087 +        %if &multipleTar eq Y %then %do;
18088 +          target
18089 +        %end;
18090 +        category;
18091 +      run;
18092 +    %end;
18094 +    /* store percentcorrect value */
18095 +    data temppredict;
18096 +      merge tempprob temppredict(in=_a);
18097 +      by node category;
18098 +      if _a then do;
18099 +        percentCorrect = statvalue;
18100 +        %if &validFlag eq Y %then %do;
18101 +          vpercentCorrect= vstatvalue;
18102 +        %end;
18103 +      end;
18104 +      label percentCorrect="%sysfunc(sasmsg(sashelp.dmine, rpt_percentcorrect_vlabel, noquote))"
18105 +      %if &validFlag eq Y %then %do;
18106 +         vpercentCorrect="%sysfunc(sasmsg(sashelp.dmine, rpt_vpercentcorrect_vlabel, noquote))"
18107 +      %end;
18108 +      ;
18109 +      if missing(percentCorrect) then delete;
18110 +      drop target;
18111 +    run;
18113 +    /* build profittext */
18114 +    %if ((&em_profitflag ne 0) OR (&em_lossflag ne 0)) %then %do;
18115 +      data tempprofittext(keep= node profittext profitloss);
18116 +        length profittext $800 profitloss 8.;
18117 +        retain profittext profitloss;
18119 +        merge tempprob
18120 +        %if &em_profitflag ne 0 %then %do;
18121 +          tempprofit
18122 +        %end;
18123 +        %else %if &em_lossflag ne 0 %then %do;
18124 +          temploss
18125 +        %end;
18126 +        ;
18127 +        by node category;
18129 +        /* EVENT ONLY IS NOT AVAILALBE FOR MULTIPLE TARGETS AS ONLY PRIMARY TARGET IS IN EM_TARGETDECINFO TO RETRIEVE EVENT LEVEL */
18130 +        %let profittype = &EM_PROPERTY_PROFITLOSS;
18131 +        %if ((&multipleTar eq Y) AND ("&EM_PROPERTY_PROFITLOSS" eq "EVENT"))  %then %do;
18132 +          %let profittype = ALL;
18133 +        %end;
18135 +        /* create the profitloss variable for nodecolor if selected */
18136 +        label profitloss="%sysfunc(sasmsg(sashelp.dmine, rpt_profitloss_vlabel, noquote))";
18138 +        %if "&profittype" eq "ALL" %then %do;
18139 +          if strip(CATEGORY)="&targetEvent" then do;
18140 +            profitloss=statvalue;
18141 +          end;
18142 +          if first.node then do;
18143 +            %if &validFlag eq N %then %do;
18144 +             %if &em_profitflag ne 0 %then %do;
18145 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18146 +             %end;
18147 +             %if &em_lossflag ne 0 %then %do;
18148 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18149 +             %end;
18150 +            %end;
18151 +            %else %do;
18152 +             %if &em_profitflag ne 0 %then %do;
18153 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)
18153!+;
18154 +             %end;
18155 +             %if &em_lossflag ne 0 %then %do;
18156 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION);
18157 +             %end;
18158 +            %end;
18159 +          end;
18160 +          else if last.node then do;
18161 +            %if &validFlag eq N %then %do;
18162 +             %if &em_profitflag ne 0 %then %do;
18163 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18164 +             %end;
18165 +             %if &em_lossflag ne 0 %then %do;
18166 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18167 +             %end;
18168 +             /*if CATEGORY="&targetEvent" then do;
18169 +               profitloss=statvalue;
18170 +             end;*/
18171 +            %end;
18172 +            %else %do;
18173 +             %if &em_profitflag ne 0 %then %do;
18174 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT,
18174!+14.&EM_PROPERTY_SPLITPRECISION);
18175 +                if CATEGORY="&targetEvent" then do;
18176 +                 profitloss=ALTERNATIVE_PROFIT;
18177 +                end;
18178 +             %end;
18179 +             %if &em_lossflag ne 0 %then %do;
18180 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS,
18180!+14.&EM_PROPERTY_SPLITPRECISION);
18181 +                if CATEGORY="&targetEvent" then do;
18182 +                  profitloss=ALTERNATIVE_LOSS;
18183 +                end;
18184 +             %end;
18185 +            %end;
18186 +            output;
18187 +          end;
18188 +          else do;
18189 +            %if &validFlag eq N %then %do;
18190 +             %if &em_profitflag ne 0 %then %do;
18191 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18192 +             %end;
18193 +             %if &em_lossflag ne 0 %then %do;
18194 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18195 +             %end;
18196 +            %end;
18197 +            %else %do;
18198 +             %if &em_profitflag ne 0 %then %do;
18199 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT,
18199!+14.&EM_PROPERTY_SPLITPRECISION);
18200 +             %end;
18201 +             %if &em_lossflag ne 0 %then %do;
18202 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS,
18202!+14.&EM_PROPERTY_SPLITPRECISION);
18203 +             %end;
18204 +            %end;
18205 +          end;
18206 +        %end;
18207 +        %else %if (("&profittype" eq "EVENT") AND ("&targetEvent" ne "" )) %then %do;
18208 +          if strip(CATEGORY) = "&targetevent" then do;
18209 +            %if &validFlag eq N %then %do;
18210 +             %if &em_profitflag ne 0 %then %do;
18211 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18212 +             %end;
18213 +             %if &em_lossflag ne 0 %then %do;
18214 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18215 +             %end;
18216 +             profitloss=statvalue;
18217 +            %end;
18218 +            %else %do;
18219 +             %if &em_profitflag ne 0 %then %do;
18220 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)
18220!+;
18221 +                profitloss=ALTERNATIVE_PROFIT;
18222 +             %end;
18223 +             %if &em_lossflag ne 0 %then %do;
18224 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION);
18225 +                profitloss=ALTERNATIVE_LOSS;
18226 +             %end;
18227 +            %end;
18228 +            output;
18229 +          end;
18230 +        %end;
18231 +        %else %if (("&profittype" eq "NONE") AND ("&targetEvent" ne "" )) %then %do;
18232 +          if strip(CATEGORY) = "&targetevent" then do;
18233 +            %if &validFlag eq N %then %do;
18234 +             profitloss=statvalue;
18235 +            %end;
18236 +            %else %do;
18237 +             %if &em_profitflag ne 0 %then %do;
18238 +                profitloss=ALTERNATIVE_PROFIT;
18239 +             %end;
18240 +             %if &em_lossflag ne 0 %then %do;
18241 +                profitloss=ALTERNATIVE_LOSS;
18242 +             %end;
18243 +            %end;
18244 +            output;
18245 +          end;
18246 +        %end;
18247 +      run;
18248 +    %end;
18250 +    data tempprob(keep= node probtext);
18251 +      length probtext $800;
18252 +      retain probtext;
18253 +      set tempprob ;
18254 +      by node;
18256 +      /* EVENT ONLY IS NOT AVAILALBE FOR MULTIPLE TARGETS AS ONLY PRIMARY TARGET IS IN EM_TARGETDECINFO TO RETRIEVE EVENT LEVEL */
18257 +      %let probtype = &EM_PROPERTY_TARGET;
18258 +      %if ((&multipleTar eq Y) AND ("&EM_PROPERTY_TARGET" eq "EVENT"))  %then %do;
18259 +        %let probtype = ALL;
18260 +      %end;
18262 +      %if "&probtype" eq "ALL" %then %do;
18263 +        if first.node then do;
18264 +          %if &validFlag eq N %then %do;
18265 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
18266 +          %end;
18267 +          %else %do;
18268 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
18269 +          %end;
18270 +        end;
18271 +        else if last.node then do;
18272 +          %if &validFlag eq N %then %do;
18273 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
18274 +          %end;
18275 +          %else %do;
18276 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
18277 +          %end;
18278 +          output;
18279 +        end;
18280 +        else do;
18281 +          %if &validFlag eq N %then %do;
18282 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
18283 +          %end;
18284 +          %else %do;
18285 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
18286 +          %end;
18287 +        end;
18288 +      %end;
18289 +      %else %if (("&probtype" eq "EVENT") AND ("&targetEvent" ne "" )) %then %do;
18290 +        if strip(CATEGORY) = "&targetevent" then do;
18291 +          %if &validFlag eq N %then %do;
18292 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
18293 +          %end;
18294 +          %else %do;
18295 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
18296 +          %end;
18297 +          output;
18298 +        end;
18299 +      %end;
18300 +      %else %if "&probtype" eq "NONE" %then %do;
18301 +        if last.node then do;
18302 +          output;
18303 +        end;
18304 +      %end;
18305 +    run;
18306 +  %end;
18308 +  proc sort data=tempoutnodes out=tempoutnodes; by node; run;
18310 +  %let oldexists=0;
18311 +  %if %sysfunc(exist(&EM_USER_TREE_PLOT)) %then %do;
18312 +     data old_tree_plot;
18313 +        set &EM_USER_TREE_PLOT(keep=node nodecolor);
18314 +        rename nodecolor=oldnodecolor;
18315 +     run;
18317 +     proc sort data=old_tree_plot;
18318 +        by node;
18319 +     run;
18321 +     %let oldexists=1;
18322 +  %end;
18324 +  data &EM_USER_TREE_PLOT;
18325 +    length textall $800;
18326 +    merge tempoutnodes temptargetused
18328 +    %if &em_intTarget eq Y %then %do;
18329 +      tempinterval
18330 +    %end;
18332 +    %if &em_classTarget eq Y %then %do;
18334 +      %if &validFlag eq N %then %do;
18335 +        tempn(rename=(statvalue=N))
18336 +      %end;
18337 +      %else %do;
18338 +        tempn
18339 +      %end;
18341 +      temppredict tempprob
18343 +      %if ((&em_profitflag ne 0) OR (&em_lossflag ne 0)) %then %do;
18344 +        tempprofittext
18345 +      %end;
18346 +    %end;
18347 +    ;
18348 +    by node;
18350 +    /* build nodetext based on user selection */
18351 +    textall="";
18353 +    %if &em_intTarget eq Y %then %do;
18354 +    if tarlevel="INTERVAL" then do;
18355 +      /* Nodeid */
18356 +      %if "&EM_PROPERTY_SHOWNODEID" eq "Y" %then %do;
18357 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_nodeId_vlabel, noquote )): "||"09"x||strip(Node);
18358 +      %end;
18360 +      /* Target identifier if multiple targets are used */
18361 +      %if "&multipleTar" eq "Y" %then %do;
18362 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_target_title, noquote, )) "||"09"x||strip(target);
18363 +      %end;
18365 +      %if &validFlag eq Y %then %do;
18366 +         /* Column labels displayed in validflag eq Y only */
18367 +         %if (("&EM_PROPERTY_AVG" eq "Y") OR ("&EM_PROPERTY_RASE" eq "Y") OR ("&EM_PROPERTY_COUNT" eq "Y")) %then %do;
18368 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rptstatistic_vlabel, noquote)) "||"09"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_train_vlabel , noquote ))" ||"09"x|| "%sysfunc(sasmsg(sashelp.dmine, rpt_validate_vlabel ,
18368!+noquote ))";
18369 +         %end;
18371 +         /* Average values */
18372 +         %if "&EM_PROPERTY_AVG" eq "Y" %then %do;
18373 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote)): "||"09"x||put(PREDICTION, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VPREDICTION, 14.&EM_PROPERTY_SPLITPRECISION);
18374 +         %end;
18376 +         /* RASE */
18377 +         %if "&EM_PROPERTY_RASE" eq "Y" %then %do;
18378 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rase_vlabel, noquote)): "||"09"x||put(RASE, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VRASE, 14.&EM_PROPERTY_SPLITPRECISION);
18379 +         %end;
18381 +         /* Count */
18382 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
18383 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(N)||"09"x||strip(VN);
18384 +         %end;
18385 +      %end;
18386 +      %else %do;
18387 +         /* Average values */
18388 +         %if "&EM_PROPERTY_AVG" eq "Y" %then %do;
18389 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote)): "||"09"x||put(PREDICTION, 14.&EM_PROPERTY_SPLITPRECISION);
18390 +         %end;
18392 +         /* RASE */
18393 +         %if "&EM_PROPERTY_RASE" eq "Y" %then %do;
18394 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rase_vlabel, noquote)): "||"09"x||put(RASE, 14.&EM_PROPERTY_SPLITPRECISION);
18395 +         %end;
18397 +         /* Count */
18398 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
18399 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(N);
18400 +         %end;
18401 +      %end;
18403 +      /* nodecolor */
18404 +      %if "&EM_PROPERTY_INTCOLORBY" eq "AVG" %then %do;
18405 +        nodecolor=PREDICTION;
18406 +      %end;
18407 +      %else %if "&EM_PROPERTY_INTCOLORBY" eq "RASE" %then %do;
18408 +        nodecolor=RASE;
18409 +      %end;
18410 +      %else %if "&EM_PROPERTY_INTCOLORBY" eq "SINGLE" %then %do;
18411 +        nodecolor=1;
18412 +      %end;
18414 +    end;
18415 +    %end;
18416 +    %if &em_classTarget eq Y %then %do;
18417 +    if tarlevel^="INTERVAL" then  do;
18419 +      /* Nodeid */
18420 +      %if "&EM_PROPERTY_SHOWNODEID" eq "Y" %then %do;
18421 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_nodeId_vlabel, noquote )): "||"09"x||strip(Node);
18422 +      %end;
18423 +      /* Target identifier if multiple targets are used */
18424 +      %if "&multipleTar" eq "Y" %then %do;
18425 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_target_title, noquote, )) "||"09"x||strip(target);
18426 +      %end;
18428 +      /* Predicted values */
18429 +      %if "&EM_PROPERTY_PRED" eq "Y" %then %do;
18430 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_pls_score_predvalue, noquote, )): "||"09"x||strip(CATEGORY);
18431 +      %end;
18433 +      /* Column labels displayed in validflag eq Y only */
18434 +      %if "&ValidFlag" eq "Y" %then %do;
18435 +        %if (("&EM_PROPERTY_TARGET" ne "NONE") OR ("&EM_PROPERTY_PROFITLOSS" ne "NONE") OR ("&EM_PROPERTY_PERCENTCORRECT" eq "Y") OR ("&EM_PROPERTY_COUNT" eq "Y")) %then %do;
18436 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rptstatistic_vlabel, noquote)) "||"09"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_train_vlabel , noquote ))" ||"09"x|| "%sysfunc(sasmsg(sashelp.dmine, rpt_validate_vlabel ,
18436!+noquote ))";
18437 +        %end;
18438 +      %end;
18440 +      /* Target Values */
18441 +      %if "&EM_PROPERTY_TARGET" ne "NONE" %then %do;
18442 +        textall=strip(textall)||"0A"x||strip(probtext);
18443 +      %end;
18445 +      /* include profit or loss for all target levels */
18446 +      %if ( "&EM_PROPERTY_PROFITLOSS" ne "NONE" AND ((&em_profitflag ne 0) OR (&em_lossflag ne 0))) %then %do;
18447 +        textall=strip(textall)||"0A"x||strip(profittext);
18448 +      %end;
18450 +      %if &validFlag eq N %then %do;
18451 +        /* Percent Correct */
18452 +        %if "&EM_PROPERTY_PERCENTCORRECT" eq "Y" %then %do;
18453 +          textall=strip(textall)||"0A"x||"Percent Correct: "||"09"x||strip(put(percentcorrect, percent10.2));
18454 +        %end;
18456 +         /* Count */
18457 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
18458 +          %if "&adjusted" eq "N" %then %do;
18459 +            textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(N, best12.));
18460 +          %end;
18461 +          %else %do;
18462 +            textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(NPRIORS, 15.&EM_PROPERTY_SPLITPRECISION));
18463 +          %end;
18464 +         %end;
18465 +      %end;
18466 +      %else %do;
18467 +        /* Percent Correct */
18468 +        %if "&EM_PROPERTY_PERCENTCORRECT" eq "Y" %then %do;
18469 +          textall=strip(textall)||"0A"x||"Percent Correct: "||"09"x||strip(put(percentcorrect, percent10.2))||"09"x||strip(put(vpercentcorrect, percent10.2));
18470 +        %end;
18472 +         /* Count */
18473 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
18474 +          %if "&adjusted" eq "N" %then %do;
18475 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(N, best12.))||"09"x||strip(put(VN, best12.));
18476 +          %end;
18477 +          %else %do;
18478 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(NPRIORS,15.&EM_PROPERTY_SPLITPRECISION))||"09"x||strip(put(VNPRIORS,15.&EM_PROPERTY_SPLITPRECISION));
18479 +          %end;
18480 +         %end;
18481 +      %end;
18483 +      /* nodecolor */
18484 +      %if "&EM_PROPERTY_CLASSCOLORBY" eq "PERCENTEVENT" %then %do;
18485 +       %if &multipleTar ne Y %then %do;
18486 +        nodecolor=&predTarget;
18487 +       %end;
18488 +       %else %do;
18489 +         nodecolor=percentcorrect;
18490 +       %end;
18491 +      %end;
18492 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "PERCENTCORRECT" %then %do;
18493 +        nodecolor=percentcorrect;
18494 +      %end;
18495 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "SINGLE" %then %do;
18496 +        nodecolor=1;
18497 +      %end;
18498 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "PROFITLOSS" %then %do;
18499 +        %if ((&em_profitflag eq 0) AND (&em_lossflag eq 0)) %then %do;
18500 +          nodecolor=percentcorrect;
18501 +        %end;
18502 +        %else %do;
18503 +          nodecolor=profitloss;
18504 +        %end;
18505 +      %end;
18507 +    end;
18508 +    %end;
18509 +    %if &em_intTarget eq Y %then %do;
18510 +     drop  PREDICTION  TARGET TARLEVEL
18511 +     %if &ValidFlag eq Y %then %do;
18512 +         VPREDICTION
18513 +     %end;
18514 +     ;
18515 +    %end;
18516 +    %if &em_classTarget eq Y %then %do;
18517 +     drop CATEGORY PROBTEXT  TARGET TARLEVEL STATVALUE
18518 +     %if &ValidFlag eq Y %then %do;
18519 +         VSTATVALUE
18520 +     %end;
18521 +     ;
18522 +    %end;
18524 +  run;
18526 +  /* add leaf index information to plotds - based on primary target only*/
18527 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
18528 +    data tempprob(keep=node statname statvalue rename=(statvalue=&predTarget));
18529 +      set &EM_USER_OUTSTATS;
18530 +      if ((statname="PROBABILITY"
18531 +      %if &validexist %then %do;
18532 +       or statname="VALID: PROBABILITY"
18533 +      %end;
18534 +      ) AND (CATEGORY="&TARGETEVENT")
18535 +      %if "&multipleTar" eq "Y" %then %do;
18536 +        AND (Target="%EM_TARGET")
18537 +      %end;
18538 +      );
18539 +    run;
18541 +    %if &validexist %then %do;
18542 +      proc sort data=tempprob; by node; run;
18543 +      %let vpredTarget = V%substr(&predTarget, 2);
18544 +      proc transpose data=tempprob out=tempprob(keep=NODE PROBABILITY VALID__PROBABILITY rename=(PROBABILITY=&predTarget VALID__PROBABILITY=&vpredTarget));
18545 +         by node;
18546 +         id statname;
18547 +      run;
18548 +    %end;
18549 +  %end;
18550 +  %else %do;
18551 +    data tempprob(keep=node statname statvalue rename=(statvalue=&predTarget));
18552 +      set &EM_USER_OUTSTATS;
18553 +      if ((statname="PREDICTION"
18554 +      %if &validexist %then %do;
18555 +       or statname="VALID: PREDICTION"
18556 +      %end;
18557 +      )
18558 +      %if "&multipleTar" eq "Y" %then %do;
18559 +        AND (Target="%EM_TARGET")
18560 +      %end;
18561 +      );
18562 +    run;
18563 +    %if &validexist %then %do;
18564 +      proc sort data=tempprob; by node; run;
18565 +      %let vpredTarget = V%substr(&predTarget, 2);
18566 +      proc transpose data=tempprob out=tempprob(keep=NODE PREDICTION VALID__PREDICTION rename=(PREDICTION=&predTarget VALID__PREDICTION=&vpredTarget));
18567 +         by node;
18568 +         id statname;
18569 +      run;
18570 +    %end;
18571 +  %end;
18573 +  proc sort data=tempprob; by node; run;
18574 +  data tempoutnodes;
18575 +    merge tempoutnodes tempprob;
18576 +    by node;
18577 +  run;
18579 +  proc sort data=tempoutnodes out=tempnodes; by descending &predTarget; run;
18580 +  data tempnodes;
18581 +    retain traintotal validtotal;
18582 +    set tempnodes(where=(leaf ne . ));
18583 +    tprob=round(&predTarget, .01);
18584 +    %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
18585 +      percevent_train=round(tprob*100, .01);
18586 +    %end;
18587 +    %else %do;
18588 +      percevent_train=tprob;
18589 +    %end;
18591 +    perc_train=round((n/traintotal)*100, 0.01);
18592 +    /* leafwidth already has a *10 multiplier */
18593 +    if missing(perc_train) then perc_train = round(linkwidth*10, 0.01);
18595 +    %if &validexist %then %do;
18596 +      %let vpredTarget = V%substr(&predTarget,2);
18597 +      vprob=round(&vpredTarget, .01);
18598 +      %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
18599 +        percevent_valid=round(vprob*100, .01);
18600 +      %end;
18601 +      %else %do;
18602 +        percevent_valid=vprob;
18603 +      %end;
18604 +      perc_valid=round((vn/validtotal)*100, .01);
18605 +    %end;
18607 +    index=_N_;
18608 +    keep node index tprob perc_train percevent_train
18609 +    %if &validexist %then %do;
18610 +        vprob percevent_valid perc_valid
18611 +    %end;
18612 +    ;
18613 +  run;
18614 +  proc sort data=tempnodes; by node; run;
18615 +  data &EM_USER_TREE_PLOT;
18616 +    merge &EM_USER_TREE_PLOT tempnodes %if &oldexists %then old_tree_plot;;
18617 +    by node;
18618 +    if missing(node) then delete;
18619 +    %if &oldexists %then %do;
18620 +      if missing(nodecolor) then nodecolor=oldnodecolor;
18621 +      drop oldnodecolor;
18622 +    %end;
18623 +    abovetext = compbl(abovetext);
18625 +    /* add variable labels */
18626 +    label textall      = "%sysfunc(sasmsg(sashelp.dmine, rpt_textall_vlabel, noquote))"
18627 +          parent       = "%sysfunc(sasmsg(sashelp.dmine, rpt_parentId_vlabel, noquote))"
18628 +          node         = "%sysfunc(sasmsg(sashelp.dmine, rpt_nodeid_vlabel, noquote))"
18629 +          abovetext    = "%sysfunc(sasmsg(sashelp.dmine, rpt_abovetext_vlabel, noquote))"
18630 +          traintotal   = "%sysfunc(sasmsg(sashelp.dmine, rpt_traintotal_vlabel, noquote))"
18631 +          nodecolor    = "%sysfunc(sasmsg(sashelp.dmine, rpt_nodecolor_vlabel, noquote))"
18633 +          %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
18634 +            tprob        = "%sysfunc(sasmsg(sashelp.dmine, rpt_prob_vlabel, noquote, %nrbquote(&targetEvent)))"
18635 +            percevent_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_percevent_train_vlabel, noquote))"
18636 +            perc_train      = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_train_vlabel, noquote))"
18637 +          %end;
18638 +          %else %do;
18639 +            tprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote))"
18640 +            percevent_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_int_train_vlabel, noquote))"
18641 +            perc_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_train_vlabel, noquote))"
18642 +          %end;
18643 +          index           = "%sysfunc(sasmsg(sashelp.dmine, meta_index_vlabel, noquote))"
18645 +          validtotal      = "%sysfunc(sasmsg(sashelp.dmine, rpt_validtotal_vlabel, noquote))"
18646 +          VN              = "%sysfunc(sasmsg(sashelp.dmine, rpt_validn_vlabel, noquote))"
18647 +          %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
18648 +            vprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_vprob_vlabel, noquote, %nrbquote(&targetEvent)))"
18649 +            perc_valid      = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_valid_vlabel, noquote))"
18650 +            percevent_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_percevent_valid_vlabel, noquote))"
18651 +          %end;
18652 +          %else %do;
18653 +            vprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_validaverage_vlabel, noquote))"
18654 +            perc_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_valid_vlabel, noquote))"
18655 +            percevent_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_int_valid_vlabel, noquote))"
18656 +          %end;
18657 +    ;
18658 +  run;
18660 +  /* delete temporary tables */
18661 +  proc datasets lib=work nolist;
18662 +    delete abovetext belowtext tempoutnodes tempmissing temp tempnodes tempstats;
18663 +  run;
18665 +%mend em_tree_makePlotDs;
18669 +%macro em_tree_report;
18671 +   /* report properties */
18672 +   %em_checkmacro(name=EM_PROPERTY_Precision, value=4, global=Y);
18673 +   %em_checkmacro(name=EM_PROPERTY_SplitPrecision, value=4, global=Y);
18674 +   %em_checkmacro(name=EM_PROPERTY_ClassColorBy, value=PERCENTCORRECT, global=Y);
18675 +   %em_checkmacro(name=EM_PROPERTY_IntColorBy, value=AVG, global=Y);
18676 +   %em_checkmacro(name=EM_PROPERTY_ShowNodeId, value=Y, global=Y);
18677 +   %em_checkmacro(name=EM_PROPERTY_ShowValid, value=Y, global=Y);
18678 +   %em_checkmacro(name=EM_PROPERTY_Pred, value=N, global=Y);
18679 +   %em_checkmacro(name=EM_PROPERTY_Target, value=ALL, global=Y);
18680 +   %em_checkmacro(name=EM_PROPERTY_Count, value=Y, global=Y);
18681 +   %em_checkmacro(name=EM_PROPERTY_PercentCorrect, value=N, global=Y);
18682 +   %em_checkmacro(name=EM_PROPERTY_ProfitLoss, value=NONE, global=Y);
18683 +   %em_checkmacro(name=EM_PROPERTY_AVG, value=Y, global=Y);
18684 +   %em_checkmacro(name=EM_PROPERTY_RASE, value=N, global=Y);
18686 +   %let validexist=0;
18687 +   %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)))) %then %do;
18688 +     %let validexist=1;
18689 +   %end;
18691 +   /* determine if multiple targets will be processed */
18692 +   %let em_tree_multipleTargets=N;
18693 +   %let em_tree_numTarget=1;
18694 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
18695 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
18696 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
18697 +         %let em_tree_multipleTargets=N;
18698 +      %end;
18699 +      %else %do;
18700 +        data _null_;
18701 +          set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
18702 +          if eof then
18703 +            call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
18704 +        run;
18706 +        %if &em_tree_numTarget gt 1 %then %do;
18707 +           %let em_tree_multipleTargets=Y;
18708 +        %end;
18709 +     %end;
18710 +   %end;
18712 +  %if "&em_tree_multipleTargets" eq "N" %then %do;
18714 +   /* variable importance */
18715 +   %EM_GETNAME(key=OUTIMPORT, type=DATA);
18716 +   %if %sysfunc(exist(&EM_USER_OUTIMPORT)) eq 1 %then %do;
18718 +     /* determine if vars exists - properties could indicate they are they but freeze=Y would mean the node wasn't retrained */
18719 +     /* and the columns may not be generated                                                                                 */
18720 +     %let em_tree_cvexists=;
18721 +     %let em_tree_surrexists=.;
18722 +     data _null_;
18723 +       set &EM_USER_OUTIMPORT (obs=2) end=eof;
18724 +       if eof then do ;
18725 +        call symput("em_tree_cvexists" , strip(put(cvimportance,best.))) ;
18726 +        call symput("em_tree_surrexists", strip(put(nsurrogates, best.)));
18727 +       end;
18728 +     run;
18730 +     data &EM_USER_OUTIMPORT;
18731 +         set &EM_USER_OUTIMPORT;
18732 +         /* format columns based on Precison value specified */
18733 +         format importance 15.&EM_PROPERTY_PRECISION
18734 +              %if &validexist %then %do;
18735 +                vimportance ratio 15.&EM_PROPERTY_PRECISION
18736 +              %end;
18737 +              %if "&EM_TREE_CVEXISTS" ne "." %then %do;
18738 +                cvimportance vimportance ratio 15.&EM_PROPERTY_PRECISION
18739 +              %end;
18740 +         ;
18741 +     run;
18743 +     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_variableImportance_title  , NOQUOTE))";
18744 +     proc print data=&EM_USER_OUTIMPORT
18745 +        %if "&EM_TREE_SURREXISTS" ne "." %then %do;
18746 +          (where=((nrules>0) OR (nsurrogates>0)))
18747 +        %end;
18748 +        %else %do;
18749 +           (where=(nrules>0))
18750 +        %end;
18751 +        label noobs
18752 +        ;
18753 +     run;
18754 +     title10;
18756 +   %end;
18758 +   /* Sequence */
18759 +   %EM_GETNAME(key=OUTSEQ, type=DATA);
18760 +   %EM_GETNAME(key=OUTOBSIMP, type=DATA);
18761 +   data _null_ ;
18762 +      set &EM_USER_outseq (obs=2) end=eof ;
18763 +      if eof then do ;
18764 +        call symput("em_tree_xase" , strip(put(_XASE_,best.))) ;
18765 +        call symput("em_tree_vase" , strip(put(_VASE_, best.)));
18766 +        call symput("em_tree_seq"  , strip(put(_SEQUENCE_, best.)));
18767 +        call symput("em_tree_vseq"  , strip(put(_VSEQUENCE_, best.)));
18768 +        call symput("em_tree_aprof" , strip(put(_APROF_, best.)));
18769 +        call symput("em_tree_aloss" , strip(put(_ALOSS_, best.)));
18770 +        call symput("em_tree_prior" , strip(put(_PASE_, best.)));
18771 +      end;
18772 +    run;
18774 +   %if %sysfunc(exist(&EM_USER_OUTSEQ)) eq 1 %then %do;
18775 +      data &EM_USER_OUTSEQ;
18776 +      %if (("&EM_PROPERTY_CV" eq "Y") AND ("&em_tree_xase" ne ".")) %then %do;
18777 +        set &EM_USER_OUTSEQ(rename=(_XASE_=_VASE_ _XMAX_=_VMAX_ _XSSE_=_VSSE_ _XRASE_=_VRASE_
18778 +        %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
18779 +           _XMISC_=_VMISC_
18780 +        %end;
18781 +        %if "&em_tree_aprof" ne "."  %then %do;
18782 +           _XAPROF_=_VAPROF_
18783 +           _XPROF_ = _VPROF_
18784 +        %end;
18785 +        %if "&em_tree_aloss" ne "."  %then %do;
18786 +           _XALOSS_=_VALOSS_
18787 +        %end;
18788 +        %if "&EM_TREE_PRIOR" ne "." %then %do;
18789 +           _XPASE_ = _VPASE_
18790 +           _XPMISC_ = _VPMISC_
18791 +        %end;
18793 +        ));
18794 +     %end;
18795 +     %else %do;
18796 +        set &EM_USER_OUTSEQ;
18797 +     %end;
18799 +     format _ASE_  _ASSESS_ _MAX_ _SSE_ _RASE_  15.&EM_PROPERTY_PRECISION
18800 +         %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
18801 +            _MISC_   15.&EM_PROPERTY_PRECISION
18802 +         %end;
18803 +         %if "&EM_TREE_PRIOR" ne "." %then %do;
18804 +            _PASE_  15.&EM_PROPERTY_PRECISION
18805 +            _PMISC_ 15.&EM_PROPERTY_PRECISION
18806 +         %end;
18807 +         %if (("&EM_PROPERTY_CV" eq "Y") AND (("&em_tree_xase" ne ".") or ("&em_tree_vase" ne "."))) %then %do;
18808 +            _VASE_  _VASSESS_ _VMAX_ _VSSE_ _VRASE_ _COST_COMPLEXITY_ 15.&EM_PROPERTY_PRECISION
18809 +            %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
18810 +               _VMISC_ 15.&EM_PROPERTY_PRECISION
18811 +            %end;
18812 +            %if "&EM_TREE_PRIOR" ne "." %then %do;
18813 +              _VPASE_  15.&EM_PROPERTY_PRECISION
18814 +              _VPMISC_ 15.&EM_PROPERTY_PRECISION
18815 +            %end;
18816 +         %end;
18817 +         %if (("&EM_PROPERTY_CV" eq "N") AND &validexist) %then %do;
18818 +            _VASE_  _VASSESS_ _VMAX_ _VSSE_ _VRASE_  15.&EM_PROPERTY_PRECISION
18819 +            %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
18820 +               _VMISC_ 15.&EM_PROPERTY_PRECISION
18821 +            %end;
18822 +         %end;
18823 +         %if "&em_tree_seq" ne "." %then %do;
18824 +           _SEQUENCE_ 15.&EM_PROPERTY_PRECISION
18825 +         %end;
18826 +         %if "&em_tree_vseq" ne "." %then %do;
18827 +           _VSEQUENCE_  15.&EM_PROPERTY_PRECISION
18828 +         %end;
18829 +         %if "&em_tree_aprof" ne "." %then %do;
18830 +           _APROF_ 15.&EM_PROPERTY_PRECISION
18831 +           _PROF_ 15.&EM_PROPERTY_PRECISION
18832 +           %if (("&EM_PROPERTY_CV" eq "Y") OR &validexist) %then %do;
18833 +             _VAPROF_ 15.&EM_PROPERTY_PRECISION
18834 +             _VPROF_ 15.&EM_PROPERTY_PRECISION
18835 +           %end;
18836 +         %end;
18837 +         %else %if "&em_tree_aloss" ne "." %then %do;
18838 +           _ALOSS_  15.&EM_PROPERTY_PRECISION
18839 +           %if (("&EM_PROPERTY_CV" eq "Y") OR &validexist) %then %do;
18840 +             _VALOSS_ 15.&EM_PROPERTY_PRECISION
18841 +           %end;
18842 +         %end;
18843 +      ;
18844 +    run;
18845 +   %end;
18847 +   /* Observation Based Importance */
18848 +   %if (  ("&EM_PROPERTY_OBSIMPORTANCE" eq "Y") AND ( %sysfunc(exist(&EM_USER_OUTOBSIMP)) eq 1)) %then %do;
18850 +      /* need to check for 0 obs */
18851 +      %let dsid = %sysfunc(open(&EM_USER_OUTOBSIMP));
18852 +      %let onobs=%sysfunc(attrn(&dsid,NOBS));
18853 +      %let rc=%sysfunc(close(&dsid));
18855 +      %if &onobs %then %do;
18856 +         proc sort data=&EM_USER_OUTOBSIMP; by _INPUT1_; run;
18857 +         proc sort data=&em_data_variableset out=_tempvars; by NAME; run;
18859 +         data &EM_USER_OUTOBSIMP;
18860 +           merge _tempvars(rename=(NAME=_INPUT1_) keep=NAME LABEL) &EM_USER_OUTOBSIMP(in=_a)  ;
18861 +           if _a;
18862 +           by _INPUT1_;
18863 +           format  _ASE_ _MAX_ _SSE_ _RASE_ 15.&EM_PROPERTY_PRECISION
18864 +                   %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
18865 +                     _MISC_ 15.&EM_PROPERTY_PRECISION
18866 +                   %end;
18867 +                   ;
18868 +         run;
18869 +         %EM_REPORT(key=OUTOBSIMP, viewtype=DATA, block=MODEL, description=OBSIMPFIT, autodisplay=N);
18870 +      %end;
18871 +   %end;
18873 +  %end;
18875 +  /* create dataset to support tree diagram and icicle plot */
18876 +  %EM_GETNAME(key=TREE_PLOT, type=DATA);
18877 +  %em_tree_makePlotDs(multipleTar = &em_tree_multipleTargets);
18879 +  /* display tree diagram */
18880 +  %em_report(key=TREE_PLOT, viewtype=DTree, id=NODE, parent=PARENT, nodetext=NODETEXT, tipText=TEXTALL, abovetext=ABOVETEXT, belowText=BELOWTEXT,
18881 +             nodesize=N, nodecolor=NODECOLOR, linkwidth=LINKWIDTH,  block=MODEL, description=TREE, autodisplay=Y);
18883 +  /* display icicle diagram */
18884 +  %em_report(key=TREE_PLOT, viewtype=Icicle, id=NODE, parent=PARENT, nodetext=NODETEXT, tipText=TEXTALL,
18885 +             nodesize=N, nodecolor=NODECOLOR, block=MODEL, description=ICICLE, autodisplay=Y);
18887 +  /* Leaf Statistics Plot */
18888 +  %em_report(key=TREE_PLOT, viewtype=AREABAR, x=NODE, y=PERCEVENT_TRAIN, WIDTH=PERC_TRAIN,block=MODEL, description=VARWIDTH, autodisplay=N);
18890 +  /* print leaf information to output window */
18891 +  %if %sysfunc(exist(&EM_USER_TREE_PLOT)) eq 1 %then %do;
18893 +     proc sort data=&EM_USER_TREE_PLOT out=t;
18894 +       by descending N;
18895 +     run;
18897 +     /* determine if vn is present in the data -- combinations of decisions/partition/cv cause the proc not to generate this stat */
18898 +     %local vn;
18899 +     data _null_;
18900 +       set t (obs=2) end=eof;
18901 +       if eof then do;
18902 +         call symput("vn", strip(put(vn, best.)));
18903 +       end;
18904 +     run;
18906 +     data t;
18907 +       set t;
18908 +       label N="%sysfunc(sasmsg(sashelp.dmine, rpt_trainingobs_vlabel  , NOQUOTE))"
18909 +             DEPTH="%sysfunc(sasmsg(sashelp.dmine, rpt_depth_vlabel  , NOQUOTE))"
18910 +       %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
18911 +            tprob = "%sysfunc(sasmsg(sashelp.dmine, rpt_trainaverage_vlabel  , NOQUOTE))"
18912 +            RASE="%sysfunc(sasmsg(sashelp.dmine, rpt_trainrase_vlabel  , NOQUOTE))"
18913 +       %end;
18914 +       %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1)) %then %do;
18915 +            VN="%sysfunc(sasmsg(sashelp.dmine, rpt_validobs_vlabel  , NOQUOTE))"
18916 +           %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
18917 +              vprob = "%sysfunc(sasmsg(sashelp.dmine, rpt_validaverage_vlabel  , NOQUOTE))"
18918 +              VRASE="%sysfunc(sasmsg(sashelp.dmine, rpt_validrase_vlabel  , NOQUOTE))"
18919 +          %end;
18920 +       %end;
18921 +       ;
18922 +     run;
18924 +     /* determine if rase is found in t */
18925 +    %let dsid=%sysfunc(open(t,i));
18926 +    %let raseexists=%sysfunc(varnum(&dsid,RASE));
18927 +    %let rc=%sysfunc(close(&dsid));
18929 +     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_treeleafreport_title  , NOQUOTE))";
18930 +     proc print data=t noobs label;
18931 +       where tprob ne .;
18932 +       var node depth N tprob
18933 +       %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1)) %then %do;
18934 +         %if "&vn" ne "." %then %do;
18935 +           VN
18936 +         %end;
18937 +         vprob
18938 +       %end;
18939 +       %if &raseexists %then %do;
18940 +            RASE
18941 +            %if ( ("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1) AND ("&EM_PROPERTY_CV" eq "N")) %then %do;
18942 +              VRASE
18943 +            %end;
18944 +       %end;
18945 +       ;
18946 +     run;
18947 +     title10;
18948 +  %end;
18950 +  /* create plots that are done during training of node */
18951 +  /* display iterative plot, including reference line */
18952 +  %if "&em_Tree_multipleTargets" eq "N" %then %do;
18953 +   /* %if &nleaves eq  %then %do; */
18954 +      %EM_GETNAME(key=OUTTOPOLOGY, type=DATA);
18955 +      data _null_;
18956 +        set &EM_USER_OUTTOPOLOGY end=eof;
18957 +        if eof then do;
18958 +          call symput('nleaves', LEAF);
18959 +        end;
18960 +      run;
18961 +   /* %end; */
18963 +    %EM_REPORT(KEY=OUTSEQ, VIEWTYPE=ITERATIONPLOT, block=MODEL,  X=_NW_, XRef=&Nleaves, autodisplay=N, Description=SUBTREE);
18964 +    /*%EM_REPORT(view=1, Y=_ASE_); */
18965 +  %end;
18967 +  /* display leaf statistics */
18968 +  %EM_REPORT(KEY=TREE_PLOT, VIEWTYPE=RESPONSEBAR, block=MODEL, view=1, X=INDEX, Y1=tprob, y2=vprob, where=%nrbquote(INDEX ne .), autodisplay=Y, Description=LEAFSTATS);
18970 +  /* stats by node if multiple targets = Y */
18971 +  %EM_GETNAME(key=OUTSTATS, type=DATA);
18972 +  %if "&em_tree_multipleTargets" eq "Y" %then %do;
18973 +    data &EM_USER_OUTSTATS;
18974 +      set &EM_USER_OUTSTATS;
18976 +     * if STATNAME="TARGET" then delete;
18977 +     * if STATNAME="PREDICTION" and STATVALUE=. then delete;
18978 +      drop leaf;
18979 +    run;
18980 +    %EM_REPORT(key=OUTSTATS, viewtype=DATA, block=MODEL, description=OUTSTATS, autodisplay=N);
18982 +  %end;
18983 +  %else %do;
18984 +    /* add outstats and outdescribe to spk but not results */
18985 +    %EM_REPORT(viewtype=, key=OUTSTATS);
18986 +  %end;
18988 +%mend em_tree_report;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: Variable cvimportance is uninitialized.
NOTE: Variable nsurrogates is uninitialized.
NOTE: There were 2 observations read from the data set EMWS1.TREE_OUTIMPORT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 5 observations read from the data set EMWS1.TREE_OUTIMPORT.
NOTE: The data set EMWS1.TREE_OUTIMPORT has 5 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 5 observations read from the data set EMWS1.TREE_OUTIMPORT.
      WHERE nrules>0;
NOTE: The PROCEDURE PRINT printed page 3.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Variable _XASE_ is uninitialized.
NOTE: Variable _VASE_ is uninitialized.
NOTE: Variable _SEQUENCE_ is uninitialized.
NOTE: Variable _VSEQUENCE_ is uninitialized.
NOTE: Variable _APROF_ is uninitialized.
NOTE: Variable _ALOSS_ is uninitialized.
NOTE: Variable _PASE_ is uninitialized.
NOTE: There were 2 observations read from the data set EMWS1.TREE_OUTSEQ.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 18 observations read from the data set EMWS1.TREE_OUTSEQ.
NOTE: The data set EMWS1.TREE_OUTSEQ has 18 observations and 10 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.TREE_AGE_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 17 observations read from the data set EMWS1.TREE_OUTRULES.
      WHERE (ROLE='PRIMARY') and (STAT='VARIABLE');
NOTE: The data set WORK.BELOWTEXT has 17 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 17 observations read from the data set EMWS1.TREE_OUTRULES.
      WHERE (ROLE='PRIMARY') and (STAT='LABEL');
NOTE: The data set WORK.BELOWTEXT2 has 17 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 17 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.BELOWTEXT has 17 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 17 observations read from the data set WORK.BELOWTEXT2.
NOTE: The data set WORK.BELOWTEXT2 has 17 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 17 observations read from the data set WORK.BELOWTEXT.
NOTE: There were 17 observations read from the data set WORK.BELOWTEXT2.
NOTE: The data set WORK.BELOWTEXT has 17 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 27 observations read from the data set EMWS1.TREE_OUTRULES.
      WHERE (ROLE='PRIMARY') and STAT in ('INTERVAL', 'NOMINAL', 'ORDINAL');
NOTE: The data set WORK.ABOVETEXT has 27 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 27 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 27 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      155:103   204:136   247:102   247:125   279:104   313:104   355:103   355:126   398:104
NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      414:99
NOTE: There were 27 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 34 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 311 observations read from the data set EMWS1.TREE_OUTRULES.
NOTE: The data set WORK.TEMPMISSING has 17 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 34 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 34 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 17 observations read from the data set WORK.TEMPMISSING.
NOTE: The data set WORK.TEMPMISSING has 17 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 35 observations read from the data set EMWS1.TREE_OUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 35 observations and 14 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Variable VN is uninitialized.
NOTE: There were 34 observations read from the data set WORK.ABOVETEXT.
NOTE: There were 35 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 17 observations read from the data set WORK.TEMPMISSING.
NOTE: The data set WORK.TEMPOUTNODES has 35 observations and 16 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 35 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 35 observations and 16 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 17 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.BELOWTEXT has 17 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 35 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 17 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.TEMPOUTNODES has 35 observations and 17 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 0 observations read from the data set EMWS1.TREE_OUTSTATS.
      WHERE STATNAME='NPRIORS';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.TREE_VARIABLESET.
      WHERE (ROLE='TARGET') and (LEVEL not = 'ORDINAL') and USE in ('D', 'Y');
NOTE: The data set WORK.TEMPTARMETA has 1 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 105 observations read from the data set EMWS1.TREE_OUTSTATS.
NOTE: The data set WORK.TEMPTARGETUSED has 105 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 105 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: 70 observations with duplicate key values were deleted.
NOTE: The data set WORK.TEMPTARGETUSED has 35 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 105 observations read from the data set EMWS1.TREE_OUTSTATS.
NOTE: The data set WORK.TEMPOUTSTATS has 105 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Input data set is already sorted, no sorting done.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 105 observations read from the data set WORK.TEMPOUTSTATS.
NOTE: There were 35 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: The data set WORK.TEMPINTERVAL has 105 observations and 6 variables.
NOTE: The data set WORK.TEMPCLASS has 0 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 105 observations read from the data set WORK.TEMPINTERVAL.
NOTE: The data set WORK.TEMPINTERVAL has 35 observations and 4 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 35 observations read from the data set WORK.TEMPINTERVAL.
NOTE: The data set WORK.TEMPINTERVAL has 35 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 35 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 35 observations and 17 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      940:196   948:204
NOTE: There were 35 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 35 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: There were 35 observations read from the data set WORK.TEMPINTERVAL.
NOTE: The data set EMWS1.TREE_TREE_PLOT has 35 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 105 observations read from the data set EMWS1.TREE_OUTSTATS.
NOTE: The data set WORK.TEMPPROB has 35 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 35 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 35 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 35 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 35 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPOUTNODES has 35 observations and 18 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 35 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPNODES has 35 observations and 18 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 18 observations read from the data set WORK.TEMPNODES.
      WHERE leaf not = .;
NOTE: The data set WORK.TEMPNODES has 18 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 18 observations read from the data set WORK.TEMPNODES.
NOTE: The data set WORK.TEMPNODES has 18 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Variable vprob is uninitialized.
NOTE: Variable perc_valid is uninitialized.
NOTE: Variable percevent_valid is uninitialized.
NOTE: There were 35 observations read from the data set EMWS1.TREE_TREE_PLOT.
NOTE: There were 18 observations read from the data set WORK.TEMPNODES.
NOTE: The data set EMWS1.TREE_TREE_PLOT has 35 observations and 24 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: The file WORK.TEMP (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: The file WORK.TEMPSTATS (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: Deleting WORK.ABOVETEXT (memtype=DATA).
NOTE: Deleting WORK.BELOWTEXT (memtype=DATA).
NOTE: Deleting WORK.TEMPOUTNODES (memtype=DATA).
NOTE: Deleting WORK.TEMPMISSING (memtype=DATA).
NOTE: Deleting WORK.TEMPNODES (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 264 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 264 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 397 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 35 observations read from the data set EMWS1.TREE_TREE_PLOT.
NOTE: The data set WORK.T has 35 observations and 24 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2 observations read from the data set WORK.T.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 35 observations read from the data set WORK.T.
NOTE: The data set WORK.T has 35 observations and 24 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 18 observations read from the data set WORK.T.
      WHERE tprob not = .;
NOTE: The PROCEDURE PRINT printed page 4.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      290:141
NOTE: There were 35 observations read from the data set EMWS1.TREE_OUTTOPOLOGY.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 397 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 529 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 529 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 662 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 662 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 794 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
18989
18990  *------------------------------------------------------------*;
18991  * End REPORT: Tree;
18992  *------------------------------------------------------------*;
 
18993  /* Reset EM Options */
18994  options formchar="|----|+|---+=|-/\<>*";
18995  options nocenter ls=256 ps=10000;
18996  goptions reset=all device=GIF NODISPLAY;
 
18997  proc sort data=WORK.EM_USER_REPORT;
18998  by ID VIEW;
18999  run;
 
NOTE: There were 794 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 794 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
19000  proc sort data=EMWS1.Varsel_CMeta_TRAIN out=WORK.SUBSETINMETA;
19001  by NAME;
19002  run;
 
NOTE: There were 8 observations read from the data set EMWS1.VARSEL_CMETA_TRAIN.
NOTE: The data set WORK.SUBSETINMETA has 8 observations and 20 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
19003  proc sort data=EMWS1.Tree_VariableSet out=WORK.SUBSETVARSET(keep=NAME REPORT);
19004  by NAME;
19005  run;
 
NOTE: There were 8 observations read from the data set EMWS1.TREE_VARIABLESET.
NOTE: The data set WORK.SUBSETVARSET has 8 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
19006  data WORK.ASSESS_META;
19007  merge WORK.SUBSETINMETA WORK.SUBSETVARSET;
19008  by NAME;
19009  run;
 
NOTE: There were 8 observations read from the data set WORK.SUBSETINMETA.
NOTE: There were 8 observations read from the data set WORK.SUBSETVARSET.
NOTE: The data set WORK.ASSESS_META has 8 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
19010  data EM_temp_assessMeta;
19011  set EMWS1.Tree_CMeta_TRAIN;
19012  where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
19013  run;
 
NOTE: There were 3 observations read from the data set EMWS1.TREE_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 3 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
19014  data EM_temp_assessdata;
19015  set EMWS1.Tree_TRAIN(keep=
19016  P_Age
19017  R_Age
19018  _WARN_
19019  Age
19020  );
19021  run;
 
NOTE: There were 350 observations read from the data set EMWS1.FIMPORT_DATA.
NOTE: There were 350 observations read from the data set EMWS1.FIMPORT_TRAIN.
NOTE: View EMWS1.TREE_TRAIN.VIEW used (Total process time):
      real time           0.06 seconds
      cpu time            0.03 seconds
 
NOTE: There were 350 observations read from the data set EMWS1.VARSEL_TRAIN.
NOTE: There were 350 observations read from the data set EMWS1.TREE_TRAIN.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 350 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.03 seconds
 
 
 
 
 
 
 
 
 
23352   %let _cn = %sysfunc(getoption(CENTER));
23353   options nocenter;
23354   proc print data=EMWS1.Tree_EMREPORTFIT noobs label;
23355   var STAT LABEL TRAIN
23356   ;
23357   by TARGET TARGETLABEL;
23358   title9 ' ';
23359   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_title  , NOQUOTE))";
23360   run;
 
NOTE: There were 7 observations read from the data set EMWS1.TREE_EMREPORTFIT.
NOTE: The PROCEDURE PRINT printed page 5.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
23361   title10;
23362   options &_cn;
 
23363   proc datasets library=EMWS1 nolist;
23364   modify Tree_EMRANK;
23365   label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,   NOQUOTE))";
23366   label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))";
23367   run;
 
NOTE: MODIFY was successful for EMWS1.TREE_EMRANK.DATA.
23368   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
23369   %let _cn = %sysfunc(getoption(CENTER));
23370   options nocenter;
23371   proc print data=EMWS1.Tree_EMRANK label noobs;
23372   var
23373   decile N _targetMean_ _meanP_;
23374   by
23375   notsorted DATAROLE
23376   notsorted TARGET
23377   notsorted TARGETLABEL
23378   ;
23379   title9 ' ';
23380   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_scoreranking_title , NOQUOTE))";
23381   run;
 
NOTE: There were 14 observations read from the data set EMWS1.TREE_EMRANK.
NOTE: The PROCEDURE PRINT printed page 6.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
23382   title10;
23383   options &_cn;
 
23384   proc datasets library=EMWS1 nolist;
23385   modify Tree_EMSCOREDIST;
23386   label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,      NOQUOTE))";
23387   label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))";
23388   run;
 
NOTE: MODIFY was successful for EMWS1.TREE_EMSCOREDIST.DATA.
23389   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
