*------------------------------------------------------------*
* Training Log
Date:                2024年01月07日
Time:                16时36分11秒
*------------------------------------------------------------*
14714  proc freq data=EMWS1.Tree_VariableSet noprint;
14715  table ROLE*LEVEL/out=WORK.TreeMETA;
14716  run;

NOTE: There were 8 observations read from the data set EMWS1.TREE_VARIABLESET.
NOTE: The data set WORK.TREEMETA has 5 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

14717  proc print data=WORK.TreeMETA label noobs;
14718  var ROLE LEVEL COUNT;
14719  label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
14720  title9 ' ';
14721  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
14722  run;

NOTE: There were 5 observations read from the data set WORK.TREEMETA.
NOTE: The PROCEDURE PRINT printed page 1.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

14723  title10;

14724  %let EMNORLEN = %DMNORLEN;
EMWS1.Varsel_TRAIN EMWS1.Varsel_TRAIN 
EMWS1.Varsel_TRAIN EMWS1.Varsel_TRAIN EMWS1 Varsel_TRAIN 
EMWS1.Varsel_TRAIN EMWS1.Varsel_TRAIN 
EMWS1.Varsel_TRAIN EMWS1.Varsel_TRAIN EMWS1 Varsel_TRAIN 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >> 
>>>>>>>>>>>>>> TARGET(   NAME='Age' 
                         ROLE='TARGET' 
                         LEVEL='INTERVAL' 
                         ORDER='' 
                         CREATOR='' 
                         FORMATTYPE='QUANTITY' 
                         FAMILY='' 
                         LOWERLIMIT=. 
                         UPPERLIMIT=. 
                         REPORT='N' 
                         DISTRIBUTION='' 
                         COMMENT='' 
                         PRICE=. 
                         TYPE='N' 
                         LABEL='' 
                         FORMAT='BEST12.0' 
                         INFORMAT='BEST32.0' 
                         INDEX='N' 
                         INDEXTYPE='NONE' 
                         LENGTH=8 
                         USE='Y' 
                      )[11891] 
PERFORMANCE  DETAILS
WORK.EM_DMDB WORK.EM_DMDB 
WORK.EM_DMDB WORK.EM_DMDB WORK EM_DMDB 
"No decisions defined for target "Age"." 
14785  proc print data = EMWS1.Tree_Age_DM noobs label;
14786  var _type_ variable label;
14787  where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
14788  label _TYPE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_type_vlabel,     NOQUOTE))" VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
14789  title9 ' ';
14790  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_predDecVars_title  , NOQUOTE))";
14791  run;

NOTE: There were 3 observations read from the data set EMWS1.TREE_AGE_DM.
      WHERE _type_ not in ('DATAPRIOR', 'DECISION', 'DECPRIOR', 'MATRIX', 'TRAINPRIOR');
NOTE: The PROCEDURE PRINT printed page 2.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

14792  title10;

14793  %let EMEXCEPTIONSTRING=;
PERFORMANCE  DETAILS
15302  *------------------------------------------------------------*;
15303  * Tree: Generation of macros and macro variables;
15304  * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
15305  *------------------------------------------------------------*;

15306  %let EMEXCEPTIONSTRING=;
15307  *------------------------------------------------------------*;
15308  * TRAIN: Tree;
15309  *------------------------------------------------------------*;
15310  %let EM_ACTION = TRAIN;
15311  %let syscc = 0;
15312  %macro main;
15313  
15314    %if %upcase(&EM_ACTION) = CREATE %then %do;
15315      filename temp catalog 'sashelp.emmodl.tree_create.source';
15316      %include temp;
15317      filename temp;
15318  
15319      %em_tree_create;
15320    %end;
15321  
15322     %else
15323     %if %upcase(&EM_ACTION) = TRAIN %then %do;
15324  
15325         filename temp catalog 'sashelp.emmodl.tree_train.source';
15326         %include temp;
15327         filename temp;
15328         %em_tree_train;
15329     %end;
15330  
15331    %else
15332    %if %upcase(&EM_ACTION) = SCORE %then %do;
15333      filename temp catalog 'sashelp.emmodl.tree_score.source';
15334      %include temp;
15335      filename temp;
15336  
15337      %em_tree_score;
15338  
15339    %end;
15340  
15341    %else
15342    %if %upcase(&EM_ACTION) = REPORT %then %do;
15343  
15344         filename temp catalog 'sashelp.emmodl.tree_report.source';
15345         %include temp;
15346         filename temp;
15347  
15348         %em_tree_report;
15349     %end;
15350  
15351    %else
15352    %if %upcase(&EM_ACTION) = OPENINT %then %do;
15353  
15354         filename temp catalog 'sashelp.emmodl.tree_actions.source';
15355         %include temp;
15356         filename temp;
15357         %EM_TREE_OPENTREEVIEWER;
15358  
15359     %end;
15360  
15361    %else
15362    %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
15363  
15364         filename temp catalog 'sashelp.emmodl.tree_actions.source';
15365         %include temp;
15366         filename temp;
15367         %EM_TREE_CLOSETREEVIEWER;
15368  
15369     %end;
15370  
15371  
15372     %doendm:
15373  %mend main;
15374  
15375  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_TRAIN.SOURCE.
15377 +%macro em_tree_train;
15379 +   %if &EM_IMPORT_DATA eq %then %do;
15380 +       %let EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
15381 +       %put &em_codebar;
15382 +       %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_nodeTrainRawData_note, NOQUOTE));
15383 +       %put &errormsg;
15384 +       %put &em_codebar;
15385 +       %goto doendm;
15386 +   %end;
15387 +   %else
15388 +       %let EMEXCEPTIONSTRING =;
15390 +   %if  &EM_NUM_TARGET lt 1 %then %do;
15391 +        %let EMEXCEPTIONSTRING = exception.server.USE1TARGET;
15392 +        %put &em_codebar;
15393 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.use01target_err, NOQUOTE));
15394 +        %put &errormsg;
15395 +        %put &em_codebar;
15396 +        %goto doendm;
15397 +   %end;
15399 +   %if  (&EM_NUM_INTERVAL_INPUT < 1) and (&EM_NUM_BINARY_INPUT < 1) and (&EM_NUM_ORDINAL_INPUT < 1)
15400 +        and (&EM_NUM_NOMINAL_INPUT < 1) and (&EM_NUM_INTERVAL_REJECTED < 1) and (&EM_NUM_BINARY_REJECTED <1)
15401 +        and (&EM_NUM_ORDINAL_REJECTED < 1) and (&EM_NUM_NOMINAL_REJECTED < 1) %then %do;
15402 +        %let EMEXCEPTIONSTRING = exception.server.USEATLEAST1INPUTREJECT;
15403 +        %put &em_codebar;
15404 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_noInput_note, NOQUOTE));
15405 +        %put &errormsg;
15406 +        %put &em_codebar;
15407 +        %goto doendm;
15408 +   %end;
15410 +   /* Initialize property macro variables */
15411 +   filename temp catalog 'sashelp.emmodl.tree_macros.source';
15412 +   %include temp;
15413 +   filename temp;
15415 +   %EM_SetProperties;
15417 +   /* need to delete EMTREE if not used as import tree data since AUTODELETE=N */
15418 +   %EM_GETNAME(key=EMTREE, type=DATA);
15419 +   %if "&EM_PROPERTY_IMPORTMODEL" eq "Y" %then %do;
15420 +     /* if import eq Y and no importtable defined, throw an exception */
15421 +      %if %length(&EM_PROPERTY_ImportedTreeData)=0 %then %do;
15422 +         %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEMODELDATASET;
15423 +         %let  errmsg = %sysfunc(sasmsg(sashelp.dmine, NOTREEMODELDATASET_ERR , NOQUOTE));
15424 +         %put &em_codebar;
15425 +         %put &errmsg;
15426 +         %put &em_codebar;
15427 +         %goto doendm;
15428 +      %end;
15429 +      %else %if %sysfunc(exist(&EM_PROPERTY_ImportedTreeData))=0 %then %do;
15430 +         %let EMEXCEPTIONSTRING = exception.server.EMTOOL.INVALIDTREEMODELDATASET;
15431 +         %put &em_codebar;
15432 +         %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.INVALIDTREEMODELDATASET_ERR, NOQUOTE));
15433 +         %put &errormsg;
15434 +         %put &em_codebar;
15435 +         %goto doendm;
15436 +      %end;
15437 +      %else %do;
15438 +         %let dsid=%sysfunc(open(&EM_PROPERTY_ImportedTreeData));
15439 +         %let varnumID = %sysfunc(varnum(&dsid,ID));
15440 +         %let varnumLabel = %sysfunc(varnum(&dsid,LABEL));
15441 +         %let varnumX = %sysfunc(varnum(&dsid,X));
15442 +         %let varnumY = %sysfunc(varnum(&dsid,Y));
15443 +         %let dsid = %sysfunc(close(&dsid));
15444 +         %if &varnumID=0 or &varnumLabel=0 or &varnumX=0 or &varnumY=0 %then %do;
15445 +            %let EMEXCEPTIONSTRING = exception.server.EMTOOL.INVALIDTREEMODELDATASET;
15446 +            %put &em_codebar;
15447 +            %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.INVALIDTREEMODELDATASET_ERR, NOQUOTE));
15448 +            %put &errormsg;
15449 +            %put &em_codebar;
15450 +            %goto doendm;
15451 +         %end;
15452 +      %end;
15453 +      %if %qupcase(&EM_USER_EMTREE) ne %qupcase(&EM_PROPERTY_ImportedTreeData) and (%sysfunc(exist(&EM_USER_EMTREE)) or %sysfunc(exist(&EM_USER_EMTREE, VIEW))) %then %do;
15454 +         proc delete data=&EM_USER_EMTREE;
15455 +         run;
15456 +      %end;
15457 +   %end;
15458 +   %else %if "&EM_PROPERTY_FREEZE" ne "Y" and (%sysfunc(exist(&EM_USER_EMTREE)) or %sysfunc(exist(&EM_USER_EMTREE, VIEW))) %then %do;
15459 +      proc delete data=&EM_USER_EMTREE;
15460 +      run;
15461 +   %end;
15463 +   /* load tree macros */
15464 +   filename temp catalog 'sashelp.emmodl.tree_trainmacros.source';
15465 +   %include temp;
15466 +   filename temp;
15468 +   /* data sets */
15469 +   %EM_GETNAME(key=OUTSTATS,   type=DATA);
15470 +   %EM_GETNAME(key=EXPORTTREE, type=DATA);
15471 +   %EM_GETNAME(key=TREE_PLOT,     type=DATA);
15473 +   /* files */
15474 +   %EM_REGISTER(key=ENGLISHRULES, type=FILE, extension=txt);
15476 +   /* check actual num of target levels */
15477 +   %if ("%EM_TARGET_LEVEL" eq "BINARY") %then %do;
15478 +      %EM_CheckBinaryTargetLevel(indata=&EM_IMPORT_DATA, target=%EM_TARGET,
15479 +                              nLevel=_nTargetLevel );
15480 +      %if &_nTargetLevel  > 2 %then %do;
15481 +        %let EMEXCEPTIONSTRING = exception.server.METADATA.WRONGTARGETLEVEL,&target_Var;
15482 +        %put &em_codebar;
15483 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.wrongtargetlevel, NOQUOTE));
15484 +        %put &errormsg;
15485 +        %put &em_codebar;
15486 +        %goto doendm;
15487 +      %end;
15488 +   %end;
15490 +   /* neither cost variables nor constant cost are valid with USEDECISIONS */
15491 +   %if "&EM_PROPERTY_USEDECISION" eq "Y" %then %do;
15492 +     %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
15493 +        %let costflag=0;
15494 +        data _null_;
15495 +          set &EM_DEC_DECMETA(where=(_TYPE_="DECISION" AND USE="Y" AND ^missing(COST) )) end=eof;
15496 +          if eof then call symput("costflag", _N_);
15497 +        run;
15498 +        %if &costflag gt 0 %then %do;
15499 +          %let EMEXCEPTIONSTRING = exception.server.TREE.INVALIDDECISION;
15500 +          %put &em_codebar;
15501 +          %let errormsg = %sysfunc(sasmsg(sashelp.dmine, costnotvalidwithusedecisions_note_err, NOQUOTE));
15502 +          %put &errormsg;
15503 +          %put &em_codebar;
15504 +          %goto doendm;
15505 +       %end;
15506 +     %end;
15507 +   %end;
15509 +   /* determine if multiple targets will be processed */
15510 +   %let em_tree_multipleTargets=N;
15511 +   %let em_tree_numTarget = 1;
15512 +   %let em_tree_targetVars=;
15514 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
15515 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
15516 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
15517 +         %let em_tree_multipleTargets=N;
15518 +      %end;
15519 +      %else %do;
15520 +         /* create macro array of targets  */
15521 +         data _null_;
15522 +           set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
15523 +           call symput('em_tree_targetVars'!!strip(put(_N_, BEST.)), strip(Name));
15524 +           if eof then
15525 +             call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
15526 +        run;
15528 +        %if &em_tree_numTarget gt 1 %then %do;
15529 +           %let em_tree_multipleTargets=Y;
15530 +        %end;
15531 +      %end;
15532 +   %end;
15534 +   /* create view of only necessary variable for performance reasons */
15535 +   %let tempData = &EM_LIB..em_&EM_NODEID;
15536 +   data &tempData / view=&tempData;
15537 +     set &EM_IMPORT_DATA (keep=%EM_INPUT %EM_REJECTED %EM_TARGET %EM_FREQ %EM_COST
15538 +     %if "&em_tree_multipleTargets" eq "N" %then %do;
15539 +       %EM_TARGET
15540 +     %end;
15541 +     %else %do;
15542 +       %if &em_tree_numTarget ne 0 %then %do;
15543 +         %do i=1 %to &em_tree_numTarget;
15544 +            &&em_tree_targetVars&i
15545 +         %end;
15546 +       %end;
15547 +     %end;
15548 +     );
15549 +   run;
15551 +   /* run Tree procedure */
15552 +   %em_tree_runTreeProcedure(indata=&tempData, multipleTar=&em_tree_multipleTargets);
15554 +   /* Check return code and throw exception if error is detected */
15555 +   %if %length(&EMEXCEPTIONSTRING) %then %goto doendm;
15556 +   %if &syserr %then %do;
15557 +     %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
15558 +     %goto doendm;
15559 +   %end;
15561 +   /* add decision score code if multiple targets are processed */
15562 +   %if "&em_tree_multipleTargets" eq "Y" %then %do;
15563 +     %EM_MODEL(TARGET=%EM_TARGET, DECSCORECODE=Y, CLASSIFICATION=Y, FITSTATISTICS=N);
15564 +   %end;
15566 +   /* create outfit dataset if multiple score statements have been executed */
15567 +   %em_tree_createFitStats(multipleTar=&em_tree_multipleTargets);
15569 +   /* create English Rules */
15570 +   filename X "&EM_USER_ENGLISHRULES" encoding='utf-8' NOBOM;
15571 +     %if "&em_Tree_multipleTargets" eq "N" %then %do;
15572 +       %em_tree_makeEnglishRules;
15574 +       /* English Rules */
15575 +       %EM_REPORT(key=ENGLISHRULES, viewtype=SOURCE, block=MODEL, description=ENGLISHRULES, autodisplay=N);
15577 +     %end;
15578 +   filename x;
15580 +   %doendm:
15581 +%mend em_tree_train;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_MACROS.SOURCE.
15582 +%macro EM_SetProperties;
15584 +   /* train properties */
15585 +   %em_checkmacro(name=EM_PROPERTY_ImportModel,            value=N, global=Y);
15586 +   %em_checkmacro(name=EM_PROPERTY_ImportedTreeData,       value=, global=Y);
15587 +   %em_checkmacro(name=EM_PROPERTY_FREEZE,                 value=N, global=Y);
15588 +   %em_checkmacro(name=EM_PROPERTY_USEMULTIPLETARGET,      value=N, global=Y);
15589 +   %em_checkmacro(name=EM_PROPERTY_NOMINALCRITERION,       value=PROBCHISQ, global=Y);
15590 +   %em_checkmacro(name=EM_PROPERTY_ORDINALCRITERION,       value=ENTROPY, global=Y);
15591 +   %em_checkmacro(name=EM_PROPERTY_INTERVALCRITERION,      value=PROBF, global=Y);
15592 +   %em_checkmacro(name=EM_PROPERTY_CRITERION,              value=DEFAULT, global=Y);
15593 +   %em_checkmacro(name=EM_PROPERTY_SIGLEVEL,               value=0.2, global=Y);
15594 +   %em_checkmacro(name=EM_PROPERTY_SPLITSIZE,              value=., global=Y);
15595 +   %em_checkmacro(name=EM_PROPERTY_LEAFSIZE,               value=5, global=Y);
15596 +   %em_checkmacro(name=EM_PROPERTY_MINCATSIZE,             value=5, global=Y);
15597 +   %em_checkmacro(name=EM_PROPERTY_MAXBRANCH,              value=2, global=Y);
15598 +   %em_checkmacro(name=EM_PROPERTY_MAXDEPTH,               value=6, global=Y);
15599 +   %em_checkmacro(name=EM_PROPERTY_NRULES,                 value=5, global=Y);
15600 +   %em_checkmacro(name=EM_PROPERTY_NSURRS,                 value=0, global=Y);
15601 +   %em_checkmacro(name=EM_PROPERTY_MISSINGVALUE,           value=USEINSEARCH, global=Y);
15602 +   %em_checkmacro(name=EM_PROPERTY_USEVARONCE,             value=N, global=Y);
15603 +   %em_checkmacro(name=EM_PROPERTY_SUBTREE,                value=ASSESSMENT, global=Y);
15604 +   %em_checkmacro(name=EM_PROPERTY_NSUBTREE,               value=1, global=Y);
15605 +   %em_checkmacro(name=EM_PROPERTY_ASSESSMEASURE,          value=PROFIT/LOSS, global=Y);
15606 +   %em_checkmacro(name=EM_PROPERTY_ASSESSPERCENTAGE,       value=0.25, global=Y);
15607 +   %em_checkmacro(name=EM_PROPERTY_NODESAMPLE,             value=20000, global=Y);
15608 +   %em_checkmacro(name=EM_PROPERTY_EXHAUSTIVE,             value=5000, global=Y);
15609 +   %em_checkmacro(name=EM_PROPERTY_USEDECISION,            value=N, global=Y);
15610 +   %em_checkmacro(name=EM_PROPERTY_USEPRIORS,              value=N, global=Y);
15611 +   %em_checkmacro(name=EM_PROPERTY_KASS,                   value=Y, global=Y);
15612 +   %em_checkmacro(name=EM_PROPERTY_KASSAPPLY,              value=BEFORE, global=Y);
15613 +   %em_checkmacro(name=EM_PROPERTY_DEPTH,                  value=Y, global=Y);
15614 +   %em_checkmacro(name=EM_PROPERTY_INPUTS,                 value=N, global=Y);
15615 +   %em_checkmacro(name=EM_PROPERTY_NUMINPUTS,              value=1, global=Y);
15616 +   %em_checkmacro(name=EM_PROPERTY_DUMMY,                  value=N, global=Y);
15617 +   %em_checkmacro(name=EM_PROPERTY_LEAFID,                 value=Y, global=Y);
15618 +   %em_checkmacro(name=EM_PROPERTY_PREDICT,                value=Y, global=Y);
15619 +   %em_checkmacro(name=EM_PROPERTY_PERFORMANCE,            value=DISK, global=Y);
15620 +   %em_checkmacro(name=EM_PROPERTY_CV,                     value=N, global=Y);
15621 +   %em_checkmacro(name=EM_PROPERTY_CVNITER,                value=10, global=Y);
15622 +   %em_checkmacro(name=EM_PROPERTY_CVREPEAT,               value=1, global=Y);
15623 +   %em_checkmacro(name=EM_PROPERTY_CVSEED,                 value=12345, global=Y);
15624 +   %em_checkmacro(name=EM_PROPERTY_OBSIMPORTANCE,          value=N, global=Y);
15625 +   %em_checkmacro(name=EM_PROPERTY_NUMSINGLEIMP,           value=5, global=Y);
15627 +   /* properties for interactive sample */
15628 +   %em_checkmacro(name=EM_PROPERTY_CREATESAMPLE,           value=DEFAULT, global=Y);
15629 +   %em_checkmacro(name=EM_PROPERTY_SAMPLEMETHOD,           value=RANDOM, global=Y);
15630 +   %em_checkmacro(name=EM_PROPERTY_SAMPLESIZE,             value=10000, global=Y);
15631 +   %em_checkmacro(name=EM_PROPERTY_SAMPLESEED,             value=12345, global=Y);
15633 +   /* report properties */
15634 +   %em_checkmacro(name=EM_PROPERTY_PRECISION,              value=4, global=Y);
15635 +   %em_checkmacro(name=EM_PROPERTY_SPLITPRECISION,         value=4, global=Y);
15636 +   %em_checkmacro(name=EM_PROPERTY_CLASSCOLORBY,           value=PERCENTEVEN, global=Y);
15637 +   %em_checkmacro(name=EM_PROPERTY_INTCOLORBY,             value=AVG, global=Y);
15638 +   %em_checkmacro(name=EM_PROPERTY_SHOWNODEID,             value=Y, global=Y);
15639 +   %em_checkmacro(name=EM_PROPERTY_SHOWVALID,              value=Y, global=Y);
15640 +   %em_checkmacro(name=EM_PROPERTY_PRED,                   value=N, global=Y);
15641 +   %em_checkmacro(name=EM_PROPERTY_TARGET,                 value=ALL, global=Y);
15642 +   %em_checkmacro(name=EM_PROPERTY_COUNT,                  value=Y, global=Y);
15643 +   %em_checkmacro(name=EM_PROPERTY_PERCENTCORRECT,         value=N, global=Y);
15644 +   %em_checkmacro(name=EM_PROPERTY_PROFITLOSS,             value=NONE, global=Y);
15645 +   %em_checkmacro(name=EM_PROPERTY_AVG,                    value=Y, global=Y);
15646 +   %em_checkmacro(name=EM_PROPERTY_RASE,                   value=N, global=Y);
15648 +   /* score properties */
15649 +   %em_checkmacro(name=EM_PROPERTY_VARSELECTION,           value=Y, global=Y);
15650 +   %em_checkmacro(name=EM_PROPERTY_NODEROLE,               value=SEGMENT, global=Y);
15652 +%mend EM_SetProperties;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.

NOTE: Deleting EMWS1.TREE_EMTREE (memtype=DATA).
NOTE: PROCEDURE DELETE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_TRAINMACROS.SOURCE.
15654 +%Macro EM_CheckBinaryTargetLevel(indata=, target=,  nLevel= );
15655 +  %global &nLevel;
15656 +  proc dmdb batch data=&indata
15657 +    classout=_tmp_dmdbout;
15658 +    class &target;
15659 +  run;
15660 +  data _tmp_dmdbout;
15661 +    set _tmp_dmdbout;
15662 +    if strip(TYPE) = 'N' and  strip(LEVEL) = '.' then delete;
15663 +    if strip(TYPE) = 'C' and  strip(LEVEL) = '' then delete;
15664 +  run;
15665 +  data _null_;
15666 +    %let dsid = %sysfunc(open(work._tmp_dmdbout));
15667 +    %let _obs = %sysfunc(attrn(&dsid, NOBS));
15668 +    %let dsid = %sysfunc(close(&dsid));
15669 +     call symput("&nLevel", put(&_obs, Best12.));
15670 +  run;
15672 +  proc datasets lib=work nolist;
15673 +     delete _tmp_dmdbout;
15674 +  run;
15675 +  quit;
15676 +%Mend EM_CheckBinaryTargetLevel;
15679 +%macro em_tree_runTreeProcedure(indata= , multipleTar= , intFlag= );
15681 +  /* determine the number of obs in training data */
15682 +  proc sql;
15683 +    reset noprint;
15684 +    select count(*) into :em_nobs from &indata;
15685 +  quit;
15687 +  /* determine the number of input variables */
15688 +  %let numinputs = %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_NOMINAL_INPUT + &EM_NUM_ORDINAL_INPUT + &EM_NUM_INTERVAL_INPUT+
15689 +                         &EM_NUM_BINARY_REJECTED + &EM_NUM_NOMINAL_REJECTED + &EM_NUM_ORDINAL_REJECTED + &EM_NUM_INTERVAL_REJECTED);
15691 +  /* retrieve targetEvent from decmeta */
15692 +  %let targetEvent=;
15693 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
15694 +    %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
15695 +      data _null_;
15696 +       set &EM_DEC_DECMETA(where=(_TYPE_="TARGET"));
15697 +       call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
15698 +      run;
15699 +    %end;
15700 +  %end;
15702 +  /* create targetTable if multipleTar eq Y */
15703 +  data temptarget;
15704 +    set &EM_DATA_VARIABLESET;
15705 +    where ROLE="TARGET" AND LEVEL^="ORDINAL";
15706 +  run;
15708 + /* data sets */
15709 + %EM_GETNAME(key=OUTSTATS,      type=DATA);
15710 + %EM_GETNAME(key=EMTREE,        type=DATA);
15711 + %EM_GETNAME(key=OUTOBSIMP,     type=DATA);
15712 + %EM_GETNAME(key=OUTSEQ,        type=DATA);
15713 + %EM_GETNAME(key=OUTIMPORT,     type=DATA);
15714 + %EM_GETNAME(key=OUTNODES,      type=DATA);
15715 + %EM_GETNAME(key=OUTSUMMARY,    type=DATA);
15716 + %EM_GETNAME(key=OUTTOPOLOGY,   type=DATA);
15717 + %EM_GETNAME(key=OUTPATH,       type=DATA);
15718 + %EM_GETNAME(key=OUTRULES,      type=DATA);
15720 + /* files */
15721 + %EM_GETNAME(key=TREEFLOW, type=FILE, extension=sas);
15722 + %EM_GETNAME(key=TREEPUBLISH, type=FILE, extension=sas);
15724 + /* turn on pmml if requested */
15725 + %let nnpmml=0;
15726 + %if %symexist(EM_PMML) %then %do;
15727 +    %if %upcase(&EM_PMML)=Y or %upcase(&EM_PMML)=YES %then %do;
15728 +       %let nnpmml=1;
15730 +       ods pmml file="&EM_FILE_EMPMML" encoding="UTF-8";
15731 +%end;
15733 + %let numClassTarget = %sysevalf(&EM_NUM_BINARY_TARGET + &EM_NUM_NOMINAL_TARGET + &EM_NUM_ORDINAL_TARGET);
15735 + %if &nnpmml or &numClassTarget %then %do;
15737 +       /* create dmdb needed for pmml generation */
15738 +       %let tree_maxlevel = 512;
15739 +       %if %symexist(EM_TRAIN_MAXLEVELS) %then %do;
15740 +         %if &EM_TRAIN_MAXLEVELS ne %then %do;
15741 +           %let tree_maxlevel = &EM_TRAIN_MAXLEVELS;
15742 +         %end;
15743 +       %end;
15744 +       %if &tree_maxlevel gt 0 %then %do;
15745 +           %let tree_maxlevel=%sysevalf(&tree_maxlevel+1);
15746 +          %let tree_maxlevel=%sysfunc(max(3, &tree_maxlevel ));
15747 +       %end;
15749 +       %let targetOrderString =;
15750 +       %let targetString = ;
15751 +       data _null_;
15752 +          length orderString nameString $10000;
15753 +          retain orderString nameString;
15754 +          set &em_data_variableset end=eof;
15755 +          %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" and ^&em_num_ordinal_target %then %do;
15756 +              where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL");
15757 +          %end;
15758 +          %else %do;
15759 +              where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL", "ORDINAL") and USE ='Y';
15760 +          %end;          select(order);
15761 +            when('')        order ='DESC';
15762 +            when('FMTASC')  order='ASCFMT';
15763 +            when('FMTDESC') order='DESFMT';
15764 +            otherwise;
15765 +          end;
15766 +          orderString = trim(orderString)!!' '!!trim(NAME)!!'('!!trim(order)!!')';
15767 +          nameString = trim(nameString)!!' '!!trim(NAME);
15769 +          if eof then do;
15770 +             call symput('targetOrderString', trim(orderString));
15771 +             call symput('targetString', trim(nameString));
15772 +          end;
15773 +       run;
15775 +       %let arborkluge= "work._treeDMDB";
15777 +       proc dmdb batch data=&indata
15778 +       %if &nnpmml %then %do;
15779 +           PMML
15780 +       %end;
15781 +        dmdbcat=_treeDMDB classout=classout varout=varout maxlevel=&tree_maxlevel;
15784 +   %if &nnpmml %then %do;
15785 +        %if "%EM_ID" ne "" %then %do;
15786 +          id %EM_ID;
15787 +        %end;
15788 +        %if &EM_NUM_CLASS gt 0 %then %do;
15789 +          class %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
15790 +               %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
15791 +               &targetOrderString;
15792 +        %end;
15793 +        %if &EM_NUM_INTERVAL gt 0 %then %do;
15794 +          var %EM_INTERVAL;
15795 +        %end;
15796 +        target &targetString %EM_INTERVAL_TARGET;
15797 +        %if "%EM_FREQ" ne "" %then %do;
15798 +          freq %EM_FREQ;
15799 +        %end;
15800 +  %end;
15801 +  %else %do;
15802 +      class  &targetOrderString;
15803 +      target &targetString %EM_INTERVAL_TARGET;
15804 +  %end;
15805 +       run;
15806 +       quit;
15808 +       proc datasets lib=work nolist;
15809 +          delete classout varout;
15810 +       run;
15811 +       quit;
15813 +    %end;
15814 + %end;
15816 + /* run Arbor procedure */
15817 + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
15818 +  proc arbor data=&INDATA
15820 +  %if "&EM_PROPERTY_LEAFSIZE" ne "" %then %do;
15821 +    Leafsize = &EM_PROPERTY_LEAFSIZE
15822 +  %end;
15824 +  %if (("&EM_PROPERTY_SPLITSIZE" ne ".") AND (&EM_PROPERTY_SPLITSIZE lt &em_nobs)) %then %do;
15825 +    Splitsize = &EM_PROPERTY_SPLITSIZE
15826 +  %end;
15828 +  %if "&EM_PROPERTY_MINCATSIZE" ne "" %then %do;
15829 +    MinCatSize = &EM_PROPERTY_MINCATSIZE
15830 +  %end;
15832 +  %if "&EM_PROPERTY_MAXBRANCH" ne "" %then %do;
15833 +    MaxBranch = &EM_PROPERTY_MAXBRANCH
15834 +  %end;
15836 +  %if "&EM_PROPERTY_MAXDEPTH" ne "" %then %do;
15837 +    MaxDepth = &EM_PROPERTY_MAXDEPTH
15838 +  %end;
15840 +  %if (("%EM_TARGET_LEVEL" eq "NOMINAL") OR ("%EM_TARGET_LEVEL" eq "BINARY")) %then %do;
15841 +    %let Criterion = &EM_PROPERTY_NOMINALCRITERION;
15842 +  %end;
15843 +  %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
15844 +    %let Criterion = &EM_PROPERTY_ORDINALCRITERION;
15845 +  %end;
15846 +  %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
15847 +    %let Criterion = &EM_PROPERTY_INTERVALCRITERION;
15848 +  %end;
15850 +  %if (("&criterion" eq "PROBCHISQ") or ("&criterion" eq "PROBF")) %then %do;
15851 +    %if "&EM_PROPERTY_SIGLEVEL" ne "" %then %do;
15852 +      alpha = &EM_PROPERTY_SIGLEVEL
15853 +    %end;
15854 +  %end;
15856 +  %if (("&EM_PROPERTY_KASS" eq "Y") OR ("&EM_PROPERTY_DEPTH" eq "Y") or ("&EM_PROPERTY_INPUTS" eq "Y")) %then %do;
15857 +    %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion" eq "DEFAULT")) %then %do;
15858 +      %if (("&EM_PROPERTY_KASS" eq "Y") or ("&EM_PROPERTY_DEPTH" eq "Y")) %then %do;
15859 +        %if "&EM_PROPERTY_KASSAPPLY" eq "BEFORE" %then %let chaid = CHAIDBEFORE;
15860 +        %else %if "&EM_PROPERTY_KASSAPPLY" eq "AFTER" %then %let chaid = CHAIDAFTER;
15862 +        padjust =
15863 +        %if "&EM_PROPERTY_KASS" eq "Y" %then %do;
15864 +          &chaid
15865 +        %end;
15866 +        %if "&EM_PROPERTY_DEPTH" eq "Y" %then %do;
15867 +          DEPTH
15868 +        %end;
15869 +      %end;
15870 +      %if "&EM_PROPERTY_INPUTS" eq "Y" %then %do;
15871 +         %let num_inputs = %sysfunc(min(&numinputs, &EM_PROPERTY_NUMINPUTS));
15872 +         pvars = &num_inputs
15873 +      %end;
15874 +    %end;
15875 +  %end;
15876 +  %else %do;
15877 +      %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion" eq "DEFAULT")) %then %do;
15878 +         padjust = NONE
15879 +      %end;
15880 +  %end;
15882 +  %if "&EM_PROPERTY_NRULES" ne "" %then %do;
15883 +    %let num_nrules = %sysfunc(min(&numinputs, &EM_PROPERTY_NRULES));
15884 +    Maxrules = &num_nrules
15885 +  %end;
15887 +  %if "&EM_PROPERTY_NSURRS" ne "" %then %do;
15888 +    %let num_nsurrs = %sysfunc(min((&numinputs-1), &EM_PROPERTY_NSURRS));
15889 +    Maxsurrs = &num_nsurrs
15890 +  %end;
15892 +  %if "&EM_PROPERTY_MISSINGVALUE" ne "" %then %do;
15893 +     Missing=&EM_PROPERTY_MISSINGVALUE
15894 +  %end;
15896 +  %if "&EM_PROPERTY_USEVARONCE" eq "Y" %then %do;
15897 +     USEVARONCE
15898 +  %end;
15900 +  %if "&EM_PROPERTY_EXHAUSTIVE" ne "" %then %do;
15901 +    Exhaustive=&EM_PROPERTY_EXHAUSTIVE
15902 +  %end;
15905 +  %if (("&multipleTar" eq "N") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
15906 +    event = "&targetEvent"
15907 +  %end;
15909 +  %if "&EM_PROPERTY_USEDECISION" eq "Y" %then %do;
15910 +     DECSEARCH
15911 +  %end;
15913 +  %if "&EM_PROPERTY_USEPRIORS" eq "Y" %then %do;
15914 +     PRIORSSEARCH
15915 +  %end;
15917 +  %if &arbor_1 ne %then %do;
15918 +    &arbor_1
15919 +  %end;
15921 +  %if &em_arbor ne %then %do;
15922 +     &em_arbor
15923 +  %end;
15924 +  ;
15925 + %end;
15926 + %else %if "&EM_PROPERTY_IMPORTMODEL" eq "Y"  %then %do;
15927 +     proc arbor data=&INDATA inmodel=&EM_PROPERTY_ImportedTreeData refreshtrain;
15928 +       interact;
15929 + %end;
15930 + %else %if "&EM_PROPERTY_FREEZE" eq "Y" %then %do;
15931 +   %if %sysfunc(exist(&EM_USER_EMTREE)) ne 1 %then %do;
15932 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
15933 +    %put &em_codebar;
15934 +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err, NOQUOTE));
15935 +    %put &errormsg;
15936 +    %put &em_codebar;
15937 +    %goto doendm;
15938 +   %end;
15939 +   %else %do;
15940 +     proc arbor data=&INDATA inmodel=&EM_USER_EMTREE refreshtrain;
15941 +       interact;
15942 +   %end;
15943 + %end;
15945 + %else %do;
15946 +   %if %sysfunc(exist(&EM_USER_BROWSETREE)) ne 1 %then %do;
15947 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
15948 +    %put &em_codebar;
15949 +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err, NOQUOTE));
15950 +    %put &errormsg;
15951 +    %put &em_codebar;
15952 +    %goto doendm;
15953 +   %end;
15954 +   %else %do;
15955 +      proc arbor data=&INDATA inmodel=&EM_USER_BROWSETREE refrestrain;
15956 +        interact;
15957 +   %end;
15958 + %end;
15960 + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
15961 +    %if %eval(&EM_NUM_INTERVAL_INPUT + &EM_NUM_INTERVAL_REJECTED) gt 0 %then %do;
15962 +      input %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED/ level = interval;
15963 +    %end;
15965 +    %if  %eval(&EM_NUM_NOMINAL_INPUT + &EM_NUM_NOMINAL_REJECTED) gt 0 %then %do;
15966 +      input %EM_NOMINAL_INPUT %EM_NOMINAL_REJECTED / level = nominal;
15967 +    %end;
15969 +    %if %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_BINARY_REJECTED) gt 0 %then %do;
15970 +      input %EM_BINARY_INPUT %EM_BINARY_REJECTED / level = nominal;
15971 +    %end;
15973 +    %if %eval(&EM_NUM_ORDINAL_INPUT + &EM_NUM_ORDINAL_REJECTED) gt 0 %then %do;
15974 +      input %EM_ORDINAL_INPUT %EM_ORDINAL_REJECTED/ level = ordinal;
15975 +    %end;
15977 +    %if "%EM_FREQ" ne "" %then %do;
15978 +       freq %EM_FREQ;
15979 +    %end;
15981 +    %if "&multipleTar" eq "Y" %then %do;
15982 +       /* cycle through all target vars in variableset */
15983 +       %let tdsid = %sysfunc(open(temptarget));
15984 +       %if &tdsid %then %do;
15985 +          %let n_var = %sysfunc(varnum(&tdsid, NAME));
15986 +          %let n_lvl = %sysfunc(varnum(&tdsid, LEVEL));
15987 +          %do %while(^ %sysfunc(fetch(&tdsid)));
15988 +             %let var = %sysfunc(getvarc(&tdsid, &n_var));
15989 +             %let lvl = %sysfunc(getvarc(&tdsid, &n_lvl));
15990 +             target &var / level = &lvl
15991 +             %if (("&lvl" eq "BINARY") or ("&lvl" eq "NOMINAL")) %then %do;
15992 +               Criterion=&EM_PROPERTY_NOMINALCRITERION;
15993 +             %end;
15994 +             %else %if "&lvl" eq "INTERVAL" %then %do;
15995 +               Criterion=&EM_PROPERTY_INTERVALCRITERION;
15996 +             %end;
15997 +             %else %if "&lvl" eq "ORDINAL" %then %do;
15998 +               Criterion=&EM_PROPERTY_ORDINALCRITERION;
15999 +             %end;
16000 +          %end;
16001 +          %if &tdsid %then %let tdsid=%sysfunc(close(&tdsid));
16002 +       %end;
16003 +       useTarget variable = %EM_TARGET;
16004 +    %end;
16005 +    %else %do;
16006 +      target %EM_TARGET / level = %EM_TARGET_LEVEL
16007 +      %if (("%EM_TARGET_LEVEL" eq "BINARY") or ("%EM_TARGET_LEVEL" eq "NOMINAL")) %then %do;
16008 +        Criterion=&EM_PROPERTY_NOMINALCRITERION;
16009 +      %end;
16010 +      %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
16011 +        Criterion=&EM_PROPERTY_INTERVALCRITERION;
16012 +      %end;
16013 +      %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
16014 +        Criterion=&EM_PROPERTY_ORDINALCRITERION;
16015 +      %end;
16016 +    %end;
16018 +    %if "&multipleTar" eq "N" %then %do;
16019 +      &EM_DEC_STATEMENT;
16020 +    %end;
16022 +    Performance &EM_PROPERTY_PERFORMANCE
16023 +    %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
16024 +      nodesize=&EM_PROPERTY_NODESAMPLE
16025 +    %end;
16026 +    ;
16028 +    %if "&intFlag" eq "Y" %then %do;
16029 +       INTERACT Largest;
16030 +       Train maxnewdepth=0;
16031 +    %end;
16033 +       %if "&EM_PROPERTY_ASSESSMEASURE" ne "" %then %do;
16034 +         Assess
16035 +         %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)) )) %then %do;
16036 +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
16037 +              %put &em_codebar;
16038 +              %let errormsg = %sysfunc(sasmsg(sashelp.dmine, novalidationwithcv_note, NOQUOTE));
16039 +              %put &errormsg;
16040 +              %put &em_codebar;
16041 +            %end;
16042 +            %else %do;
16043 +               Validata=&EM_IMPORT_VALIDATE
16044 +            %end;
16045 +         %end;
16046 +         %else %do;
16047 +           NoValidata
16048 +         %end;
16049 +         %if "&EM_PROPERTY_TRAINMODE" ne "INTERACTIVE" %then %do;
16050 +            %if "&EM_PROPERTY_ASSESSMEASURE" eq "PROFIT/LOSS" %then %do;
16051 +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
16052 +               %if &dsid %then %do;
16053 +                 %let usenum = %sysfunc(varnum(&dsid, USE));
16054 +                 %do %while(^ %sysfunc(fetch(&dsid)));
16055 +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
16056 +                   %if "&use" eq "Y" %then %let measure=PROFIT;
16057 +                   %else %do;
16058 +                      %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %let measure = ASE;
16059 +                      %else %let measure= MISC;
16060 +                   %end;
16061 +                 %end;
16062 +               %end;
16063 +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
16064 +            %end;
16065 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "MISC" %then %do;
16066 +              %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then  %do;
16067 +                 %let measure=ASE;
16068 +              %end;
16069 +              %else %do;
16070 +                 %let measure=MISC;
16071 +              %end;
16072 +            %end;
16073 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "ASE" %then %do;
16074 +              %let measure=ASE;
16075 +            %end;
16076 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "LIFT" %then %do;
16077 +               %let measure = LIFT;
16078 +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
16079 +               %if &dsid %then %do;
16080 +                 %let usenum = %sysfunc(varnum(&dsid, USE));
16081 +                 %do %while(^ %sysfunc(fetch(&dsid)));
16082 +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
16083 +                   %if "&use" eq "Y" %then %let measure=LIFTPROFIT;
16084 +                 %end;
16085 +               %end;
16086 +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
16087 +            %end;
16088 +            measure=&measure
16089 +            %if (("&measure" eq "LIFT") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
16090 +               event = "&targetEvent"
16091 +            %end;
16092 +            %if (("&measure" eq "LIFT") OR ("&measure" eq "LIFTPROFIT")) %then %do;
16093 +              proportion=&EM_PROPERTY_ASSESSPERCENTAGE
16094 +            %end;
16095 +         %end;
16096 +         %if "&multipleTar" eq "N" %then %do;
16097 +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
16098 +               CV
16099 +               %if "&EM_PROPERTY_CVNIter" ne "" %then %do;
16100 +                 CVNITer = &EM_PROPERTY_CVNITER
16101 +               %end;
16102 +               %if "&EM_PROPERTY_CVREPEAT" ne "" %then %do;
16103 +                 CVRepeat = &EM_PROPERTY_CVREPEAT
16104 +               %end;
16105 +               %if "&EM_PROPERTY_CVSEED" ne "" %then %do;
16106 +                 CVSeed = &EM_PROPERTY_CVSEED
16107 +               %end;
16108 +            %end;
16109 +         %end;
16110 +       %end;
16111 +      ;
16113 +      %if "&intFlag" ne "Y" %then %do;
16114 +        %if "&EM_PROPERTY_SUBTREE" ne "" %then %do;
16115 +          %if "&EM_PROPERTY_SUBTREE" eq "ASSESSMENT" %then %let subtree=BEST;
16116 +          %else %if "&EM_PROPERTY_SUBTREE" eq "N" %then %let subtree=NLEAVES;
16117 +          %else %if "&EM_PROPERTY_SUBTREE" eq "LARGEST" %then %let subtree=LARGEST;
16119 +          SUBTREE &subtree
16120 +          %if "&subtree" eq "NLEAVES" %then %do;
16121 +            =&EM_PROPERTY_NSUBTREE
16122 +          %end;
16123 +          ;
16124 +        %end;
16126 +       %if (("&EM_PROPERTY_OBSIMPORTANCE" eq "Y") AND ("&multipleTar" eq "N")) %then %do;
16127 +          %if "&EM_USER_OUTOBSIMP" ne "" %then %do;
16128 +            importance data=&INDATA outfit=&EM_USER_OUTOBSIMP nvars=&EM_PROPERTY_NUMSINGLEIMP;
16129 +          %end;
16130 +       %end;
16131 +      %end;
16132 + %end;
16135 + MakeMacro nleaves = nleaves;
16136 + save
16137 + %if "&EM_USER_EMTREE" ne "" %then %do;
16138 +   MODEL=&EM_USER_EMTREE
16139 + %end;
16140 + %if "&EM_USER_OUTSEQ" ne "" %then %do;
16141 +   SEQUENCE=&EM_USER_OUTSEQ
16142 + %end;
16143 + %if "&EM_USER_OUTIMPORT" ne "" %then %do;
16144 +   IMPORTANCE=&EM_USER_OUTIMPORT
16145 + %end;
16146 + %if "&EM_USER_OUTNODES" ne "" %then %do;
16147 +   NODESTAT=&EM_USER_OUTNODES
16148 + %end;
16149 + %if "&EM_USER_OUTSUMMARY" ne "" %then %do;
16150 +   SUMMARY=&EM_USER_OUTSUMMARY
16151 + %end;
16152 + %if "&EM_USER_OUTSTATS" ne "" %then %do;
16153 +   STATSBYNODE=&EM_USER_OUTSTATS
16154 + %end;
16155 + %if "&EM_USER_OUTTOPOLOGY" ne "" %then %do;
16156 +   TOPOLOGY=&EM_USER_OUTTOPOLOGY
16157 + %end;
16158 + %if "&EM_USER_OUTPATH" ne "" %then %do;
16159 +   Pathlistnonmissing=&EM_USER_OUTPATH
16160 + %end;
16161 + %if "&EM_USER_OUTRULES" ne "" %then %do;
16162 +   RULES = &EM_USER_OUTRULES
16163 + %end;
16164 + ;
16166 + %if "&intFlag" ne "Y" %then %do;
16168 +   %let lookupString = ;
16169 +   %if ^%symexist(EM_OPTION) %then
16170 +      %let EM_OPTION=;
16172 +   %if %sysfunc(index(%upcase(&EM_DEBUG), I18N)) or %sysfunc(index(%upcase(&EM_OPTION), I18N)) %then %do;
16173 +      %let lookupString = LOOKUP=SELECT;
16174 +   %end;
16176 +   %let codetext=;
16177 +   %let norescodetxt=;
16179 +   %if "&EM_PROPERTY_DUMMY" eq "Y" %then %do;
16180 +     %let codetext=&codetext DUMMY;
16181 +     %let norescodetxt=&norescodetxt DUMMY;
16182 +   %end;
16183 +   %if "&EM_PROPERTY_LEAFID" ne "Y" %then %do;
16184 +     %let codetext=&codetext NOLEAFID;
16185 +     %let norescodetxt=&norescodetxt NOLEAFID;
16186 +   %end;
16187 +   %if "&EM_PROPERTY_PREDICT" ne "Y" %then %do;
16188 +     %let norescodetxt=&norescodetxt NOPRED;
16189 +   %end;
16191 +   code file="&EM_USER_TREEFLOW" res &codetext group=&emloopid &lookupString;
16192 +   code file="&EM_USER_TREEPUBLISH" nores &norescodetxt group=&emloopid &lookupString;
16194 +   %if &nnpmml %then %do;
16195 +     code pmml;
16196 +   %end;
16198 +   score data=&INDATA out=_NULL_ outfit=work.fit_train role=TRAIN;
16199 +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16200 +     score data=&EM_IMPORT_VALIDATE out=_NULL_ outfit=work.fit_valid role=VALID;
16201 +   %end;
16202 +   %if "&EM_IMPORT_TEST" ne "" %then %do;
16203 +     score data=&EM_IMPORT_TEST out=_NULL_ outfit=work.fit_test role=TEST;
16204 +   %end;
16205 + %end;
16207 + run;
16208 + quit;
16210 + /*%em_checkerror(); */
16211 +  %if %sysfunc(cexist(work._treeDMDB)) %then %do;
16212 +   /* Delete DMDB catalog */
16213 +   proc datasets lib=work nolist;
16214 +       delete _treeDMDB / mt=cat;
16215 +  run;
16216 +  %end;
16218 + %if &nnpmml %then %do;
16219 +    ods pmml close;
16220 + %end;
16222 +  %doendm:
16224 +%mend em_tree_runTreeProcedure;
16226 +%macro em_tree_createFitStats( multipleTar= );
16229 +  /* create targetTable is multipleTar eq Y */
16230 +  data temptarget;
16231 +    set &EM_DATA_VARIABLESET;
16232 +    where ROLE="TARGET";
16233 +  run;
16235 +  %EM_GETNAME(key=EMOUTFIT, type=DATA);
16236 +   data &EM_USER_EMOUTFIT;
16237 +     length target $32;
16238 +     merge work.fit_train
16239 +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16240 +       work.fit_valid
16241 +     %end;
16242 +     %if "&EM_IMPORT_TEST" ne "" %then %do;
16243 +       work.fit_test
16244 +     %end;
16245 +     ;
16246 +     %if "&multipleTar" eq "N" %then %do;
16247 +       target="%EM_TARGET";
16248 +     %end;
16249 +     %else %do;
16250 +       target = _TARGET_;
16251 +     %end;
16252 +     drop _NW_ _SUMW_
16253 +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16254 +        _VSUMW_
16255 +     %end;
16256 +     ;
16257 +   run;
16259 +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16260 +     proc datasets library=work nolist;
16261 +       delete fit_valid;
16262 +     run;
16263 +   %end;
16264 +   %if "&EM_IMPORT_TEST" ne "" %then %do;
16265 +     proc datasets library=work nolist;
16266 +       delete fit_test;
16267 +     run;
16268 +   %end;
16270 +%mend em_tree_createFitStats;
16273 +%macro em_tree_makeEnglishRules;
16275 +  %EM_GETNAME(key=OUTNODES, type=DATA);
16276 +  %EM_GETNAME(key=OUTPATH, type=DATA);
16278 +  /* verify that necessary tables exist and if not, skip processing */
16279 +  %if %sysfunc(exist(&EM_USER_OUTNODES)) ne 1 %then %do;
16280 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
16281 +    %goto doendm;
16282 +  %end;
16283 +  %if %sysfunc(exist(&EM_USER_OUTPATH)) ne 1 %then %do;
16284 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
16285 +    %goto doendm;
16286 +  %end;
16288 +  /* determine length of variable in outpath dataset */
16289 +  %let vlength= ;
16290 +  %let dsid = %sysfunc(open(&EM_USER_OUTPATH));
16291 +  %if &dsid ne %then %do;
16292 +    %let varnum = %sysfunc(varnum(&dsid, VARIABLE));
16293 +    %let vlength = %sysfunc(VARLEN(&dsid, &varnum));
16294 +  %end;
16295 +  %if &dsid ne %then %let dsid = %sysfunc(close(&dsid));
16297 +  data tempoutpath;
16298 +    length varname $&vlength;
16299 +    retain varname;
16300 +    set &EM_USER_OUTPATH;
16302 +    if ^missing(variable) then varname=variable;
16303 +    else if ^missing(var_name) then varname=var_name;
16304 +    output;
16305 +  run;
16307 +  /* create an array of generated predicted variable names */
16308 +  %let tree_pred_vars = ;
16309 +  %let tree_pred_label = ;
16310 +  %let numpred= 0;
16311 +  %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
16313 +    data _null_;
16314 +     set &EM_DEC_DECMETA(where=(_TYPE_="PREDICTED")) end=eof;
16315 +     call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
16316 +     call symput('tree_pred_label'!!strip(put(_N_, BEST.)), strip(tranwrd(LABEL,'"','""')));
16317 +     if eof then
16318 +       call symput('numpred', strip(put(_N_, BEST.)));
16319 +    run;
16320 +  %end;
16322 +  /* determine if NPRIORS exists in outnodes  */
16323 +  %local nprior_flag;
16324 +  data _null_;
16325 +    set &EM_USER_OUTNODES(obs=2) end=eof;
16326 +    if eof then do;
16327 +      call symput('nprior_flag', strip(put(npriors, best.)));
16328 +    end;
16329 +  run;
16331 +  proc sort data=tempoutpath; by node; run;
16332 +  proc sort data=&EM_USER_OUTNODES out=outnodes; by node; run;
16334 +  data tempoutpath;
16335 +    merge tempoutpath(in=_a) outnodes(keep= node
16336 +    %if "&nprior_flag" ne "." %then %do;
16337 +      NPRIORS
16338 +    %end;
16339 +    %else %do;
16340 +      N
16341 +    %end;
16342 +    %if &numpred gt 0 %then %do;
16343 +      %do i=1 %to &numpred;
16344 +        &&tree_pred_vars&i
16345 +      %end;
16346 +    %end;
16347 +    );
16348 +    by node;
16349 +    if _a;
16350 +  run;
16352 +  proc sort data=tempoutpath; by node descending varname descending numeric_value; run;
16354 +  data _null_;
16355 +    file x;
16356 +    set tempoutpath;
16357 +    by node descending varname;
16358 +    retain origvar oldnode string;
16359 +    length origvar $32 oldnode 8 string $200;
16361 +    if _N_ = 1 then do;
16362 +      origvar = varname;
16363 +      oldnode = node;
16364 +    end;
16366 +    if first.node then do;
16367 +       put "&EM_CODEBAR";
16368 +       put " Node = " node;
16369 +       put "&EM_CODEBAR";
16370 +    end;
16372 +      if first.varname then do;
16373 +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
16374 +            if MISSING(CHARACTER_VALUE) then do;
16375 +             if NUMERIC_VALUE ne .  then do;
16376 +              if ^first.node then do;
16377 +                string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16378 +              end;
16379 +              else do;
16380 +                string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16381 +              end;
16382 +             end;
16383 +            end;
16384 +            else do;
16385 +              if ^first.node then do;
16386 +                string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16387 +              end;
16388 +              else do;
16389 +                string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16390 +              end;
16391 +             end;
16392 +         end;
16393 +         else if RELATION in ("=") then do;
16394 +            if ^first.node then do;
16395 +              string = "AND "||strip(varname) ||" IS ONE OF: "||character_value;
16396 +            end;
16397 +            else do;
16398 +              string = "if "|| strip(varname) ||" IS ONE OF: "||character_value;
16399 +            end;
16400 +         end;
16401 +         else if RELATION in ("ISMISSING") then do;
16402 +            if ^first.node then do;
16403 +              string = " AND "|| strip(varname) || " equals Missing";
16404 +            end;
16405 +            else do;
16406 +              string = "if "|| strip(varname) ||" equals Missing";
16407 +            end;
16408 +         end;
16409 +         else if RELATION in ("ISNOTMISSING") then do;
16410 +            if ^first.node then do;
16411 +              string = " AND "|| strip(varname) || " equals All Values";
16412 +            end;
16413 +            else do;
16414 +              string = "if "|| strip(varname) ||" equals All Values";
16415 +            end;
16416 +         end;
16417 +         if ^missing(varname) then origvar = varname;
16418 +         oldnode=node;
16420 +      end;
16421 +      else do;
16422 +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
16423 +          if MISSING(CHARACTER_VALUE) then do;
16424 +           if  NUMERIC_VALUE ne .  then do;
16425 +            if ^MISSING(string) then
16426 +              string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16427 +            else
16428 +              string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16429 +           end;
16430 +          end;
16431 +          else do;
16432 +            if ^MISSING(string) then
16433 +              string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16434 +            else
16435 +              string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16436 +          end;
16438 +         end;
16439 +         else if RELATION in ("=") then do;
16440 +           string = strip(string)||", "||strip(character_value);
16441 +         end;
16442 +         else if RELATION in ("ISMISSING") then do;
16444 +         end;
16445 +         if ^missing(varname) then origvar = varname;
16446 +         oldnode=node;
16447 +      end;
16448 +      if last.varname then do;
16449 +         if RELATION in ("ISMISSING") then do;
16450 +           if ^first.varname then do;
16451 +             string = strip(string) || " or MISSING";
16452 +           end;
16453 +         end;
16454 +         put string;
16455 +         if ^missing(varname) then origvar = varname;
16456 +         oldnode=node;
16457 +      end;
16459 +      if last.node then do;
16460 +         put "then ";
16461 +         put " Tree Node Identifier   = " node;
16463 +         %if "&nprior_flag" ne "." %then %do;
16464 +           put " Number of Observations = " NPRIORS;
16465 +         %end;
16466 +         %else %do;
16467 +           put " Number of Observations = " N;
16468 +         %end;
16470 +         %if &numpred gt 0 %then %do;
16471 +           %do i=1 %to &numpred;
16472 +             put " &&tree_pred_label&i = " &&tree_pred_vars&i;
16473 +           %end;
16474 +         %end;
16476 +         put " ";
16477 +         if ^missing(varname) then origvar = varname;
16478 +         oldnode=node;
16479 +      end;
16481 +  run;
16483 +  proc datasets lib=work nolist;
16484 +    delete tempoutpath outnodes;
16485 +  run;
16487 +  %doendm:
16488 +%mend em_tree_makeEnglishRules;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.

NOTE: The data set WORK.EM_USER_KEY has 1 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: DATA STEP view saved on file EMWS1.EM_TREE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.VARSEL_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
      
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.01 seconds
      

NOTE: There were 350 observations read from the data set EMWS1.FIMPORT_DATA.
NOTE: There were 350 observations read from the data set EMWS1.FIMPORT_TRAIN.
NOTE: View EMWS1.EM_TREE.VIEW used (Total process time):
      real time           0.06 seconds
      cpu time            0.03 seconds
      
NOTE: There were 350 observations read from the data set EMWS1.VARSEL_TRAIN.
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.07 seconds
      cpu time            0.03 seconds
      


NOTE: There were 1 observations read from the data set EMWS1.TREE_VARIABLESET.
      WHERE (ROLE='TARGET') and (LEVEL not = 'ORDINAL');
NOTE: The data set WORK.TEMPTARGET has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

NOTE: 1490178 kilobytes of physical memory.
NOTE: Will use 350 out of 350 training cases.
NOTE: Using memory pool with 36419584 bytes.
NOTE: Passed training data 12 times.
NOTE: Training used 62232 bytes of work memory.
NOTE: The subtree sequence contains 18 subtrees. The largest has 35 nodes and 18 leaves.
NOTE: Using subtree with 35 nodes and 18 leaves.
NOTE: Using subtree with 35 nodes and 18 leaves.
NOTE: Created macro variable NLEAVES equal to 18.
NOTE: The data set EMWS1.TREE_OUTIMPORT has 5 observations and 4 variables.
NOTE: The data set EMWS1.TREE_EMTREE has 998 observations and 4 variables.
NOTE: The data set EMWS1.TREE_OUTNODES has 35 observations and 14 variables.
NOTE: The data set EMWS1.TREE_OUTPATH has 128 observations and 7 variables.
NOTE: The data set EMWS1.TREE_OUTRULES has 311 observations and 6 variables.
NOTE: The data set EMWS1.TREE_OUTSEQ has 18 observations and 10 variables.
NOTE: The data set EMWS1.TREE_OUTSTATS has 105 observations and 4 variables.
NOTE: The data set EMWS1.TREE_OUTSUMMARY has 5 observations and 2 variables.
NOTE: The data set EMWS1.TREE_OUTTOPOLOGY has 35 observations and 5 variables.
NOTE: External file C:\Users\Administrator\Desktop\NewProjectExam\Workspaces\EMWS1\Tree\TREEFLOW.sas opened.
NOTE: External file C:\Users\Administrator\Desktop\NewProjectExam\Workspaces\EMWS1\Tree\TREEPUBLISH.sas opened.
NOTE: The data set WORK.FIT_TRAIN has 1 observations and 9 variables.
NOTE: There were 350 observations read from the data set EMWS1.FIMPORT_DATA.
NOTE: There were 350 observations read from the data set EMWS1.FIMPORT_TRAIN.
NOTE: View EMWS1.EM_TREE.VIEW used (Total process time):
      real time           0.08 seconds
      cpu time            0.00 seconds
      
NOTE: There were 350 observations read from the data set EMWS1.VARSEL_TRAIN.


NOTE: There were 350 observations read from the data set EMWS1.FIMPORT_DATA.
NOTE: There were 350 observations read from the data set EMWS1.FIMPORT_TRAIN.
NOTE: View EMWS1.EM_TREE.VIEW used (Total process time):
      real time           0.26 seconds
      cpu time            0.10 seconds
      
NOTE: There were 350 observations read from the data set EMWS1.VARSEL_TRAIN.
NOTE: There were 350 observations read from the data set EMWS1.EM_TREE.
NOTE: The data set WORK._NAMEDAT has 1 observations and 5 variables.
NOTE: PROCEDURE ARBOR used (Total process time):
      real time           0.27 seconds
      cpu time            0.10 seconds
      


NOTE: There were 1 observations read from the data set EMWS1.TREE_VARIABLESET.
      WHERE ROLE='TARGET';
NOTE: The data set WORK.TEMPTARGET has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 1 observations read from the data set WORK.FIT_TRAIN.
NOTE: The data set EMWS1.TREE_EMOUTFIT has 1 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 128 observations read from the data set EMWS1.TREE_OUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 128 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 1 observations read from the data set EMWS1.TREE_AGE_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: Variable npriors is uninitialized.
NOTE: There were 2 observations read from the data set EMWS1.TREE_OUTNODES.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 128 observations read from the data set WORK.TEMPOUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 128 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 35 observations read from the data set EMWS1.TREE_OUTNODES.
NOTE: The data set WORK.OUTNODES has 35 observations and 14 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 128 observations read from the data set WORK.TEMPOUTPATH.
NOTE: There were 35 observations read from the data set WORK.OUTNODES.
NOTE: The data set WORK.TEMPOUTPATH has 128 observations and 10 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 128 observations read from the data set WORK.TEMPOUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 128 observations and 10 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      212:176   222:190   368:191   375:195   
NOTE: The file X is:
      Filename=C:\Users\Administrator\Desktop\NewProjectExam\Workspaces\EMWS1\Tree\ENGLISHRULES.txt,
      RECFM=V,LRECL=131068,File Size (bytes)=0,
      Last Modified=2024年01月07日 16时36分12秒,
      Create Time=2024年01月07日 14时32分19秒

NOTE: 209 records were written to the file X.
      The minimum record length was 1.
      The maximum record length was 66.
NOTE: There were 128 observations read from the data set WORK.TEMPOUTPATH.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: Deleting WORK.TEMPOUTPATH (memtype=DATA).
NOTE: Deleting WORK.OUTNODES (memtype=DATA).

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      


NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

NOTE: Fileref X has been deassigned.
16490  
16491  *------------------------------------------------------------*;
16492  * End TRAIN: Tree;
16493  *------------------------------------------------------------*;

16494  *------------------------------------------------------------*;
16495  * Close any missing semi colons;
16496  *------------------------------------------------------------*;
16497  ;
16498  ;
16499  ;
16500  ;
16501  quit;
16502  *------------------------------------------------------------*;
16503  * Close any unbalanced quotes;
16504  *------------------------------------------------------------*;
16505  /*; *"; *'; */
16506  ;
16507  run;
16508  quit;
16509  /* Reset EM Options */
16510  options formchar="|----|+|---+=|-/\<>*";
16511  options nocenter ls=256 ps=10000;
16512  goptions reset=all device=GIF NODISPLAY;

16513  proc sort data=WORK.EM_USER_REPORT;
16514  by ID VIEW;
16515  run;

NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

